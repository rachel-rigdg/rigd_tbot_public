================================================================================
Document: 120_WebInterfaceStatus Design
Version: v044
Date: UTC:2025-06-15 04:30:00
================================================================================

This document specifies the detailed design for the status dashboard panel in the TradeBot web interface, including system status overview, session summary, and operational notes.

Contents:
- System Status Overview Table
- Session Status Summary Panel
- API and data feed source modules
- Severity and visual indicator logic

The design ensures real-time operational visibility and audit compliance.

=======================================================================================
RIGD GROUP LLC — Web Interface: Status Dashboard Design 
=======================================================================================

**Table: System Status Overview**

| Column                      | Description                                         | Notes                                                  |
|-----------------------------|-----------------------------------------------------|--------------------------------------------------------|
| Broker                      | Name of active broker                               | From decrypted `.env_bot.enc` (`BROKER_NAME`)          |
| Trading Mode                | SINGLE                                              | All bots unified live mode; no paper mode              |
| Float Allocation ($)        | Current deployed float for this broker              | From accounting API/config                             |
| Defense Mode Active         | true / false                                        | Mirrors `DEFENSE_MODE_ACTIVE` in `.env_bot`            |
| Kill Switch Armed           | true / false                                        | True at session start                                  |
| Kill Switch Triggered       | true / false                                        | True if halted by `kill_switch.py`                     |
| **Daily PnL ($)**           | Realized PnL this session for this broker           | From trade logger or accounting sync                   |
| **Cumulative PnL ($)**      | Realized PnL since bot inception for this broker    | Computed from full trade/ledger history                |
| **Win Rate (%)**            | % profitable trades this session                    | From trade logger or accounting sync                   |
| **Cumulative Win Rate (%)** | % profitable trades since bot inception             | Computed from full trade/ledger history                |
| Daily Loss Threshold ($)    | float * `DAILY_LOSS_LIMIT`                          | Runtime-calculated                                     |
| Open Positions              | Number of active trades for this bot                | Enforced by `MAX_OPEN_POSITIONS`                       |
| Max Allowed Trades          | `MAX_TRADES` or Defense Mode scaled                 | Dynamic per `risk_bot.py`                              |
| API Status                  | healthy / degraded / down                           | From `watchdog_bot.py`                                 |
| Strategy Running            | open / mid / close / idle                           | Live from `strategy_router.py`                         |
| Last Trade ID               | Most recent executed trade ID                       | From `trade_logger.py`                                 |
| Last Error Event            | Last critical warning or exception                  | From `error_handler.py`                                |

**Operational Notes:**  
- Cumulative metrics (`Cumulative PnL`, `Cumulative Win Rate`) are computed from the full persistent trade/ledger dataset for this bot instance, since creation/inception.  
- Values update in real time as new trades are logged; recalculated on every dashboard poll.
- Cumulative data is critical for long-term performance analysis and regulatory compliance.
- Dashboard polls status every 15–30 seconds for live visibility.
- Visual state: Green (OK), Yellow (Warning), Red (Critical) based on API health, Defense Mode, Kill Switch.
- Session tags: `DEFENSE_MODE_ACTIVE=true` triggers banner and log tag.
- All UI-visible state changes logged for 7+ days (rotated JSON).
- All fields fully compatible with bot runtime and accounting sync.
- **COA metadata and session status data used by the dashboard must be loaded using `utils_coa_web.py` for UI logic and `coa_utils_ledger.py` for underlying ledger/schema integration.**

**API/Data Feed Source Modules:**
- `float_bot.py`         — Provides float allocation and open positions
- `risk_bot.py`          — Supplies Defense Mode and allocation limits
- `kill_switch.py`       — Kill switch armed/triggered, daily loss threshold
- `watchdog_bot.py`      — Broker API health status
- `error_handler.py`     — Last error event, type, timestamp
- `trade_logger.py`      — Win rate, trade count, PnL stats

=======================================================================================
Session Status Summary Panel

**Panel Title:** System Session Summary

| Field                | Description                                           | Notes                                                      |
|----------------------|-------------------------------------------------------|------------------------------------------------------------|
| Overall System Status| OK / Warning / Critical                               | Derived from: API health, Defense Mode, Kill Switch        |
| Defense Mode Active  | true / false                                          | Mirrors `DEFENSE_MODE_ACTIVE` from `.env_bot`              |
| Total Bots Active    | Count of TradeBot instances currently online          | E.g., 1–N; reflects all deployed bots                      |
| Bots in Kill Switch  | Count where Kill Switch Triggered = true              | E.g., 0/3 bots                                             |
| Active Strategy      | open / mid / close / idle                             | From `strategy_router.py`                                  |
| Open Trades (Total)  | Total live trades across all bots                     | Sum, enforced by `MAX_OPEN_POSITIONS`                      |
| System Uptime        | Elapsed time since bot instance started               | From `main.py` boot time                                   |

**Severity Logic (Overall System Status):**
- Defense Mode=false AND all APIs healthy AND no Kill Switch: `OK` (Green)
- Defense Mode=true OR minor broker/API latency: `Warning` (Yellow)
- Any Kill Switch=true OR broker API down: `Critical` (Red)

**Layout:**
- Display as horizontal bar/widget above Broker Detail Table.
- Color bands/icons: Green (OK), Yellow (Warning), Red (Critical).

**Design Rationale:**
- At-a-glance triage: mirrors core bot safety/ops.
- Confirms Defense Mode/Kill Switch events in real time.
- Audit trail: all state changes, session tags, and events are logged for 7+ days.

*End of Document*  
