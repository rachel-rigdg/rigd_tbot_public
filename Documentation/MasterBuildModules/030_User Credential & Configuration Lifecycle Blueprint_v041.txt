================================================================================
Document: 030_User Credential & Configuration Lifecycle Blueprint
Version: v041
Date: UTC:2025-06-03 18:00
================================================================================

This blueprint defines user credential management, configuration file lifecycle, encryption practices, Fernet key provisioning, and role-based access controls (RBAC) in compliance with the *current architecture and operational flow* for RIGD TradeBot.  
**All provisioning, key generation, and secrets management are triggered via the Web UI, but performed by backend scripts in `tbot_bot/config/`. No privileged action occurs in Flask or web endpoints.**

---

## 1. Core Principles

- **Autonomy:** After secure bootstrap, the bot manages user credentials, Fernet keys, and authentication fully locally—*no runtime dependency on external systems*.
- **Web UI as Trigger:** All credential, key, and config file creation—including Fernet key provisioning—is *triggered exclusively via the Web UI configuration page*. No CLI/manual/legacy provisioning is permitted after bootstrap.
- **Backend Provisioning:** *All privileged actions* (key generation, encrypted secret/DB creation, bootstrapping) are performed by backend scripts in `tbot_bot/config/`, *never* directly by Flask or tbot_web.
- **Encrypted local storage:** All bot credentials and sensitive configs are **always encrypted at rest** under `tbot_bot/storage/secrets/` (JSON) and Fernet keys under `tbot_bot/storage/keys/`.
- **No shared/runtime auth:** Bot never queries external systems for credentials or Fernet keys at runtime; all storage is local and autonomous.

---

## 2. User Credential Lifecycle

### 2.1 Creation & Storage

- Credentials (username, bcrypt password, roles, email) are *created/managed via the Web UI* (`configuration.html`, `configuration_web.py`), which triggers provisioning.
- Passwords are securely hashed with **bcrypt**—never stored or transmitted plaintext.
- Credentials are stored in **`SYSTEM_USERS.db`** (`tbot_bot/core/databases/`), encrypted using Fernet key at `tbot_bot/storage/keys/login.key`.
- Initial DB/user setup is *triggered only via Web UI POST* (not CLI/scripts).
- Fernet key files for credentials are auto-provisioned and stored in `tbot_bot/storage/keys/`—by the backend provisioning script (`provisioning_runner.py`), *never manually*.

### 2.2 Backup & Recovery

- Credential backups (bcrypt hashes/metadata) are saved encrypted under `tbot_bot/storage/backups/`.
- All backups are encrypted; plaintext is forbidden.
- Import/export is performed via future Web UI tools, never CLI/manual.
- Periodic encrypted backup and rotation is best practice.

### 2.3 Authentication & Runtime

- Auth and session management are *fully local*; Fernet-encrypted session tokens with UTC expiry.
- Password rehashing/upgrades handled locally.
- All auth/session events are audit-logged (UTC, user, IP, event).

---

## 3. Secrets, Identity, and Key File Management

### 3.1 Broker API Credentials

- Encrypted broker API credentials (`broker_credentials.json.enc`) are imported via UI, stored at `tbot_bot/storage/secrets/`.
- **Fernet key (`broker.key`) is provisioned by the backend provisioning script, triggered by the UI.**

### 3.2 Entity/Jurisdiction/Bot Identity

- Identity metadata (`ENTITY_CODE`, `JURISDICTION_CODE`, `BROKER_CODE`, `BOT_ID`) is imported/updated via the Web UI and written as encrypted JSON.
- **Fernet key for identity (`bot_identity.key`) is provisioned by backend only.**
- No external queries/calls for identity.

### 3.3 Key File Provisioning Policy

- **All Fernet key files are provisioned and checked by the backend (`key_manager.py`/`provisioning_helper.py`), triggered by the Web UI.**
- Keys are written only to `tbot_bot/storage/keys/`.
- *Manual/CLI key creation is forbidden* and will be flagged as noncompliant.

---

## 4. Configuration Sync Flow (Startup / Reconfiguration)

1. **Trigger:** User saves config via Web UI (`configuration.html` POST), which writes config and sets provisioning trigger/flag (`PROVISION_FLAG`).
2. **Backend Provisioning:** `tbot_bot/config/provisioning_runner.py` detects the trigger, performs all key generation, encrypted config/secret creation, DB initialization, and writes status.
3. **Validation:** Strict validation for completeness, schema, checksums; audit logs for every step.
4. **Atomic & Safe:** All syncs are atomic and concurrency-safe.
5. **Audit:** All events logged with UTC, checksum, user/context, success/failure.
6. **Separation:** UI triggers provisioning, *backend does all privileged actions.*

---

## 5. Support Module Responsibilities

| Module                      | Role                                            | Enforcement Policy                                            |
|-----------------------------|------------------------------------------------|--------------------------------------------------------------|
| `key_manager.py`            | Fernet key creation/rotation/checks             | Only called by provisioning_runner.py; never CLI/UI direct   |
| `security_users.py`         | User RBAC and Fernet key helpers                | Key/user provisioning only from backend                      |
| `config_encryption.py`      | Encrypts/decrypts secrets/backups, secure writes| Always uses keys from `storage/keys/`                        |
| `db_bootstrap.py`           | DB initialization via backend scripts           | Invoked only by provisioning_runner.py                       |
| `auth_web.py`               | Handles login/session/token in UI               | No key or secret management                                  |
| `default_config_loader.py`  | Loads UI config templates                       | No key/secret management                                     |
| `session_manager.py`        | Session state, token handling                   | No key or secret storage                                     |
| `utils_web.py`              | Web-only helpers, non-secret logic              | No config/secret/key writes                                  |

---

## 6. Separation of Concerns Table

| Function                    | Responsible System         | Storage Location                                    | Runtime Access          |
|-----------------------------|---------------------------|----------------------------------------------------|------------------------|
| User credentials/auth       | Bot (backend only)         | `tbot_bot/core/databases/SYSTEM_USERS.db`, `tbot_bot/storage/keys/login.key` | Local only             |
| Broker API keys/secrets     | Bot (backend only)         | `tbot_bot/storage/secrets/broker_credentials.json.enc` + key                | Local only             |
| Entity/Jurisdiction/Identity| Bot (backend only)         | `tbot_bot/storage/secrets/bot_identity.json.enc`, `env.json.enc`            | Local only             |
| Config sync logs/audit      | Bot (backend only)         | Encrypted logs in `tbot_bot/storage/backups/`                              | Local only             |
| Fernet keys (all categories)| Bot (backend only)         | `tbot_bot/storage/keys/`                                                    | Local only             |

---

## 7. Security Considerations

- All credentials/config files are encrypted using Fernet keys per category, provisioned only via backend (`key_manager.py`) on UI trigger.
- All config import/export is local and authenticated—never via CLI/manual/script.
- No web endpoint or Flask code runs privileged actions, creates keys, or touches DB/OS state directly.
- All provisioning and bootstrap actions are handled by `provisioning_runner.py` in `tbot_bot/config/`, never directly from UI.
- All events are logged (UTC, user, checksum, result). Plaintext/temporary artifacts are forbidden.
- Key lifecycle is managed with strict rotation; manual key file creation is forbidden.
- Decryption failures cause logged, user-safe fatal errors.

---

## 8. Compliance Summary (Lock)

- **Bootstrap:** All keys, credentials, and config are created by backend provisioning script, triggered by the Web UI config step.
- **Separation:** Flask/web UI never executes privileged or OS-level setup; all logic is split and secured.
- **Local only:** All secrets and keys are stored and used locally, always encrypted.
- **No CLI-based provisioning:** No key, credential, or config files may be created outside of the UI-triggered provisioning flow and backend runner.  
- **Audit:** All changes and events are audit-logged for compliance.

---

*End of Document*
