================================================================================
Document: 080_Logging_and_Reporting
Version: v044
Date: UTC:2025-06-15 04:30:00
================================================================================

This module defines the formats, storage locations, and field requirements for all TradeBot logs, trade records, summaries, and audit outputs.

Contents:
- Logging & Reporting Format
- Modular Strategy Reporting & Audit Output Specification

All outputs are UTC-timestamped, deterministic, OFX-aligned, and compliance-ready.

**Policy:**  
All provisioning, credential creation, encrypted config management, and COA operations are performed *exclusively* via the TradeBot Web UI. No external or accounting system may provision, inject, or modify any credential, secret, key, or config file after bootstrap. Only ledger export and float assignment for audit are accounting roles.


{BOT_IDENTITY} = {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}

=============================================================================================================================================
Logging & Reporting Format 
=============================================================================================================================================

**Overview:**  
Each bot instance writes structured outputs to isolated, per-bot subdirectories for audit trails, dashboards, compliance, and reconciliation. *All outputs and filenames are governed by `.env_bot` and path resolver logic; no runtime mode switching, no dual-broker operation.*

---

**Primary Output Directories**

| Directory                                 | Contents                                               |
|--------------------------------------------|--------------------------------------------------------|
| `output/{BOT_IDENTITY}/logs/`              | Strategy execution logs, error traces, broker issues   |
| `output/{BOT_IDENTITY}/trades/`            | Per-session trade history logs (`csv` or `json`)       |
| `output/{BOT_IDENTITY}/summaries/`         | Session summaries: PnL, stats, win-rate                |
| `backups/`                                | Auto-archived logs, ledgers, config backups (rotated)  |

---

**Filename Structure**

| Type               | Example Filename                   | Notes                                        |
|--------------------|------------------------------------|----------------------------------------------|
| Strategy Logs      | `open.log`, `mid.log`, `close.log` | One per strategy, per bot/session            |
| Trade History      | `trade_history.csv`, `.json`       | All executed trades, full session            |
| Unresolved Orders  | `unresolved_orders.log`            | Rejects, partials, stale orders              |
| Daily Summary      | `daily_summary.json`               | End-of-session PnL/stats/metrics             |

*All output filenames are always resolved per bot identity and session by the path resolver.*

---

**Log Format**

Set via `.env_bot`:

- `LOG_FORMAT=csv`  → human-readable
- `LOG_FORMAT=json` → structured for dashboard/ingestion

Only one format is written per session.

---

**Required Fields – `trade_history.json`**

Each entry must include:

- `timestamp`          (ISO 8601 UTC)
- `strategy_name`      (open, mid, close)
- `ticker`             (equity/ETF symbol)
- `side`               (long/short)
- `size`               (quantity)
- `entry_price`        (float)
- `exit_price`         (float)
- `PnL`                (realized)
- `broker`             (from `.env_bot`)
- `error_code`         (if any; e.g., rejection)

---

**Ledger Routing – Single-Broker Enforcement**

All trades route to the correct ledger using:

- `ENTITY_CODE`, `JURISDICTION_CODE`, `BROKER_CODE`, `BOT_ID`
- Suffix: `_BOT_ledger.db`

Ledger path format:  
`output/{BOT_IDENTITY}/ledgers/{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`

*Runtime config controls location and naming—never hardcoded.*

---

**Export + Archive Flow**

1. `reporting_bot.py` collects/export logs after each session
2. Ledger/export paths resolved by config and path_resolver
3. `generate_ofx.py` produces OFX export
4. `auto_backup.py` compresses/archives all output

---

**Principles**

- Logs = parallel audit artifacts—never re-imported into ledgers
- No live/paper split—bot operates on one ledger/output set
- All outputs are deterministic, UTC-stamped, and account-mapped

---

**Use Cases**

- Daily/periodic PnL reports
- Compliance/audit verification
- Dashboard ingestion
- Historical/strategy analytics
- Tax/regulatory export (OFX, CSV, JSON)

---

==========================================================
Modular Strategy Reporting & Audit Output Specification
==========================================================

**Objective:**  
Support per-strategy, per-session reporting for live audit, optimization, and validation.

---

**1. Logs and Summaries Per Strategy**

Each strategy **must** generate:

- `open.log`, `mid.log`, `close.log`              # Per-strategy logs
- `trade_history.json`, `trade_history.csv`        # Trade-by-trade session record
- `daily_summary.json`                             # PnL, stats, outcomes

**Fields in all logs/trade records:**

- `strategy_name`
- `signal_trigger_time`
- `entry_timestamp`
- `exit_timestamp`
- `trade_side` (long/short)
- `entry_price`
- `exit_price`
- `size`
- `PnL`
- `broker`
- `exit_reason` (stop_loss, timeout, manual, target_hit)

---

**2. Daily Summary Metrics**

Each `daily_summary.json` must include:

- `win_rate_per_strategy`
- `total_trades`
- `average_pnl_per_trade`
- `max_gain`
- `max_loss`
- `trade_count_vs_signals_triggered`
- `average_holding_time`
- `most_profitable_tickers`
- `worst_tickers`

---

**3. Web UI Reporting**

Expose core metrics/logs in the dashboard:

- Win rate, PnL, trade count (open/mid/close)
- Load/display JSON stats on `status.html`
- Optionally: overlay PnL/trade charts by session/strategy

---

**4. Runtime Validation**

In `env_bot.py`:

- Enforce that keys exist and are valid:
    - `ENABLE_LOGGING=true`
    - `LOG_FORMAT=json` or `csv`
- Raise fatal error if missing/invalid, with a clear operator message

---

**5. Tuning & Optimization**

- `tuning_tracker.py`:
  - Loads/compares logs across runs
  - Recommends optimal values for buffers/thresholds (e.g., `STRAT_*_BUFFER`)
  - Exports table: buffer → win%, avg PnL, duration, block/reject counts, ticker frequency

---

**Policy & Security:**

- All reporting, logs, and summaries are deterministic, UTC-stamped, and compliant with the required field layout.
- No log post-processing outside reporting modules or explicit audit export.
- Logs/trade records are never imported back into ledgers.

---

*End of Document*
