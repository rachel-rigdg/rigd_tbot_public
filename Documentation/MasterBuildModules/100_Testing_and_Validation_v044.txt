================================================================================
Document: 100_Testing_and_Validation
Version: v045
Date: UTC:2025-06-24 00:00:00
================================================================================

This module defines the comprehensive testing and CI validation framework for TradeBot v1.0+.

Contents:
- Testing and Validation Suite (Lossless Compression Spec v1.1)

All tests are required pre-deployment; any test failure is a fatal compliance violation.

=============================================================================================================================================
Testing and Validation Suite
=============================================================================================================================================

**Overview:**  
All critical bot logic, modules, and outputs must be validated via an explicit, automated testing framework. All tests must be run and pass before any production deployment, upgrade, or strategy change.  
*No runtime/test code may bypass test enforcement or version checks.*

**Testing Directory:**  
`tbot_bot/test/`

**Test Modules:**
- `test_main_bot.py`           # Lifecycle loop, strategy routing, logger flow, shutdown/resume checks
- `test_env_bot.py`            # .env_bot variable coverage, error, defaults, VERSION_TAG matches VERSION.md (build fails if mismatch)
- `test_backtest_engine.py`    # Simulated trades on historical data, rule and fill consistency, no drift
- `test_strategy_selfcheck.py` # All .self_check() methods must return True, logs all failures
- `test_logging_format.py`     # Log structure matches output JSON schema and all required fields
- `test_broker_trade_stub.py`  # Randomized micro-trades, broker order submission/logging/flow
- `test_screener_random.py`    # Symbol screener, randomized eligibility/filter logic
- `test_strategy_tuner.py`     # All strategy modules in isolation: tickers, thresholds, entry/exit logic, config
- `integration_test_runner.py` # Full-session simulation, end-to-end (provisioning, config, trading, shutdown)

*Planned:*
- `test_broker.py` â€“ **Manual live trade placement/close for broker readiness/validation.**

**Framework:**
- All tests use pytest, CLI/CI-compatible, modular for batch or single-run
- Output: `--junitxml` plus CI/CD test reporters (GitHub Actions, GitLab, Jenkins, etc.)

**Test Command:**
pytest tbot_bot/test/


**Integration Test Flow:**
- Loads `.env_bot.test`
- Launches `main_bot.py`, injects mock historical data, runs `start_bot.py` (dry mode)
- Confirms: strategy execution order (`STRATEGY_SEQUENCE`), log and output file generation, all triggers/errors, trade/log/export correctness, session integrity

**CI/DevOps:**
- Compatible with all major CI runners; headless, no GUI or broker API required
- Custom `.env_bot.test` allowed for CI override, secrets stubbed for test mode

**Requirements:**
- Python 3.11+, pytest, pydantic, all packages from `requirements.txt`

**Test Mode:**
- `integration_test_runner.py` executes only if `TEST_MODE=true`
- All test outputs route to logs; test failures to stdout/stderr

**Version Enforcement:**
- `test_env_bot.py` must verify `.env_bot["VERSION_TAG"]` matches `VERSION.md` (fatal if mismatch; blocks deployment)

**Required Validation for All Tests:**
- All output/log/trade/ledger files must match the runtime schema as enforced in `050_Trading_Bot_Core_Specs_v041.txt`
- All ledger outputs must match required fields in `070_Accounting_Integration_v041.txt`
- All reporting and audit files are UTC timestamped, deterministic, and scoped to `{BOT_IDENTITY}`

**Summary:**  
All code, strategy, config, and provisioning updates are blocked if any test fails. CI/CD must gate on full test pass for any merge/release. Audit logs, trade logs, ledgers, and summaries are validated as part of the integration test suite.

*End of Document*
