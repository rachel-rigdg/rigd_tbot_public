================================================================================
Document: 090_Runtime_and_Lifecycle
Version: v044
Date: UTC:2025-06-16 12:00:00
================================================================================

This module documents the runtime session lifecycle, phases, shutdown protocols, bot_state management, and design confirmations.

Contents:
- TradeBot Runtime Flow (Spec-Locked – Final Version, RIGD_TradingBot_{CURRENT_VERSION})
- Key Design Confirmations (Spec-Locked — RIGD_TradingBot_{CURRENT_VERSION})
- TradeBot Master Build Enhancements (Post-Stabilization, Spec-Locked)
- Final Build Checklist — RIGD_TradingBot_{CURRENT_VERSION} (Spec-Locked)

All runtime logic is immutable except via Web UI configuration changes.

Audit compliance enforced.

================================================================================
RIGD PHASE SUPERVISOR: USER-MODE SYSTEMD SPECIFICATION 
================================================================================

OBJECTIVE:
Fully eliminate `sudo` and `visudo` from all bot orchestration. The phase supervisor and systemd units run entirely in *user mode*, allowing any `tbot`-like account to bootstrap a bot instance without elevated permissions.

--------------------------------------------------------------------------------
CORE CHANGES TO IMPLEMENT 
--------------------------------------------------------------------------------

1. Replace All `sudo systemctl` with `systemctl --user`
    - Applies to `main.py` and all launch scripts
    - e.g. `systemctl --user restart tbot_bot.service`

2. Unit Files Directory
    - Move all `.service` files to:
      `/home/tbot/.config/systemd/user/`
    - Remove any `User=...` directive (not valid in user units)
    - Ensure `[Install]` section uses: `WantedBy=default.target`

3. Enable User-Level Systemd Session
    ```bash
    loginctl enable-linger tbot
    ```

4. Environment Setup
    - Add to ~/.bashrc or loader script:
      `export XDG_RUNTIME_DIR=/run/user/$(id -u)`

5. Supervisor Launch
    - Run supervisor with:
      `systemctl --user start tbot_bot.service`
    - No sudo usage anywhere in Python or shell scripts

--------------------------------------------------------------------------------
SYSTEMD INSTALLATION
--------------------------------------------------------------------------------

mkdir -p ~/.config/systemd/user
cd ~/.config/systemd/user

ln -sf /home/tbot/rigd_tbot/systemd_units/tbot_bot.service

systemctl --user daemon-reexec
systemctl --user daemon-reload


=============================================================================================================================================
TradeBot Runtime Flow 
=============================================================================================================================================

Phase 0: Pre-Session (Preparation)
↓
- Edit and validate `.env_bot` (strategy, risk, runtime) and `.env` (keypaths, credentials).
- If encrypted, decrypt `.env_bot.enc` using `security_bot.py` with AES-256 key from `ENV_BOT_KEY` in `.env`.
- Bootstrap session by creating `control_start.txt` or submitting `configuration.html` via Web UI only.
- Ensure all encrypted secret files (`bot_identity.json.enc`, `broker.json.enc`, etc.) exist post-bootstrap.
- `.env_bot.enc` must exist pre-bootstrap.

Phase 1: System Boot Validation
↓
- `security_bot.py` decrypts `.env_bot.enc` using key from `storage/keys/env.key`.
- `env_bot.py` validates required env vars; missing/malformed values cause fatal error and halt.
- Run `.self_check()` on critical modules (`risk_bot.py`, `kill_switch.py`, `watchdog_bot.py`, `error_handler.py`, `strategy_router.py`).
- Failures abort session and log error in UTC to `output/logs/error_tracebacks.log`.
- All checks pass proceed to session init.

Phase 2: Session Initialization
↓
- `float_bot.py` obtains current float from accounting system (bot never manages float/injections directly).
- Loads runtime parameters from `.env_bot` (e.g. `MAX_TRADES`, `TOTAL_ALLOCATION`).
- If `DEFENSE_MODE_ACTIVE=true`, apply stricter overrides.
- `status_bot.py` writes initial bot state to `output/status.json`.
- Begin strategy cycle.

Phase 3: Strategy Cycle (Open → Mid → Close, UTC)
For each enabled strategy:
↓
- Load strategy module as per `.env_bot` toggles and schedule.
- Each strategy runs `.self_check()` (API availability, timing, float).
- `finnhub_screener.py` filters symbols based on volume, price, fundamentals.
- For each symbol passing filters, calculate allocation and enforce caps (`MAX_RISK_PER_TRADE`, `MAX_TRADES`, etc.).
- Submit orders via `broker_api.py`.
- Log trades to `output/trades/`.
- Log unresolved orders to `output/logs/unresolved_orders.log`.
- Monitor positions continuously (stop loss, VWAP, PnL).
- Strategy phase ends when time window closes.

Phase 4: Risk/Fault Monitoring (Continuous)
↓
- Enforce risk constraints (`risk_bot.py`).
- Monitor PnL and daily loss limits (`kill_switch.py`).
- Verify API health (`watchdog_bot.py`).
- Log uncaught exceptions (`error_handler.py`).
- On breach, halt broker or suspend trading.
- DEFENSE_MODE events logged to `disaster_mode.log`.

Phase 5: Session Termination
↓
- `stop_bot.py` closes open positions gracefully.
- `reporting_bot.py` compiles logs (trades, daily summary, disaster logs).
- Trades and PnL routed to accounting ledger database (`entities/{ENTITY}_{JURIS}/ledgers/bot/...`).
- `auto_backup.py` archives logs and ledgers (UTC).
- Mark session "CLOSED" in status.json.
- Session complete.

Phase 6: Manual Review / Rebalancing
- Operator reviews logs and summary.
- Float reconciliations managed exclusively by accounting.
- `generate_ofx.py` used for OFX exports.
- Manual reset of defense flags required after defense mode event.

=============================================================================================================================================
Bot State Definitions (bot_state.txt values)
=============================================================================================================================================

- `initialize`: Initial bot startup, configuration phase.
- `provisioning`: Generating keys, secrets, initial config encryption.
- `bootstrapping`: Running DB init, user/account setup.
- `registration`: User account registration UI active.
- `started`: Bot system fully started but not actively trading/analyzing.
- `idle`: Bot ready and primed, not actively analyzing or trading but able to start.
- `analyzing`: Strategy analyzing market data.
- `trading`: Active trade execution ongoing.
- `monitoring`: Post-trade monitoring active.
- `updating`: Runtime updates or config reloads in progress.
- `graceful_closing_positions`: Closing positions in controlled manner on stop command.
- `emergency_closing_positions`: Immediate position close on kill command.
- `stopped`: Bot is halted, no strategies running; requires manual start.
- `shutdown`: System shutdown in progress.
- `shutdown_triggered`: Forced shutdown triggered.
- `error`: Fatal error state; bot halted.


=============================================================================================================================================
UI Behavior Based on Bot State
=============================================================================================================================================

- `initialize`, `provisioning`, `bootstrapping` → show configuration.html UI for setup.
- `registration` → show registration UI.
- `started`, `idle`, `analyzing`, `trading`, `monitoring`, `updating` → show main.html dashboard.
- `graceful_closing_positions`, `emergency_closing_positions` → show main.html with graceful/hard shutdown feedback.
- `stopped` → show main.html indicating stopped state; no strategies running.
- `shutdown`, `shutdown_triggered`, `error` → show error or shutdown page; halt further operations.

=============================================================================================================================================
Bot Control Commands via Web UI
=============================================================================================================================================

- Start Bot:
  - Transition bot_state.txt to `started`, then `idle` after init.
  - Strategies not running until schedule triggers.
- Stop Bot:
  - Transition bot_state.txt to `graceful_closing_positions`.
  - Strategies finish naturally, close positions.
  - Transition to `stopped`.
- Kill Now:
  - Transition bot_state.txt to `emergency_closing_positions`.
  - Immediate position close.
  - Transition to `stopped`.
- UI remains accessible in all states.


=============================================================================================================================================
Hot Configuration Updates
=============================================================================================================================================

- Configuration page accessible at all times.
- Config changes saved instantly to encrypted runtime config.
- Bot reads config changes dynamically without restart.
- No re-provisioning triggered on config update.
- Prevent accidental re-provisioning or bot restart via config save restrictions in code logic.


=============================================================================================================================================
Key Design Confirmations
=============================================================================================================================================

- Single broker assignment per bot session.
- Float and risk limits strictly enforced from `.env_bot`.
- Real-time PnL logged for dashboard; accounting provides official PnL.
- Defense mode enforces stricter limits and screening.
- All audit logs timestamped and immutable.
- Web dashboard displays live states and alerts.
- No hybrid or dual broker modes.
- Changes managed only via Web UI configuration.

=============================================================================================================================================
TradeBot Master Build Enhancements (Post-Stabilization, Spec-Locked)
=============================================================================================================================================

1. Automated Rebalance Triggers:
- Float deviation thresholds set in `.env_bot`.
- Accounting notified on deviation; bot never initiates transfers.
- Event logged with UTC timestamp and session context.

2. Multi-User Access Roles (RBAC):
- Multi-role access managed in `SYSTEM_USERS.db`.
- Access attempts logged.
- Role-based UI permissions.

3. Strategy Optimization Module:
- Scheduled backtests with paramized methods.
- Human approval required for config changes.

4. Real-Time Alerting:
- Multi-channel alerts per `.env_bot`.
- Configurable per event and strategy.

5. Slippage & Latency Simulation:
- Optional slippage and latency simulation for backtests only.
- No impact on live trading.

=============================================================================================================================================
Final Build Checklist
=============================================================================================================================================

- `.env` and `.env_bot` encryption and validation.
- Bootstrap/init scripts run via Web UI only.
- Environment variables fully validated.
- Strategy modules implement `.self_check()`.
- Logs and ledgers written as per spec.
- Ledger files OFX-aligned, double-entry.
- Risk, shutdown, and notifications implemented.
- Web UI RBAC enforced.
- Bot lifecycle state machine followed strictly.
- Hot config updates dynamic, no restart needed.
- All changes documented in `VERSION.md`.

# End of Document 090_Runtime_and_Lifecycle {CURRENT_VERSION}
