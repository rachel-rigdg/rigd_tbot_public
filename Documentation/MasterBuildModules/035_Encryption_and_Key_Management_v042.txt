================================================================================
Document: 035_Encryption_and_Key_Management
Version: v042
Date: UTC:2025-06-10 14:17
================================================================================

Overview:
Defines encryption, key management, and secure config handling for TradeBot v1.0+. All practices strictly enforce RIGD security and architecture standards as per `040_Directory_Structure_v041.txt` and all live compliance policies.

--------------------------------------------------------------------------------
Core Concepts
--------------------------------------------------------------------------------
- All sensitive files are encrypted at rest using AES-256 (Fernet, per category).
- Keys are always stored separately under `tbot_bot/storage/keys/`—never inside code, backups, or secrets.
- No plaintext credentials/configs exist in the repo or persistent storage post-bootstrap.
- All encrypted config files (`.env_bot.enc`, `.env.enc`, all `*.json.enc` for broker, identity, API, SMTP) and user credentials DB.
- Decryption occurs only at runtime, with decrypted values held in memory or ephemeral temp; any plaintext files are immediately overwritten or deleted.

--------------------------------------------------------------------------------
Key Management Policies
--------------------------------------------------------------------------------
- **Unique Fernet keys per category:** (`login.key`, `broker.key`, `env.key`, `env_bot.key`, `smtp.key`, etc.).
- **Key lifecycle is 100% Web UI controlled:**  
  - Key generation, validation, rotation are performed only via the configuration/provisioning workflow (`tbot_web/py/configuration_web.py`, `key_manager.py`, `security_users.py`).  
  - Manual or CLI-based key generation is strictly forbidden after bootstrap.
- **Rotation is atomic and logged:**  
  - Key rotations, re-provisioning, or recovery are performed from the Web UI only.  
  - All events are logged with UTC timestamp, user, affected category, and change context.
- **No key file is ever committed to VCS, backup, or exported:**  
  - .scpignore, .gitignore, and all backup/archiving scripts must enforce this.

--------------------------------------------------------------------------------
Encryption Workflows
--------------------------------------------------------------------------------
- Encrypt `.env_bot` and all config files exclusively using Web UI via helper modules; keys read from `storage/keys/`.
- `.env` may be optionally encrypted for ephemeral/prod cloud deployments.
- Decrypt only on runtime startup or configuration reload; any failure is fatal and blocks the process.
- Plaintext configs (if any) are ephemeral—held only in RAM or secure temp, then destroyed/overwritten after use.
- All encryption and decryption events are logged for audit review.

--------------------------------------------------------------------------------
Secure Backup & Recovery
--------------------------------------------------------------------------------
- All backup artifacts are encrypted and stored under `tbot_bot/storage/backups/`.
- Restore includes validation of both key and config file; successful restoration must re-encrypt using current keys.
- Loss or compromise of any key triggers immediate forced key rotation via the Web UI, and all affected configs must be re-encrypted.
- All recovery and restore events are audit logged (timestamp, user, affected category).

--------------------------------------------------------------------------------
Compliance and Best Practices
--------------------------------------------------------------------------------
- Minimal, role-based key access only; secrets and keys never shared or exposed.
- All key transmission, storage, and recovery is via secure, authenticated channels and Web UI workflow.
- All encryption/decryption and key-related operations are logged for full forensic traceability.
- .scpignore and .gitignore must exclude all decrypted secrets and key files; plaintext is ephemeral only.
- All encrypted config is validated at every startup; decryption failure is fatal and logs forensic event.
- Penetration testing and security review are periodic and enforced as part of CI/CD.

--------------------------------------------------------------------------------
Functional Requirements
--------------------------------------------------------------------------------
- All provisioning, credential creation, key management, and encryption occurs **exclusively** via the TradeBot Web UI configuration step.  
- No external tool, CLI, script, or manual operator may create, rotate, or inject any Fernet key, config, or secret after bootstrap.
- All encryption helpers (`key_manager.py`, `config_encryption.py`, `security_users.py`) must enforce this policy and reject any unauthorized usage.
- All key and config storage paths, naming, and lifecycle strictly follow the structure defined in `040_Directory_Structure_v041.txt`.

--------------------------------------------------------------------------------
bot_state.txt State Management 
--------------------------------------------------------------------------------
- `tbot_bot/control/bot_state.txt` holds the authoritative session state string for both the runtime and UI routing.
- Valid states:  
  `initialize`, `provisioning`, `bootstrapping`, `idle`, `analyzing`, `trading`, `monitoring`, `updating`, `shutdown`, `graceful_closing_positions`, `emergency_closing_positions`, `shutdown_triggered`, `error`
- UI routing is driven by `bot_state.txt` as follows:
    - `initialize`, `provisioning`, `bootstrapping`: show configuration UI (`configuration.html`)
    - `idle`, `trading`, `monitoring`, `analyzing`, `updating`: show main dashboard UI (`main.html`)
    - `shutdown`, `graceful_closing_positions`, `emergency_closing_positions`, `shutdown_triggered`, `error`: show error state/page and halt further operations
- The state machine is cross-referenced and enforced per `090_Runtime_and_Lifecycle_v041.txt` and `110_Web_Interface_and_Dashboard_v041.txt`.

--------------------------------------------------------------------------------
Summary
--------------------------------------------------------------------------------
- Encryption and key management is centralized, automated, and strictly audited via the TradeBot Web UI.  
- No manual key or credential handling is permitted.  
- All failures or policy violations trigger fatal errors and are recorded for compliance review.
- The bot state machine (`bot_state.txt`) governs runtime session transitions, UI routing, and error states, and must always be kept in sync with session events for full compliance.

*End of Document*
