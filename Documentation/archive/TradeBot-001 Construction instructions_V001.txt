==============================
üß† TradeBot Strategy Logic Spec v1.0
==============================

‚ñ∂Ô∏è Overview:
TradeBot will automatically identify securities and place trades in a bi-directional manner, using:
- ‚úÖ Long equity for bullish setups
- ‚úÖ Long put OR Inverse ETF for bearish setups
- ‚ùå No shorting or leveraged ETFs

Supports any broker platform with compatible APIs:
Alpaca, IBKR, Webull, Tastytrade, Robinhood


==============================
üö¶ Runtime Modes
==============================

üß™ TEST MODE:
- 1-minute analysis + 1-minute monitoring
- Skips volume filters
- Paper trades only (logged to `gnu_paper.gnucash`)
- Used for logic verification and debug

‚úÖ LIVE MODE:
- Full strategy execution with volume/volatility filters
- Executes via live broker APIs
- Trades logged to `gnu_live.gnucash`
- Kill switch, watchdogs, and drawdown enforcement active

==============================
üí∏ Capital Risk Controls
==============================

- MAX_RISK_PER_TRADE: 2‚Äì3% of capital
- MAX_OPEN_RISK: All trades = max 5% capital exposure
- DAILY_LOSS_LIMIT: Auto-kill triggers if hit (default: 5%)

==============================
üß† Strategy Modules
==============================

1Ô∏è‚É£ strategy_open.py ‚Äì Opening Range Breakout
----------------------------------------------
- Time: 9:30‚Äì10:20 AM EST
- Direction: Long only
- Instrument: Stock/ETF
- Logic:
  - Track high/low for 20 min post-open
  - Breakout + buffer + volume confirmation
- Allocation:
  - 1 = 100%
  - 2 = 60/40
  - 3 = 40/30/30
  - 4 = 40/20/20/20
- Exit: Stop loss (2%) or 10:20 AM hard exit
- Log: open.log, trade_history.csv, gnu_paper/live.gnucash

2Ô∏è‚É£ strategy_mid.py ‚Äì VWAP Mean Reversion
----------------------------------------------
- Time: 10:30 AM‚Äì2:30 PM
- Direction: Long or Inverse
- Instrument: Stock, Inverse ETF
- Logic:
  - Price deviation ¬±2% from VWAP
  - Reversal signals + optional filters
- Enhancements:
  - ADX filter
  - Bollinger Band confluence
- Allocation: Max 5 positions, equal or priority-weighted
- Exit: VWAP touch, 45 min timeout, or stop loss (1.5%)
- Log: mid.log, trade_history.csv, gnu_paper/live.gnucash

3Ô∏è‚É£ strategy_close.py ‚Äì EOD Momentum/Fade
----------------------------------------------
- Time: 2:30‚Äì4:00 PM
- Direction: Long or Bearish (put/inverse)
- Instrument: Stock, Inverse ETF, Long Put
- Modes:
  - trend: momentum breakout continuation
  - fade: spike reversal, exhaustion signal
- Enhancements:
  - VIX volatility gate
  - IBKR imbalance scanner
  - Blocklist to skip repeated tickers
- Allocation: 30‚Äì40% max capital
- Exit: Stop loss (2%) or hard close at 3:55 PM
- Log: close.log, trade_history.csv, gnu_paper/live.gnucash

==============================
üîß Optional Enhancements (Toggleable)
==============================

- adx_filter.py ‚Üí Skip VWAP trades in strong trends
- bollinger_confluence.py ‚Üí Confirm overbought/oversold zones
- vix_gatekeeper.py ‚Üí Skip EOD in low volatility
- imbalance_scanner_ibkr.py ‚Üí Detect final-hour pressure via IBKR
- ticker_blocklist.py ‚Üí Prevent re-trading same ticker

==============================
üìò GnuCash Integration
==============================

- gnu_exporter.py auto-writes to:
  - gnu_paper.gnucash (TEST_MODE)
  - gnu_live.gnucash (LIVE_MODE)
- gnu_transaction.py builds XML transactions
- gnu_config.py holds account layout
- gnu_backup.py auto-backups ledgers before changes
- Each trade includes:
  - ID, broker, strategy, entry/exit, profit/loss

==============================
üìä Logging & Reporting
==============================

- trade_history.csv ‚Üí all trades, strategies, timestamps
- open.log / mid.log / close.log ‚Üí individual strategy logs
- unresolved_orders.log ‚Üí API rejections or partials
- (future) daily_summary.json for snapshot audit

==============================
üîê Safety Systems
==============================

- kill_switch.py ‚Üí Halts trading + exits all positions on max loss
- watchdog_bot.py ‚Üí Detects broker API failure or disconnection
- risk_bot.py ‚Üí Validates capital allocation constraints per trade
- security_bot.py ‚Üí (Optional) Encrypt .env_bot for deployment security
- gnu_backup.py ‚Üí Saves daily snapshot before ledger write

==============================
