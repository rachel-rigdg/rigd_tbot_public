

Overall Directory Structure Diagram


TradeBot-001/
├── .env                                  # 🌐 Web/API config – non-trading settings
├── .scpignore                            # 🔒 Prevents local key/secrets upload
├── encrypt_password.py                   # 🔐 Encrypts API/login credentials
├── generate_key.py                       # 🔐 Generates encryption key for securing .env_bot
├── requirements.txt                      # 📦 Python package list for bot, web, broker APIs, GnuCash

├── tbot_api/                             # 🧩 Optional: FastAPI control server (start/stop/view bot remotely)
│   ├── __init__.py
│   ├── env_api.py                        # Loads web-level .env values
│   ├── logs_api.py                       # Logs API events, errors, access
│   ├── main_api.py                       # FastAPI controller: start/stop/settings/status
│   ├── auth.py                           # API login encryption/authentication

├── tbot_bot/                             # 🧠 Main autonomous trading engine (fully independent)
│   ├── .env_bot                          # 🎛️ Strategy, broker, risk, GnuCash export, safety settings
│   ├── env_bot.py                        # Safely loads .env_bot for runtime modules
│   ├── main_bot.py                       # Orchestrates all strategy logic, risk checks, trade lifecycles
│   ├── start_bot.py / stop_bot.py        # CLI/API controls to launch/exit bot processes
│   ├── service_bot.py                    # Optional process manager (cron/systemd use)
│   ├── status_bot.py                     # Returns current run status, strategy, risk status
│   ├── settings_bot.py                   # Interface for modifying .env_bot
│   ├── logs_bot.py                       # Logs everything: trades, exits, errors, drawdowns
│   ├── notifier_bot.py                   # Sends alert emails/slack on fills, triggers, crashes

│   ├── kill_switch.py                    # 🔥 Triggers auto-exit on drawdown breach or global error
│   ├── watchdog_bot.py                   # 🧯 Monitors APIs for disconnects; halts or retries as needed
│   ├── security_bot.py                   # 🔐 Encrypts/decrypts sensitive `.env_bot` keys at rest

│   ├── broker_api.py                     # Routes order logic to correct broker
│   ├── broker_robinhood.py              # Robinhood logic (unofficial, U.S. sandbox)
│   ├── broker_webull.py                 # Webull logic (unofficial, stable test fills)
│   ├── broker_tastytrade.py             # Tastytrade API client (U.S. options-ready)
│   ├── broker_ibkr.py                   # IBKR API client (live + paper, global-ready)
│   ├── orders_bot.py                     # Submits/cancels/manages trade lifecycle
│   ├── reporting_bot.py                  # Finalizes trades, triggers export, logs to ledger
│   ├── risk_bot.py                       # Calculates capital per trade (2–3% limit enforced)
│   ├── utils_bot.py                      # Shared helpers (time, format, rounding, etc.)

│   ├── finnhub_screener.py               # Pulls/sorts stock candidates from Finnhub
│   ├── strategy_router.py                # ⏱️ Chooses active strategy by time/override
│   ├── strategy_open.py                  # 9:30–10:20 AM breakout logic
│   ├── strategy_mid.py                   # 10:30–2:30 PM VWAP mean reversion
│   ├── strategy_close.py                 # 2:30–4:00 PM trend/fade strategy
│   ├── strategy_meta.py                  # Stores config: R:R, filters, logic toggles

│   ├── gnu_paper.gnucash                 # 📘 Paper-mode ledger (TEST_MODE only)
│   ├── gnu_live.gnucash                  # 📗 Live-mode ledger (real trades)
│   ├── gnu_exporter.py                   # 🔁 Auto-converts trade log into GnuCash format
│   ├── gnu_transaction.py                # 🧱 Builds compliant XML ledger entries
│   ├── gnu_config.py                     # 🧾 Defines GnuCash account structure: assets/income categories
│   ├── gnu_backup.py                     # 📂 Creates timestamped backup of .gnucash files before writing
│   ├── trade_history.csv                 # Full log of all trades (strategy, broker, live/paper, P/L)
│   ├── unresolved_orders.log             # Flags partial fills, rejected orders, or API errors

│   ├── enhancements/                     # 🔧 Optional strategy upgrades (enabled via .env_bot)
│   │   ├── adx_filter.py                # Avoids mean reversion during strong trends
│   │   ├── bollinger_confluence.py     # Adds BBand confluence to VWAP triggers
│   │   ├── vix_gatekeeper.py           # Restricts EOD trading under low-volatility conditions
│   │   ├── imbalance_scanner_ibkr.py   # Detects institutional buy/sell pressure before close
│   │   ├── ticker_blocklist.py         # Prevents retargeting stocks already traded that day

├── tbot_web/                             # 🖥️ Optional web UI interface for remote control
│   ├── assets/
│   │   ├── fnt/
│   │   └── css/
│   │       ├── main.css
│   │       └── theme.css
│   ├── favicon.ico / .gif                # Browser icons
│   ├── index.html                        # Login screen
│   ├── main.html                         # Dashboard iframe layout
│   ├── logs.html                         # Log viewer
│   ├── settings.html                     # Edit .env_bot vars from browser
│   ├── status.html                       # Live view: running strategy, risk, trade status
│   ├── robots.txt                        # Prevent indexing
│   ├── py/
│   │   ├── login_web.py
│   │   ├── main_web.py
│   │   ├── logs_web.py
│   │   ├── start_stop_web.py
│   │   ├── status_web.py
