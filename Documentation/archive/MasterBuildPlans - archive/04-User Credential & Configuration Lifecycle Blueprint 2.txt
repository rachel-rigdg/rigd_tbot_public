# Document-04-RIGD-TradeBot-User-Credential-&-Configuration-Lifecycle-Blueprint-(v038,Single-Broker-Architecture,Accounting-Decoupled)
## Overview
Defines authoritative architecture and operational flow for user credential, bot identity, and broker configuration management within RIGD TradeBot. Enforces **strict separation of concerns** between Accounting System and Bot; guarantees secure, autonomous, audit-compliant operation post-bootstrap.
---
## 1. Core Principles
- **Full bot autonomy:** After first setup, bot fully owns/manages user credentials/authentication—*no runtime dependency on accounting system*.
- **Accounting system scope:** Manages broker API credentials, vendor info, entity/jurisdiction metadata only.
- **Secure bootstrap only:** Initial config (broker, entity, identity) imported securely at bot startup or explicit config reload; never dynamically queried after.
- **Encrypted local storage:** All bot credentials/sensitive configs *always encrypted at rest* in bot storage.
- **No shared/runtime auth:** Bot never queries accounting for user credentials post-bootstrap; auth fully local.
- **Web UI Integration:** Web UI for credential/configuration is self-contained, embedded or linked, bot-local, *does not* call accounting.
---
## 2. User Credential Lifecycle
### 2.1 Creation & Storage
- All user credentials (username, bcrypt-hashed password, email, roles) **created, edited, managed solely via bot Web UI** (`configuration.html`, `configuration_web.py`).
- **bcrypt** used for password hashing, never plaintext.
- Credentials stored in **`SYSTEM_USERS.db`** at `tbot_bot/core/databases/`, encrypted at DB level with *Fernet key* from `tbot_bot/storage/keys/login.key`.
- Initial bootstrap user credential setup scripts (e.g., `init_system_users.py`) *triggered only via* `configuration_web.py` (Web UI POST), never CLI/shell.
### 2.2 Backup & Recovery
- Credential backups (hashed+encrypted JSON) saved under `tbot_bot/storage/backups/` encrypted only.
- Manual credential import/export provided exclusively via Web UI tools.
- Backups must never leave bot storage unencrypted.
- Backup files follow strict versioning and timestamp naming conventions.
- Automated periodic backup scheduling recommended, with encrypted storage.
### 2.3 Authentication & Runtime
- *All* user authentication and session management is local; only bot’s `SYSTEM_USERS.db` and encryption keys used—never external lookup.
- Authentication uses bcrypt password hashing and Fernet session encryption; no other hash/token types permitted.
- Password rehashing (e.g., updated bcrypt cost) occurs transparently at login if required, fully local.
- Session tokens encrypted and time-limited; all auth events logged with timestamp and user metadata.
---
## 3. Broker Configuration & Identity Sync
### 3.1 Broker API Credentials
- *Managed solely by accounting system.* At startup/explicit reload, bot **imports encrypted broker API credentials** as `broker_credentials.json.enc` into `tbot_bot/storage/secrets/` using `broker.key` from `tbot_bot/storage/keys/`.
- **No further queries or live calls** to accounting post-import; all ops use local encrypted secrets.
### 3.2 Entity/Jurisdiction/Bot Identity
- Identity metadata (`ENTITY_CODE`, `JURISDICTION_CODE`, `BROKER_CODE`, `BOT_ID`) and entity config imported *once* at bootstrap or explicit reload, encrypted as `bot_identity.json.enc` or `env.json.enc` under `tbot_bot/storage/secrets/`.
- Web UI allows local editing/updating of identity/entity config with full audit trail.
- Accounting system never queried for identity/entity config at runtime.
---
## 4. Configuration Sync Flow (Startup / Reconfiguration)
1. **Trigger:** Startup or explicit user action via Web UI.
2. **Fetch:** Bot receives exported, encrypted config JSONs (broker creds, identity) from accounting system.
3. **Validate:** Bot validates completeness, integrity, schema compliance using strict JSON schema and checksum verification.
4. **Store:** Bot encrypts and saves new configs under `tbot_bot/storage/secrets/` using correct Fernet keys per category.
5. **Load:** Runtime config is loaded or hot-reloaded as supported; *no restart required if not needed*. Hot-reload respects config locking to prevent concurrent conflicts.
6. **Audit:** All config sync/import events logged locally with UTC timestamps, checksums, user/context metadata, and operation success/failure flags.
7. **All sync ops coordinated exclusively via** `configuration_web.py` on Web UI POST; *No CLI bootstrap or external config injection permitted*.
- Sync operations are atomic, with concurrency controls to prevent race conditions.
---
## 5. Separation of Concerns Table
| Function                      | Responsible System     | Storage Location                                                | Runtime Access            |
|------------------------------|-----------------------|-----------------------------------------------------------------|--------------------------|
| User credentials & auth       | TradeBot              | `tbot_bot/core/databases/SYSTEM_USERS.db`<br>`tbot_bot/storage/keys/login.key` | Local only; never external|
| Broker API keys & secrets     | Accounting System     | `tbot_bot/storage/secrets/broker_credentials.json.enc`          | Local post-sync only      |
| Entity/Jurisdiction/Identity  | Accounting(init); TradeBot(post-bootstrap) | `tbot_bot/storage/secrets/bot_identity.json.enc`, `env.json.enc` | Local bot-only            |
| Config sync logs/audit        | TradeBot              | Encrypted logs in `tbot_bot/storage/backups/`                   | Local only               |
---
## 6. Security Considerations
- All credentials/configs **Fernet-encrypted at rest**, with *dedicated keys* per category (`login.key`, `broker.key`, etc.).
- Accounting<->bot config import/export only over authenticated, encrypted channels.
- Web UI interacts exclusively with local (bot-owned) DBs; no external auth or shared credentials at runtime.
- Full audit trail maintained for all credential/config changes—UTC timestamped, checksum-verified.
- No temp/backup artifacts contain secrets in plaintext at any time.
- Encryption key lifecycle managed with strict rotation policy and secure storage.
---
## 7. Summary (Compliance Lock)
- **Bootstrap:** All credential/config info *explicitly imported* at setup; never dynamic or auto-pulled; subsequent management autonomous.
- **Local-only auth:** User login/session always resolved by bot; never accounting or external systems.
- **Encrypted storage:** All secrets encrypted at rest and in transit per RIGD security standards.
- **Audit compliance:** All sync/config events logged locally for forensic tracking.
- **Web UI independence:** Management of credentials, identity, runtime config fully local, secure, Web UI-driven.
- **No runtime dependency:** After bootstrap/config reload, bot never requires accounting system for credentials or identity functions.
---
*End of Document*  
[UTC:2025-05-30 14:45 — RIGD_TradingBot_v038]
