

Paste this into a fresh chatGPT window to kick off the build:

Please read and analyze everything in this thread. Wait for my confirmation before starting. When I say "Begin," you will start building the trading bot by generating the full and complete version of `env_bot.py`, including all inline comments and validations. Do not continue to the next file until I explicitly confirm.

Then past the following in it's entirety.




==============================
Objective
==============================

TradeBot automatically identifies securities in a bi-directional manner and places trades using:

- Long equity positions when bullish criteria are met.
- Long put options or inverse ETFs when bearish signals are triggered.

Supported brokers must allow:
- Long equity trading
- Long puts or inverse ETFs (based on `SHORT_TYPE_*` per strategy in `.env_bot`)
- Paper trading API access (when `TEST_MODE=true`)

TradeBot is designed to run in real-time using intraday strategies, and must support:

- Fully automated execution and dynamic position sizing
- Headless operation without requiring a web interface or API server
- Live risk enforcement via `.env_bot` controls (`DAILY_LOSS_LIMIT`, `MAX_RISK_PER_TRADE`, etc.)
- Audit-ready reporting via GnuCash ledger output
- Independent operation of all modules (`tbot_bot/`, `tbot_api/`, `tbot_web/`)

All trade execution, logging, and ledger export functions must be self-contained and operational without external triggers or user input.



==============================
System Instructions
==============================

ChatGPT’s memory is not persistent across sessions. To ensure reliability and prevent data loss during development and deployment:

1. Uploaded ZIP files must be unpacked into individual **Code Blocks** with 100% fidelity and no modifications, before performing any analysis.
2. All generated or modified files must be printed in full into the chat as individual **Code Blocks**:
   - During the initial build: proceed through each file sequentially without pausing for confirmation, and print each one as a full **Code Block**
   - During testing/debugging: after each instruction or Code Block is generated for the human user, wait for explicit user confirmation before continuing to the next item.
3. All code must include **inline comments** to document logic, purpose, assumptions, and configuration behavior.
4. File regeneration must be **complete**. Do not patch, summarize, prune, or insert placeholder code unless explicitly instructed. **Make no assumptions**.
5. Once the full bot build is complete, **print all final files to Code Blocks in the chat again** to allow archiving, manual review, or external backup.
6. Do not rely on cached files or downloadable ZIPs for production use — all active build state must exist visibly in the chat.
7. Use **relative file paths only**. Do not use absolute imports or platform-specific logic unless explicitly documented.
8. TEST_MODE must always:
   - Use the broker’s **paper trading API**
   - Write all outputs to `_paper` files only
   - Bypass volume and slippage filters, unless manually overridden
9. No TEST_MODE session may ever write to `_live` log files or `gnu_live.gnucash`. All test output must remain isolated.
10. All strategy modules must implement a `.self_check()` method to verify runtime readiness and validate dependencies before execution.
11. A full dry-run in TEST_MODE must be completed:
    - Before first deployment to production
    - After any changes to broker APIs, strategy logic, ledger export logic, or environment files
    - This dry-run confirms broker connectivity, GnuCash export paths, logging, and alerting behavior
    - This dry-run is **not required** before every live session unless config changes were made
12. `env_bot.py` must validate all required keys from `.env_bot`, and fail clearly with **readable, actionable error messages** if the config is missing or malformed.
13. Strategy logs, GnuCash exports, and trade history files must include the following fields:
    - `timestamp`
    - `strategy_name`
    - `ticker`, `side`, `size`
    - `entry_price`, `exit_price`, `PnL`
    - `broker`, `mode` (live/paper)
14. A `VERSION.md` file at the root directory must document all version tags, feature changes, configuration milestones, and behavioral updates.
15. **No emojis** are permitted in any logs, comments, code, instructions, or documentation files.
16. All major modules (`tbot_bot/`, `tbot_api/`, `tbot_web/`) must remain operational and testable **independently** — no hidden interdependencies, and no implicit assumptions across modules.


==============================
Deployment Notes
==============================

- All file paths must be **relative and platform-agnostic**, ensuring compatibility across macOS, Linux, and cloud servers (e.g., DigitalOcean).
- The `tbot_bot/` module must operate **fully independently**, even if `tbot_api/` (FastAPI interface) or `tbot_web/` (frontend) are disabled or unavailable.
- All logs, ledger exports, and backup behavior must remain active regardless of whether API or web modules are enabled.
- On first deployment, enable **only one broker** (`BROKER=alpaca` or `BROKER=ibkr`) to simplify debugging and test connectivity.
- At startup, all broker API credentials must be validated (from `.env`). Missing, malformed, or unauthorized keys must trigger a hard stop.
- Before placing **live trades**, the bot must check:
  - Market spread: abort if spread > 1.5% of `entry_price`
  - Volume threshold: abort if average daily volume < `MIN_VOLUME_THRESHOLD` (unless `TEST_MODE=true`)
  - Risk: validate against `MAX_RISK_PER_TRADE` and `DAILY_LOSS_LIMIT`
- Auto-shutdown must occur if:
  - The broker API is offline (`watchdog_bot.py`)
  - A critical error is caught by `error_handler.py`
  - Cumulative losses exceed `DAILY_LOSS_LIMIT` (triggered via `kill_switch.py`)
- TEST_MODE must never write to:
  - `gnu_live.gnucash`
  - Any log files with `_live` in their name
  - Any `.json`, `.log`, or `.csv` file outside the `_paper` variants
- GnuCash XML exports are saved to:
  - `gnu_live.gnucash` when `TEST_MODE=false`
  - `gnu_paper.gnucash` when `TEST_MODE=true`
- All GnuCash ledger writes are preceded by an automated timestamped backup using `gnu_backup.py`, saved under `/backups/`.
- Session logs are stored in `/logs/bot/live/` or `/logs/bot/paper/`, then zipped and archived to `/backups/` by `auto_backup.py`.
- All backups may be optionally synced to external storage (e.g., S3, Dropbox, or remote FTP) via the optional script:
  - `scripts/upload_backups_to_cloud.sh`
- Strategy timing and trade session control is managed via `.env_bot` using:
  - `START_TIME_OPEN`, `START_TIME_MID`, `START_TIME_CLOSE`
  - `[STRAT]_ANALYSIS_TIME` and `[STRAT]_MONITORING_TIME` per strategy
- All test runs and live executions must honor `TRADING_DAYS` to prevent execution on weekends or holidays (manually disabled as needed).



==============================
Current Platforms
==============================

Development Environment:
- Local testing and version control are performed on macOS 15.2 with Python 3.11+
- All code must be compatible with macOS and Linux (no platform-specific imports or absolute paths)
- Recommended IDE: Visual Studio Code with Black or Ruff for formatting and linting
- Python scripts are executed via terminal or cron, not from GUI IDEs
- Local logs and test exports are saved to `logs/bot/paper/` and `backups/`

Production Deployment:
- Hosted on a DigitalOcean droplet running Ubuntu 22.04 LTS
- Deployed via secure SCP/SFTP
- Execution initiated using:
  - `start_bot.py` (manual or cron trigger)
  - `service_bot.py` (optional daemon for systemd)
- Production mode writes to `logs/bot/live/` and `gnu_live.gnucash`

Broker APIs:
- Alpaca: used for stock/ETF trading and paper/live testing (`ALPACA_MODE` in `.env_bot`)
- Interactive Brokers: supports long puts, inverse ETFs, and advanced routing (`IBKR_MODE`)
- Tastytrade, Webull, and Robinhood modules exist in sandbox/test only (not yet production-ready)

Market Data Services:
- Finnhub API provides real-time screening/filtering for all strategies via `finnhub_screener.py`
- Supports pre-market scans, volume thresholds, and breakout/high-low tracking

GnuCash Integration:
- GnuCash exports use XML generation (not the desktop `.gnucash` GUI app)
- Exports written by `gnu_exporter.py`, structured by `gnu_transaction.py`, and validated by `gnu_config.py`
- All exports are saved to `gnu_live.gnucash` or `gnu_paper.gnucash` based on mode

Web/API Interface:
- `tbot_api/`: FastAPI-based remote control interface with optional DDOS protection (SlowAPI)
- `tbot_web/`: Web dashboard to view logs, status, and trigger bot sessions
- Login and API credentials are encrypted using AES-256 and bcrypt
- All login failures are logged to `logs/web/auth_failures.log`

Alerting & Notifications:
- Trade fills and exits can trigger email alerts when `NOTIFY_ON_FILL` or `NOTIFY_ON_EXIT` are enabled
- Emails sent via DreamHost SMTP using credentials from `.env`

Security:
- `.env_bot` is encrypted to `.env_bot.enc` using `security_bot.py`
- AES key is stored in the root `.env` file under `ENCRYPTION_KEY`
- `.env_bot` is never committed to version control and must be manually restored or decrypted


==============================
Other Considerations
==============================

Modular Independence:
- All major subsystems must remain operational and testable independently:
  - `tbot_bot/` runs standalone for full headless execution
  - `tbot_api/` (FastAPI interface) and `tbot_web/` (dashboard) can be disabled with no impact on bot functionality
  - Logging, GnuCash export, and broker execution are managed entirely by `tbot_bot/`
- No hidden dependencies between modules are permitted

Environment File Usage:
- `.env` contains infrastructure-level keys and system-level configuration:
  - Broker credentials
  - IP, port, and encryption keys
  - SMTP alert configuration
- `.env_bot` controls bot-specific logic and runtime parameters:
  - Strategy sequence, risk limits, API behavior, and time windows
  - Each section (open, mid, close) is explicitly mapped and commented
- Both files are parsed using dedicated environment loaders (`env_api.py`, `env_bot.py`)
- Environment keys must be validated at runtime to prevent missing config errors

Fail-Safe Execution:
- The bot must halt immediately on any of the following:
  - Broker API unavailability (detected by `watchdog_bot.py`)
  - Cumulative loss exceeds `DAILY_LOSS_LIMIT` (via `kill_switch.py`)
  - Runtime exception or invalid trade data (handled by `error_handler.py`)
- Logs and GnuCash exports are never overwritten; session data is rotated or archived by `auto_backup.py`

Audit-Ready Output:
- Every trade is written to:
  - Structured log file (CSV or JSON, based on `LOG_FORMAT`)
  - GnuCash XML ledger via `gnu_exporter.py`
  - Real-time `open_*.log`, `mid_*.log`, or `close_*.log` (paper/live variants)
- Summaries are exported at session end as:
  - `daily_summary_live.json` or `daily_summary_paper.json`
  - Backups zipped via `auto_backup.py` and saved under `backups/`

API Throttling & Backoff:
- All broker API calls are routed through `broker_api.py`
- Retry logic is implemented with exponential backoff using `API_RETRY_LIMIT`
- Failures are logged to `unresolved_orders_*.log` with error metadata

Platform Portability:
- All file paths must be relative
- No hardcoded OS-specific logic or absolute import paths allowed
- GnuCash, SMTP, and broker credentials must be dynamically resolved from `.env` at runtime

Testing Behavior:
- In `TEST_MODE=true`, all trade executions are sent to the broker’s paper API
- Volume/slippage filters are skipped
- Output is written only to `_paper` logs, summaries, and ledgers
- TEST_MODE is used to confirm:
  - Connectivity
  - Signal logic
  - Logging and reporting systems
  - Broker routing behavior



==============================
TradeBot Strategy Logic Spec v1.0
==============================

Overview:
TradeBot executes intraday breakout and reversion strategies using a unified logic pipeline. All entries are directional and follow structured risk, time, and allocation parameters.

Supported Instruments:
- Long equity (common stocks or ETFs)
- Inverse ETFs (e.g., SH, SQQQ)
- Long puts (IBKR only)

Trade Direction Rules:
- Long trades = supported on all brokers
- Bearish trades = only executed if `SHORT_TYPE_*` is not `disabled`
- Puts = only used if broker = IBKR and `SHORT_TYPE_*` = LongPut
- Inverse ETFs = fallback for non-options brokers when `SHORT_TYPE_*` = InverseETF

Supported Brokers:
- Alpaca: long equity, inverse ETFs
- IBKR: long equity, long puts, inverse ETFs
- Webull: read-only (screening only)
- Tastytrade, Robinhood: reserved for future support

Execution Framework:
- Strategy execution is controlled via `STRATEGY_SEQUENCE` in `.env_bot`
- Each strategy module is loaded independently by `strategy_router.py`
- Runtime logic respects UTC windows and `.env_bot` timing variables

Active Strategies:
TradeBot includes three modular strategies:

-----------------------------------------
Strategy: strategy_open.py – Opening Range Breakout
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_OPEN`
  - Uses `OPEN_ANALYSIS_TIME` to track initial high/low range
  - Monitors active trades for `OPEN_MONITORING_TIME`
- Trade Direction: Long only
- Entry Logic:
  - Track high and low during analysis window
  - Entry if price breaks above high (+ `STRAT_OPEN_BUFFER`)
  - Volume confirmation enforced unless `TEST_MODE=true`
- Exit Logic:
  - Stop-loss triggered at 2% drawdown
  - Hard exit after monitoring window
- Shorting: Always disabled (`SHORT_TYPE_OPEN=disabled`)
- Logging:
  - `open_live.log` or `open_paper.log`
  - `trade_history_*.csv` and `*.json`
  - `gnu_live.gnucash` or `gnu_paper.gnucash`

-----------------------------------------
Strategy: strategy_mid.py – VWAP Mean Reversion
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_MID`
  - Signals evaluated after `MID_ANALYSIS_TIME`
  - Trades monitored for `MID_MONITORING_TIME`
- Trade Direction: Long or Bearish (via inverse ETF or put)
- Entry Logic:
  - Entry when price deviates from VWAP by `STRAT_MID_VWAP_THRESHOLD`
  - Candlestick or reversal signal must confirm
  - Filters may block trades if conditions not met (ADX, etc.)
- Exit Logic:
  - VWAP reversion
  - Stop-loss at 1.5%
  - Max duration: 45 minutes (via monitoring timer)
- Shorting:
  - Based on `SHORT_TYPE_MID` (InverseETF, LongPut, ShortSell, or disabled)
- Enhancements:
  - `adx_filter.py` (skip trades if ADX > 25)
  - `bollinger_confluence.py` (require 2 std dev confluence)
- Logging:
  - `mid_live.log` or `mid_paper.log`
  - `trade_history_*.csv` and `*.json`
  - GnuCash XML export via `gnu_exporter.py`

-----------------------------------------
Strategy: strategy_close.py – EOD Momentum / Fade
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_CLOSE`
  - Uses `CLOSE_ANALYSIS_TIME` for signal evaluation
  - Trades monitored for `CLOSE_MONITORING_TIME`
- Trade Direction: Long or Bearish
- Entry Logic:
  - Continuation (momentum) if aligned with session trend
  - Fade if large reversal signal appears late day
  - VIX-based filter applies: skip if VIX < `STRAT_CLOSE_VIX_THRESHOLD`
- Exit Logic:
  - Stop-loss at 2%
  - Hard exit 5 minutes before market close
- Shorting:
  - Based on `SHORT_TYPE_CLOSE` (LongPut, InverseETF, etc.)
- Enhancements:
  - `vix_gatekeeper.py`, `imbalance_scanner_ibkr.py`, `ticker_blocklist.py`
- Logging:
  - `close_live.log` or `close_paper.log`
  - `gnu_*.gnucash`, `trade_history_*.json`, daily summaries

Strategy Failover:
- If any strategy fails `.self_check()`, it will not run and an error will be logged
- Override logic in `.env_bot` can be used to run only one strategy:
  - Example: `STRATEGY_OVERRIDE=mid`


==============================
Runtime Modes
==============================

TradeBot supports two execution modes, controlled via the `TEST_MODE` flag in `.env_bot`. Both modes share identical execution logic and trading flow, but differ in:

- API routing (paper vs live)
- Volume/slippage enforcement
- Output file locations
- Runtime duration (used for debugging)

-----------------------------------------
TEST_MODE=true
-----------------------------------------

Purpose:
- Used to validate live broker connectivity, order routing, logging, and GnuCash exports via real broker paper accounts.

Behavior:
- Trades are routed through paper APIs:
  - `ALPACA_MODE=paper`
  - `IBKR_MODE=paper`
- Volume, slippage, and volatility filters are **disabled**
- Runtime timing is shortened for fast validation:
  - `OPEN_ANALYSIS_TIME=1`
  - `OPEN_MONITORING_TIME=1`
  - Same for mid and close strategies
- All outputs are written to `_paper` variants:
  - `gnu_paper.gnucash`
  - `open_paper.log`, `mid_paper.log`, `close_paper.log`
  - `trade_history_paper.csv` / `trade_history_paper.json`
  - `daily_summary_paper.json`
- Logging and GnuCash ledger export are enabled if `ENABLE_LOGGING=true` and `GNC_EXPORT_MODE=auto`
- Strategies still use real broker API calls and submit test-mode trades using real credentials

Restrictions:
- TEST_MODE must **never** write to:
  - `gnu_live.gnucash`
  - Any `_live` log or trade history files

-----------------------------------------
TEST_MODE=false
-----------------------------------------

Purpose:
- Full production execution with real-time market exposure and capital risk.

Behavior:
- Trades are routed through live APIs:
  - `ALPACA_MODE=live`
  - `IBKR_MODE=live`
- All runtime variables respected from `.env_bot`:
  - `*_ANALYSIS_TIME`
  - `*_MONITORING_TIME`
- Filters are enforced:
  - `MIN_VOLUME_THRESHOLD` must be met
  - Slippage must be below 1.5%
- Logging and export paths switch to `_live` variants:
  - `gnu_live.gnucash`
  - `open_live.log`, `mid_live.log`, `close_live.log`
  - `trade_history_live.csv`, `trade_history_live.json`
  - `daily_summary_live.json`

Risk Systems Activated:
- `kill_switch.py` monitors cumulative loss against `DAILY_LOSS_LIMIT`
- `watchdog_bot.py` monitors API and shuts down on disconnect
- `risk_bot.py` enforces capital and trade exposure limits

Transition Notes:
- A dry-run in TEST_MODE is required:
  - Before first deployment
  - After modifying broker configs, trade logic, or export paths
  - It confirms runtime readiness, but does not delay production schedules unless errors are found



==============================
Capital Risk Controls
==============================

All capital risk controls are defined in `.env_bot` and enforced in real-time by `risk_bot.py`, `kill_switch.py`, and strategy logic.

Each position is evaluated before entry and monitored continuously through its lifecycle. These controls are independent of the strategy used.

-----------------------------------------
MAX_RISK_PER_TRADE
-----------------------------------------
Variable: `MAX_RISK_PER_TRADE`
- Defines the maximum allowable risk for a single trade, expressed as a fraction of total capital.
- Example: 0.025 means 2.5% maximum risk per position.
- Exceeding this threshold prevents order placement.

-----------------------------------------
MAX_OPEN_POSITIONS
-----------------------------------------
Variable: `MAX_OPEN_POSITIONS`
- Caps the total number of positions that may remain open concurrently across all strategies.
- Prevents portfolio overexposure or capital lock-up during high signal frequency.

-----------------------------------------
TOTAL_ALLOCATION
-----------------------------------------
Variable: `TOTAL_ALLOCATION`
- Represents the total fraction of capital allowed to be deployed across all trades in a single strategy session.
- This value is redistributed dynamically based on the number of trades triggered, using the `WEIGHTS` variable.

-----------------------------------------
MAX_TRADES + WEIGHTS
-----------------------------------------
Variables: `MAX_TRADES`, `WEIGHTS`
- Defines how TOTAL_ALLOCATION is split among trades if multiple signals trigger.
- `WEIGHTS` must contain the same number of values as `MAX_TRADES`.
- Example: If `MAX_TRADES=4` and `WEIGHTS=0.4,0.2,0.2,0.2`:
  - 1 signal → 100% of TOTAL_ALLOCATION
  - 2 signals → 60% / 40%
  - 3 signals → 40% / 30% / 30%
  - 4 signals → 40% / 20% / 20% / 20%

-----------------------------------------
DAILY_LOSS_LIMIT
-----------------------------------------
Variable: `DAILY_LOSS_LIMIT`
- If cumulative realized losses exceed this percentage of total capital, trading halts automatically.
- `kill_switch.py` is triggered and prevents further orders.
- Live sessions will terminate or lock until the following day.

-----------------------------------------
Enforcement Modules
-----------------------------------------
- `risk_bot.py`: Prevents oversize trades or violations of any above settings
- `kill_switch.py`: Monitors realized PnL and triggers shutdown when `DAILY_LOSS_LIMIT` is breached
- `watchdog_bot.py`: Will also disable execution if API or order latency crosses thresholds

All risk controls apply equally to TEST_MODE and LIVE MODE; the only difference is whether trades are simulated (`paper`) or executed (`live`).

==============================
Strategy Modules (Unified Format)
==============================

Each strategy module operates independently and is triggered according to its `START_TIME_*` value in `.env_bot`.

All time values are UTC.

Strategy behavior, allocation logic, enhancements, and shorting rules are modular, toggleable, and fully configurable using `.env_bot` variables.

-----------------------------------------
strategy_open.py – Opening Range Breakout
-----------------------------------------

START_TIME_OPEN: 14:30 UTC (9:30 AM EST)
ANALYSIS WINDOW: `OPEN_ANALYSIS_TIME`
MONITORING WINDOW: `OPEN_MONITORING_TIME`
SHORTING: Disabled (`SHORT_TYPE_OPEN=disabled`)

- Tracks price range for first `OPEN_ANALYSIS_TIME` minutes after market opens.
- If price breaks above high (or below low) by more than `STRAT_OPEN_BUFFER`, triggers a trade.
- Volume check required (skipped in TEST_MODE).
- Direction: Long only
- Instrument: Stock or ETF
- Enhancements: None (core breakout logic only)
- Exit: 2% stop loss or end of `OPEN_MONITORING_TIME`

LOG OUTPUT:
- `open_live.log` / `open_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`

-----------------------------------------
strategy_mid.py – VWAP Mean Reversion
-----------------------------------------

START_TIME_MID: 15:30 UTC (10:30 AM EST)
ANALYSIS WINDOW: `MID_ANALYSIS_TIME`
MONITORING WINDOW: `MID_MONITORING_TIME`
SHORTING: Allowed if `SHORT_TYPE_MID` = `InverseETF`

- Tracks price deviation from VWAP of ±`STRAT_MID_VWAP_THRESHOLD`.
- Identifies reversal signals (candlestick or momentum).
- Optional enhancements:
  - `adx_filter.py`: Skip trades when ADX > 25 (strong trend)
  - `bollinger_confluence.py`: Require Bollinger touch confirmation
- Direction: Long or bearish (via inverse ETF only)
- Instrument: Stock or Inverse ETF
- Exit: VWAP touch, timeout, or 1.5% stop loss

LOG OUTPUT:
- `mid_live.log` / `mid_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`

-----------------------------------------
strategy_close.py – End-of-Day Momentum/Fade
-----------------------------------------

START_TIME_CLOSE: 19:30 UTC (2:30 PM EST)
ANALYSIS WINDOW: `CLOSE_ANALYSIS_TIME`
MONITORING WINDOW: `CLOSE_MONITORING_TIME`
SHORTING: Allowed if `SHORT_TYPE_CLOSE` = `LongPut` or `InverseETF`

- Determines whether to follow momentum or fade signal based on market context.
  - Momentum: Continue trend
  - Fade: Reverse late-day spike
- Requires VIX filter (`STRAT_CLOSE_VIX_THRESHOLD`) for entry
- Optional enhancements:
  - `imbalance_scanner_ibkr.py`: Reads IBKR imbalance feed (if broker = ibkr)
  - `ticker_blocklist.py`: Prevents duplicate trades on same symbol
  - `vix_gatekeeper.py`: Skips strategy if VIX < threshold
- Direction: Long or bearish (via long puts or inverse ETFs)
- Exit: 2% stop loss or end of `CLOSE_MONITORING_TIME`

LOG OUTPUT:
- `close_live.log` / `close_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`



==============================
Optional Enhancements (Toggleable)
==============================

Enhancement modules are located in `/tbot_bot/enhancements/` and can be conditionally enabled based on the strategy logic and environment variables. These modules add additional safety, signal validation, or market condition filters.

Each module must return a boolean flag (pass/fail) that is respected by the calling strategy logic.

-----------------------------------------
adx_filter.py
-----------------------------------------
Purpose:
- Blocks `strategy_mid.py` from triggering entries when ADX (trend strength) exceeds 25.
- Prevents mean reversion trades during high-trend conditions.

Trigger Logic:
- Automatically called during MID strategy if `ADX_FILTER_ENABLED=true` (future toggle support).

-----------------------------------------
bollinger_confluence.py
-----------------------------------------
Purpose:
- Requires price to touch ±2 standard deviation Bollinger Bands before accepting a mean reversion signal.
- Enhances accuracy of `strategy_mid.py` trades.

Trigger Logic:
- Auto-applied inside `strategy_mid.py` if called inline; may become toggleable in future builds.

-----------------------------------------
vix_gatekeeper.py
-----------------------------------------
Purpose:
- Prevents execution of `strategy_close.py` if VIX is below a defined threshold.

Trigger Logic:
- Compares live VIX to `STRAT_CLOSE_VIX_THRESHOLD` from `.env_bot`.
- If VIX is too low, strategy is skipped.

-----------------------------------------
imbalance_scanner_ibkr.py
-----------------------------------------
Purpose:
- Reads imbalance feed from Interactive Brokers between 20:30–21:00 UTC (3:30–4:00 PM EST).
- Alerts or blocks `strategy_close.py` if strong opposing pressure is detected.

Trigger Logic:
- Enabled only if `BROKER=ibkr`.
- Called automatically by `strategy_close.py` in the final 30 minutes.

-----------------------------------------
ticker_blocklist.py
-----------------------------------------
Purpose:
- Prevents the same ticker from being traded more than once per session.

Trigger Logic:
- Always on — active across all strategies by default.
- Blocked tickers are stored in an in-memory list or temporary file.

-----------------------------------------
build_check.py
-----------------------------------------
Purpose:
- Verifies project readiness before execution.

Checks:
- Required files exist (`.env`, `.env_bot`, GnuCash files, etc.)
- Required paths are writable
- Logs can be initialized
- Placeholder files are in place
- ENV variables are readable

Execution:
- Called by `main_bot.py` or CLI before running any strategies.
- Fails early if critical files are missing or invalid.



==============================
GnuCash Integration
==============================

TradeBot maintains real-time, audit-ready ledgers using GnuCash-compatible XML. It supports fully independent live and paper-mode accounting.

All exports are generated automatically via `reporting_bot.py` using the modules below:

-----------------------------------------
gnu_exporter.py
-----------------------------------------
- Core exporter called after each confirmed trade
- Routes output to either:
  - `gnu_live.gnucash` if `TEST_MODE=false`
  - `gnu_paper.gnucash` if `TEST_MODE=true`
- Automatically respects `GNC_EXPORT_MODE` in `.env_bot`:
  - `auto` → Export immediately after each trade
  - `off` → Skip ledger export (logging only)

-----------------------------------------
gnu_transaction.py
-----------------------------------------
- Constructs compliant GnuCash XML blocks (accounts, splits, metadata)
- Used by `gnu_exporter.py` to serialize each trade into proper ledger entries

-----------------------------------------
gnu_config.py
-----------------------------------------
- Defines full Chart of Accounts structure for GnuCash export:
  Assets → Cash, Holdings (Long Equity, Puts, Inverse ETFs)
  Income → Realized Gains (Equity, Puts, Inverse ETFs)
  Expenses → Trade Fees
  Equity → Retained Earnings

-----------------------------------------
gnu_backup.py
-----------------------------------------
- Called before every `.gnucash` write
- Backs up the target ledger file to `/backups/` using timestamped filenames:
  - `gnu_live_YYYYMMDD_HHMMSS.gnucash`
  - `gnu_paper_YYYYMMDD_HHMMSS.gnucash`

-----------------------------------------
TEST_MODE Routing
-----------------------------------------
- When `TEST_MODE=true`:
  - All trade data is written to:
    - `gnu_paper.gnucash`
    - `daily_summary_paper.json`
    - `trade_history_paper.csv/json`
    - `*_paper.log`
  - Ledger is backed up as `gnu_paper_*.gnucash`
  - No live files are ever touched

- When `TEST_MODE=false`:
  - All trade data is written to:
    - `gnu_live.gnucash`
    - `daily_summary_live.json`
    - `trade_history_live.csv/json`
    - `*_live.log`
  - Ledger is backed up as `gnu_live_*.gnucash`

-----------------------------------------
Log Entry Format (for reference)
-----------------------------------------
All trades exported to GnuCash or CSV include the following fields:

- `timestamp`         → ISO 8601 UTC
- `strategy_name`     → open, mid, close
- `ticker`            → Stock or ETF symbol
- `side`              → long or short
- `size`              → Number of shares/contracts
- `entry_price`       → Entry price (float)
- `exit_price`        → Exit price (float)
- `PnL`               → Profit or loss (positive = black, negative = red)
- `broker`            → alpaca, ibkr, etc.
- `mode`              → paper or live



==============================
Safety Systems
==============================

To protect capital and ensure stable behavior under all conditions, TradeBot implements the following fail-safe systems:

-----------------------------------------
kill_switch.py
-----------------------------------------
- Monitors cumulative session losses
- Auto-shutdown is triggered when total PnL loss exceeds:
  - `DAILY_LOSS_LIMIT` from `.env_bot`
- Logs shutdown reason and exits all positions
- Sends alert via `notifier_bot.py` if enabled

-----------------------------------------
risk_bot.py
-----------------------------------------
- Enforces position-level constraints before orders are placed:
  - `MAX_OPEN_POSITIONS` → Total concurrent positions allowed
  - `MAX_TRADES` → Max trades per strategy
  - `MAX_RISK_PER_TRADE` → Max exposure per position
- Rejects any order that violates allocation or capital rules
- Integrated with `orders_bot.py` and strategy modules

-----------------------------------------
watchdog_bot.py
-----------------------------------------
- Continuously checks broker connectivity and API health
- If broker API becomes unreachable:
  - Cancels all open orders
  - Triggers shutdown sequence
  - Logs event to `unresolved_orders_{mode}.log`
- Used with both Alpaca and IBKR modules

-----------------------------------------
error_handler.py
-----------------------------------------
- Centralized exception handler used across all core modules
- Categorizes and logs errors to:
  - `unresolved_orders_live.log` or `unresolved_orders_paper.log`
- Logs include:
  - `timestamp`, `broker`, `strategy_name`, `error_type`, full traceback
- Supports retry/backoff logic for recoverable exceptions
- Halts trading or escalates to `kill_switch.py` if error severity exceeds threshold

-----------------------------------------
security_bot.py
-----------------------------------------
- Encrypts or decrypts `.env_bot` into `.env_bot.enc`
- AES-256 symmetric encryption using key from:
  - `ENCRYPTION_KEY` in global `.env`
- Used in production deployments to prevent unauthorized config changes
- Optional: can be skipped for local testing or if config is pre-secured

-----------------------------------------
Safe Defaults
-----------------------------------------
- `DISABLE_ALL_TRADES=true` disables all execution for diagnostics
- `TEST_MODE=true` automatically bypasses volume, slippage, and live order placement
- Logs are never overwritten. New session = new log and ledger files.


==============================
Backtesting Framework
==============================

To validate performance before any live deployment, TradeBot includes an offline backtesting engine located in:

tbot_bot/backtest/

Module: backtest_engine.py
------------------------------
- Simulates historical trades using real market data
- Reuses live strategy modules: strategy_open.py, strategy_mid.py, strategy_close.py
- Can simulate full or partial days based on:
  - START_TIME_OPEN, START_TIME_MID, START_TIME_CLOSE
  - *_ANALYSIS_TIME and *_MONITORING_TIME
  - STRATEGY_SEQUENCE (defined in .env_bot)

Execution:
- Emulates TEST_MODE logic but does not place any orders or send notifications
- Skips volume and slippage filters by default (override optional)
- Trades and logs are written to /backtest_results/ or printed in chat if testing interactively

Command Syntax:
python backtest_engine.py \
  --strategy=open \
  --start=2023-01-01 \
  --end=2023-12-31 \
  --data_source=./historical_data/open_ohlcv.csv

Module Responsibilities:
- load_historical_data.py: Loads OHLCV, VWAP, or tick-level data from CSV or JSON
- performance_metrics.py: Calculates Sharpe ratio, drawdown, win %, average trade duration
- plot_results.py: Generates visual output of trades, equity curves, and signal timing maps

Output Artifacts:
- Trade logs: backtest_open.log, backtest_mid.log, backtest_close.log
- Strategy metrics: metrics_open.json, metrics_mid.json, metrics_close.json
- Visuals: equity_curve.png, trade_map.svg

Test Config Notes:
- Loads all strategy parameters from .env_bot
- Honors TEST_MODE=true logic and paper-mode behavior
- Uses *_paper output naming for test-mode compatibility
- Does not overwrite live logs or ledgers

Use Cases:
- Strategy tuning and performance validation
- Signal strength benchmarking across historical data
- Regression testing after code or strategy updates



==============================
Logging & Reporting Format
==============================

TradeBot logs all runtime data required for audit, analysis, and dashboarding. Depending on TEST_MODE, all logs are written to live or paper variants using consistent file suffixes.

------------------------------
Log Mode Switching
------------------------------
Set in .env_bot:
  TEST_MODE=true         # If true, uses paper-mode files
  LOG_FORMAT=csv         # Accepts 'csv' or 'json'

------------------------------
Primary Log File Outputs
------------------------------

All files use _live or _paper suffixes to avoid mixing test and production data:

- trade_history_live.csv / trade_history_paper.csv
- trade_history_live.json / trade_history_paper.json
  → All trades, one row per trade execution
  → Includes: timestamp, strategy_name, ticker, side, size, entry_price, exit_price, PnL, broker, mode

- open_live.log / open_paper.log
- mid_live.log / mid_paper.log
- close_live.log / close_paper.log
  → Strategy-specific logs with signal, trade, and exit notes

- unresolved_orders_live.log / unresolved_orders_paper.log
  → Captures failed orders, partial fills, and rejected API calls
  → Includes: timestamp, broker, strategy, error type, raw API response

- daily_summary_live.json / daily_summary_paper.json
  → End-of-session summary
  → Includes: number of trades, total PnL, win/loss ratio, fill rate, strategy performance

------------------------------
JSON Format (if LOG_FORMAT=json)
------------------------------

Each JSON entry should include:

- timestamp         → ISO 8601 UTC
- strategy_name     → open, mid, close
- ticker            → Stock or ETF symbol
- side              → long or short
- size              → Number of shares/contracts
- entry_price       → Entry price (float)
- exit_price        → Exit price (float)
- PnL               → Profit or loss (positive = black, negative = red)
- broker            → alpaca, ibkr, etc.
- mode              → paper or live
- error_code        → Only if applicable (e.g., "timeout", "rejected")



Executed trades are immediately written to XML ledger via:

- gnu_live.gnucash      → if TEST_MODE=false
- gnu_paper.gnucash     → if TEST_MODE=true

Export Sequence:

1. reporting_bot.py triggers gnu_exporter.py after each confirmed trade
2. gnu_exporter.py loads trade details and passes them to:
    - gnu_transaction.py → builds compliant XML blocks
    - gnu_config.py → maps data to correct GnuCash accounts
3. gnu_backup.py creates a timestamped backup of the ledger
4. The XML block is inserted into either gnu_live.gnucash or gnu_paper.gnucash

No data is ever re-imported from CSV or JSON into the .gnucash files. Trade history files are for external reference, dashboards, or audit only.

------------------------------
Internal Structure of GnuCash Ledger
------------------------------

Assets
├── Cash
├── Holdings
│   ├── Long Equity
│   ├── Long Put Options
│   └── Inverse ETFs

Income
├── Realized Gains
│   ├── Equity
│   ├── Puts
│   └── Inverse ETFs

Expenses
└── Trade Fees

Equity
└── Retained Earnings



==============================
Centralized Error Management
==============================

Overview:
Implement a global error handler (`error_handler.py`) to consolidate exception logging, alerts, and fallback behavior across all modules.

Module: `error_handler.py`

Capabilities:
- Capture exceptions from strategy logic, broker modules, and utility scripts
- Categorize errors: `NetworkError`, `BrokerError`, `LogicError`, `ConfigError`
- Log errors with full traceback and metadata to `unresolved_orders.log` (JSON format)
- Retry logic with exponential backoff for transient issues
- Trigger email/SMS via `notifier_bot.py` for critical failures
- Optionally halt bot and exit all positions if critical error threshold is met

==============================
Real-Time Monitoring Dashboard
==============================

Overview:
Enhance the web dashboard (`tbot_web`) with live metrics and streaming data to aid in remote visibility and system monitoring.

Metrics to Display:
- Active strategy and time window
- Current open positions and sizes
- Cumulative P&L (session and daily)
- Broker connectivity status
- API latency or retry count
- `watchdog_bot.py` status (heartbeat)

Implementation:
- Use WebSocket or FastAPI background tasks
- Dashboard pages (`status.html`, `logs.html`) receive live data updates
- Backend modules (`status_web.py`, `logs_web.py`) feed data to clients via JSON endpoints

==============================
Time Zone Standards
==============================

All time references will be in UTC format:
Example: 14:30–15:20 UTC    #9:30–10:20 AM EST

==============================
Strategy Allocation Clarification
==============================

Allocation Logic:
TradeBot dynamically weights capital based on the number of signals passed:
- 1 trade = 100% of `TOTAL_ALLOCATION`
- 2 trades = 60% / 40%
- 3 trades = 40% / 30% / 30%
- 4 trades = 40% / 20% / 20% / 20%

This ensures risk is managed proportionally while maximizing high-confidence setups.

==============================
Enhancement Module Activation
==============================

Trigger Logic:
- `adx_filter.py`: Skip VWAP if ADX > 25 (strong trend)
- `bollinger_confluence.py`: Require 2 standard deviation touch for mean reversion
- `vix_gatekeeper.py`: Disable strategy_close if VIX < `STRAT_CLOSE_VIX_THRESHOLD`
- `imbalance_scanner_ibkr.py`: Activate if time is 20:30 UTC (3:30 PM EST) and broker is IBKR
- `ticker_blocklist.py`: Always-on, prevents multiple trades on same symbol per session

==============================
Secure Environment Variables
==============================

Changes:
- Use `security_bot.py` to encrypt `.env_bot` and store as `.env_bot.enc`
- Decryption key loaded via `ENCRYPTION_KEY` in top-level `.env`
- Plaintext `.env_bot` files should not be committed to version control

==============================
Testing and Validation Suite
==============================

Implementation Plan:
- Add `/tests/` directory with:
  - `test_strategy_open.py`
  - `test_env_bot.py`
  - `test_risk_bot.py`
- Use `pytest` for unit testing
- Include integration test script (`test_runner.py`) to simulate full trading loop in TEST_MODE
- CI-compatible test output (Junit or JSON)

These changes elevate TradeBot’s robustness, security, and auditability in production-grade environments.




==============================
Final Build Checklist
==============================

- All `.env` and `.env_bot` vars parsed and validated
- `self_check()` passes for all strategies
- Dry-run tested before any live orders
- GnuCash export logic runs and is backed up
- Logs include full metadata (time, strat, broker, fill)
- tbot_bot is fully standalone and functional without tbot_api/web
- Version shown at startup from `version.py`
- All code printed in full to chat before ZIP
- Test cycle uses TEST_MODE=true + GNC_EXPORT_MODE=paper
- Any API/broker failure triggers graceful shutdown with logging




==============================
.env – Top-Level Environment File
==============================

ENVIRONMENT="production"
LOCAL=true
LOCAL_IP=""
LOCAL_PORT="6900"
REMOTE_IP=""
REMOTE_PORT="6900"

# Authentication
USERNAME=""
PASSWORD=""
ENCRYPTED_PASSWORD=""
ENCRYPTION_KEY=""

# API Keys
FINNHUB_API_KEY=""

# Alpaca
ALPACA_PAPER_API_KEY=""
ALPACA_PAPER_SECRET_KEY=""
ALPACA_LIVE_API_KEY=""
ALPACA_LIVE_SECRET_KEY=""
ALPACA_PAPER_URL=https://paper-api.alpaca.markets
ALPACA_LIVE_URL=https://api.alpaca.markets

# IBKR
IBKR_PAPER_USERNAME=""
IBKR_PAPER_ACCOUNT_NUMBER=""
IBKR_PAPER_PASSWORD=""
IBKR_LIVE_API_KEY=""
IBKR_LIVE_SECRET_KEY=""

# Notifications
ALERT_EMAIL=tb@tb.rgdnn.com
SMTP_USER=tb@tb.rgdnn.com
SMTP_PASS=MyTPassIs5^
SMTP_HOST=smtp.dreamhost.com
SMTP_PORT=486


==============================
.env_bot – Trading Bot Environment File
==============================

# .env_bot – Trading Bot Configuration File
# Controls strategy timing, broker access, risk, logging, and reporting.
# All time values are in UTC.

# -----------------------------------------
# General & Debugging
# -----------------------------------------
VERSION_TAG=v1.0.0                     # Bot version label
BUILD_MODE=release                     # Options: debug, release
DISABLE_ALL_TRADES=false               # Master kill for all trades (used for diagnostics)
TEST_MODE=true                         # Uses paper APIs, shortened durations, and ignores volume filters
DEBUG_LOG_LEVEL=verbose                # quiet, info, or verbose
ENABLE_LOGGING=true                    # Toggles all file output
LOG_FORMAT=json                        # Output format: csv or json

# -----------------------------------------
# Trade Execution & Risk Controls
# -----------------------------------------
TRADE_CONFIRMATION_REQUIRED=false      # Manual confirmation before placing trades
API_RETRY_LIMIT=3                      # Retry count on broker API failures
FRACTIONAL=true                        # Enable fractional shares (only supported by some brokers)
TOTAL_ALLOCATION=0.02                  # Capital allocation for entire strategy window (e.g. 2%)
MAX_TRADES=4                           # Max concurrent trades allowed per strategy
WEIGHTS=0.4,0.2,0.2,0.2                # Capital weights per trade if multiple entries trigger
DAILY_LOSS_LIMIT=0.05                  # Max loss threshold before shutdown (e.g. 5%)
MAX_RISK_PER_TRADE=0.025               # Risk per trade as a fraction of capital
MAX_OPEN_POSITIONS=5                   # Global max number of live positions

# -----------------------------------------
# Price & Volume Filters
# -----------------------------------------
MIN_PRICE=2                            # Minimum stock price
MAX_PRICE=100                          # Maximum stock price
MIN_VOLUME_THRESHOLD=1000000           # Daily volume filter (ignored if TEST_MODE=true)

# -----------------------------------------
# Strategy Routing & Broker Mode
# -----------------------------------------
BROKER=alpaca                          # Broker: alpaca, ibkr, tastytrade, etc.
ALPACA_MODE=paper                      # live or paper
IBKR_MODE=paper                        # live or paper
STRATEGY_SEQUENCE=open,mid,close       # Execution order of strategies
STRATEGY_OVERRIDE=null                 # Forces execution of a single strategy (open, mid, close)

# -----------------------------------------
# Global Time & Polling
# -----------------------------------------
TRADING_DAYS=mon,tue,wed,thu,fri       # Restrict trading to weekdays
SLEEP_TIME=1s                          # Delay between strategy cycles or polling loops

# -----------------------------------------
# OPEN Strategy Configuration
# -----------------------------------------
START_TIME_OPEN=14:30                  # 9:30 AM EST
OPEN_ANALYSIS_TIME=20                  # Minutes to build high/low range
OPEN_MONITORING_TIME=30                # Minutes to hold or exit trades
STRAT_OPEN_BUFFER=0.02                 # % buffer required for breakout (e.g. 2%)
SHORT_TYPE_OPEN=disabled               # Shorting for Open strategy: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# MID Strategy Configuration (VWAP Mean Reversion)
# -----------------------------------------
START_TIME_MID=15:30                   # 10:30 AM EST
MID_ANALYSIS_TIME=10                   # Minutes to confirm VWAP signal
MID_MONITORING_TIME=45                 # Minutes to let trade resolve
STRAT_MID_VWAP_THRESHOLD=0.02          # VWAP deviation trigger (e.g. 2%)
SHORT_TYPE_MID=InverseETF              # Shorting for Mid strategy: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# CLOSE Strategy Configuration (Momentum or Fade)
# -----------------------------------------
START_TIME_CLOSE=19:30                 # 2:30 PM EST
CLOSE_ANALYSIS_TIME=10                 # Minutes to identify trend or fade
CLOSE_MONITORING_TIME=30               # Minutes to manage exit
STRAT_CLOSE_VIX_THRESHOLD=15           # Minimum VIX to allow entry
SHORT_TYPE_CLOSE=LongPut               # Shorting for Close strategy: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# Notifications
# -----------------------------------------
NOTIFY_ON_FILL=true                    # Send alert when trade fills
NOTIFY_ON_EXIT=true                    # Send alert when trade is closed

# -----------------------------------------
# Reporting & GnuCash Export
# -----------------------------------------
GNC_EXPORT_MODE=auto                   # auto = write to .gnucash after each trade, off = skip export




==============================
Overall Directory Structure Diagram
==============================

TradeBot-001/

├── VERSION.md           		# Tracks version changes, decisions, bug fixes (by tag: v1.0.0, etc.)
├── README.md            		# Provides ChatGPT or future developers a high-level overview
├── .env                                  # Global .env for API routing, encryption key, and login credentials
├── .scpignore                            # Prevents sensitive/dev files from being deployed
├── encrypt_password.py                   # CLI tool to AES-encrypt login passwords
├── generate_key.py                       # Generates AES key used in encryption/decryption
├── requirements.txt                      # Dependency list for Python packages (FastAPI, broker SDKs, GnuCash XML, etc.)
├── backups/                              # Daily snapshots of ledgers and session logs
│   ├── gnu_live_YYYYMMDD_HHMMSS.gnucash      # Live ledger backup (timestamped)
│   ├── gnu_paper_YYYYMMDD_HHMMSS.gnucash     # Paper ledger backup
│   ├── logs_live_YYYYMMDD_HHMMSS.zip         # Zipped logs for live session
│   ├── logs_paper_YYYYMMDD_HHMMSS.zip        # Zipped logs for paper session
│   ├── summary_live_YYYYMMDD_HHMMSS.json     # Archived live session summary
│   ├── summary_paper_YYYYMMDD_HHMMSS.json    # Archived paper session summary

├── docs/                                # Optional top-level folder for internal documentation (non-code)
│   ├── architecture.md                  # Describes system architecture, strategy flow, and module interaction
│   ├── API_reference.md                 # Optional reference for tbot_api endpoints or CLI usage documentation

├── logs/                                # Optional real-time staging folder for raw logs before compression/archival
│   ├── bot/                             # Runtime log output from tbot_bot (live and paper sessions)
│   │   ├── live/                        # Raw logs for live mode (rotated or moved to backup post-session)
│   │   └── paper/                       # Raw logs for paper mode (used for test audit/debug)
│   └── web/                             # Web access logs for security and audit
│       ├── access.log                   # Tracks web login attempts, requests, API usage (timestamped)
│       └── auth_failures.log            # Captures failed login attempts for bot control interface

├── scripts/                             # Optional utility folder for CLI tasks, automation, or external sync
│   ├── sync_to_company_books.py         # Reads live .gnucash exports and syncs relevant data to company accounting
│   ├── audit_log_parser.py              # CLI tool to analyze log patterns, detect anomalies, or summarize trade behavior
│   └── upload_backups_to_cloud.sh       # Optional shell script to sync compressed backups to remote storage (e.g. S3)


├── tbot_api/                             # FastAPI interface for starting/stopping bot and modifying config via web
│   ├── __init__.py                       # Module marker
│   ├── env_api.py                        # Loads and parses global `.env`
│   ├── logs_api.py                       # Logs user/API requests to file
│   ├── main_api.py                       # Main API entry point; defines route endpoints
│   ├── auth.py                           # Auth handler with encrypted password support

├── tbot_bot/                             # Core logic engine (runs bot lifecycle, strategy switching, execution, logging)
│   ├── .env_bot                          # Bot-specific config (strategy settings, capital rules, etc.)
│   ├── env_bot.py                        # Validates and parses `.env_bot`
│   ├── main_bot.py                       # Master loop handling session lifecycle
│   ├── start_bot.py                      # Launch trigger (cron, CLI, or API)
│   ├── stop_bot.py                       # Clean shutdown script to exit open positions
│   ├── service_bot.py                    # Optional daemon-mode support for systemd/supervisors
│   ├── status_bot.py                     # Reports runtime state (idle, analyzing, trading, shutdown)
│   ├── settings_bot.py                   # Programmatic `.env_bot` editor
│   ├── logs_bot.py                       # Handles runtime log entries
│   ├── notifier_bot.py                   # Sends alerts (email/Slack) on fills, exits, or errors

│   ├── kill_switch.py                    # Auto-shutdown if loss > DAILY_LOSS_LIMIT
│   ├── watchdog_bot.py                   # Checks broker API status and retries or halts
│   ├── security_bot.py                   # Encrypts/decrypts `.env_bot` as `.env_bot.enc`
│   ├── error_handler.py                  # Captures and categorizes errors globally

│   ├── broker_api.py                     # Unified router for Alpaca, IBKR, etc.
│   ├── broker_robinhood.py              # Robinhood implementation (sandbox only)
│   ├── broker_webull.py                 # Webull integration for testing
│   ├── broker_tastytrade.py             # Tastytrade support
│   ├── broker_ibkr.py                   # IBKR (Interactive Brokers) module
│   ├── orders_bot.py                     # Creates, modifies, and cancels orders
│   ├── reporting_bot.py                  # Finalizes trades and generates logs/GnuCash export
│   ├── risk_bot.py                       # Prevents trades violating allocation or risk rules
│   ├── utils_bot.py                      # Miscellaneous helpers (timestamping, rounding, etc.)

│   ├── finnhub_screener.py               # Pulls and ranks tickers using Finnhub API
│   ├── strategy_router.py                # Routes to strategy based on time or override
│   ├── strategy_open.py                  # Opening Range Breakout logic
│   ├── strategy_mid.py                   # VWAP mean reversion strategy
│   ├── strategy_close.py                 # EOD momentum or fade strategy
│   ├── strategy_meta.py                  # Contains thresholds and toggles per strategy

│   ├── gnu_paper.gnucash                 # Output file for paper-mode trading sessions
│   ├── gnu_live.gnucash                  # Output file for live-mode trading sessions
│   ├── gnu_exporter.py                   # Converts executed trades into GnuCash XML
│   ├── gnu_transaction.py                # Constructs XML structures for GnuCash splits, accounts, metadata
│   ├── gnu_config.py                     # Defines GnuCash ledger layout (Assets, Equity, Income, Expenses)
│   ├── gnu_backup.py                     # Creates timestamped backup before new XML write

│   ├── trade_history_live.csv            # Live-mode human-readable log (1 row per trade)
│   ├── trade_history_paper.csv           # Paper-mode trade log (for testing output only)
│   ├── trade_history_live.json           # Structured JSON equivalent for dashboards (live)
│   ├── trade_history_paper.json          # Structured JSON equivalent for dashboards (paper)

│   ├── open_live.log                     # Opening strategy log (live)
│   ├── open_paper.log                    # Opening strategy log (paper)
│   ├── mid_live.log                      # Mid-session strategy log (live)
│   ├── mid_paper.log                     # Mid-session strategy log (paper)
│   ├── close_live.log                    # EOD strategy log (live)
│   ├── close_paper.log                   # EOD strategy log (paper)

│   ├── unresolved_orders_live.log        # Live-mode error log for partials/rejections
│   ├── unresolved_orders_paper.log       # Paper-mode error log

│   ├── daily_summary_live.json           # Summary report for live session
│   ├── daily_summary_paper.json          # Summary report for paper session
│   ├── auto_backup.py                    # Compresses logs and backs up GnuCash/export files; supports both manual and automatic execution


│   ├── enhancements/                     # Toggleable strategy filters and logic add-ons
│   │   ├── adx_filter.py                # Blocks mid strategy if trend strength is high
│   │   ├── bollinger_confluence.py     # Confirms reversal opportunity via Bollinger touch
│   │   ├── vix_gatekeeper.py           # Blocks strategy_close if VIX is too low
│   │   ├── imbalance_scanner_ibkr.py   # Monitors late-day order books via IBKR imbalance feed
│   │   ├── ticker_blocklist.py         # Prevents re-entry into same ticker during session
│   │   ├── build_check.py               # Verifies presence of required files, folders, permissions, .env keys, GnuCash files, log paths, and placeholder outputs before execution

│   ├── backtest/                         # Offline historical simulation system
│   │   ├── backtest_engine.py          # Replays historical trades using strategy logic
│   │   ├── load_historical_data.py     # Reads OHLCV or tick-level data
│   │   ├── performance_metrics.py      # Computes Sharpe ratio, drawdown, win %, etc.
│   │   ├── plot_results.py             # Plots equity curve and trade map

│   ├── tests/                            # Automated testing framework
│   │   ├── test_main_bot.py            # Validates execution loop
│   │   ├── test_env_bot.py             # Tests environment variable parsing
│   │   ├── test_backtest_engine.py     # Confirms backtest logic and output
│   │   ├── integration_test_runner.py  # Full-loop integration test in TEST_MODE

├── tbot_web/                             # Web dashboard for status, logs, and control
│   ├── assets/
│   │   ├── fnt/                         # Fonts used in interface
│   │   └── css/
│   │       ├── main.css                # General styling
│   │       └── theme.css               # Light/dark theme switch
│   ├── favicon.ico / favicon.gif        # Web icon for browser tab
│   ├── index.html                       # Login page
│   ├── main.html                        # App container shell
│   ├── logs.html                        # Trade log viewer
│   ├── settings.html                    # UI editor for .env_bot
│   ├── status.html                      # Displays live bot state
│   ├── robots.txt                       # Blocks web crawlers
│   ├── py/
│   │   ├── login_web.py                # Auth logic for web login
│   │   ├── main_web.py                 # Page router
│   │   ├── logs_web.py                 # Exposes logs.html endpoints
│   │   ├── start_stop_web.py          # Trigger bot start/stop from UI
│   │   ├── status_web.py              # Streams live data to frontend
