

Paste this into a fresh ChatGPT window to kick off the build:

# -----------------------------------------

Please read and analyze everything in this thread. Acknowledge that you understand the Objective, System Instructions, and overall architecture of the system to be built. Do not begin the build process yet.

When I say “begin”, you will start generating the full and complete version of `env_bot.py`, including all inline comments and validations, and you will proceed to build all required files sequentially until the entire system is complete. Do not pause or request confirmation after each file — continue automatically until the final file is generated.


# -----------------------------------------


Then paste the following in its entirety:


# -----------------------------------------



==============================
Table of Contents – TradeBot Master Build Document
==============================

1. Objective					# Defines the bot's purpose, supported trade types, and execution goals

2. System Instructions  			# Build and deployment rules for ChatGPT and human operators

3. .env – Top-Level Environment File		# Contains API keys, credentials, and global environment settings

4. .env_bot – Trading Bot Configuration		# Core strategy, broker, and risk control settings parsed at runtime

5. Overall Directory Structure Diagram		# Master layout of folders, modules, logs, and export locations

6. Deployment Notes				# Required runtime behavior, broker checks, and shutdown policies

7. Current Platforms				# Supported environments for development and production

8. Time Zone Standards				# Standardization of all internal timestamps to UTC

9. TradeBot Strategy Logic Spec v1.0		# Logic and rules for each strategy module: open, mid, close

10. Runtime Modes				# Describes TEST_MODE, LIVE mode, and FORCE_PAPER_EXPORT override

11. Capital Risk Controls			# Rules for allocation, max trades, position size, and daily loss limits

12. Strategy Modules (Unified Format)		# Structure, toggles, and logging behavior per strategy

13. Strategy Allocation Clarification		# Explains dynamic capital distribution and trade weight logic

14. Logging & Reporting Format			# File naming, contents, and export behavior for logs and trade data

15. GnuCash Integration				# How trades are written to XML-based GnuCash ledgers

16. Enhancement Module Activation		# Optional logic filters (e.g., ADX, Bollinger, VIX) and when they run

17. Safety Systems				# Auto-shutdown, kill switch, watchdog, and error handling safeguards

18. Secure Environment Variables		# AES encryption and decryption of sensitive config files

19. Centralized Error Management		# Categorizes, logs, and escalates runtime errors and trade failures

20. Backtesting Framework			# Simulates past trades for performance testing and tuning

21. Testing and Validation Suite		# Automated test coverage and CI compatibility

22. Real-Time Monitoring Dashboard		# Optional web UI for remote observability (read-only)

23. Final Build Checklist			# Pre-launch validation steps to ensure safe deployment




==============================
Objective
==============================

TradeBot automatically identifies securities in a bi-directional manner and places trades using:

- Long equity positions when bullish criteria are met.
- Long put options or inverse ETFs when bearish signals are triggered.

Supported brokers must allow:
- Long equity trading
- Long puts or inverse ETFs (based on `SHORT_TYPE_*` per strategy in `.env_bot`)
- Paper trading API access (when `TEST_MODE=true` or `FORCE_PAPER_EXPORT=true`)

TradeBot is designed to run in real-time using intraday strategies, and must support:

- Fully automated execution and dynamic position sizing
- Headless operation without requiring a web interface or API server
- Live risk enforcement via `.env_bot` controls (`DAILY_LOSS_LIMIT`, `MAX_RISK_PER_TRADE`, etc.)
- Audit-ready reporting via GnuCash ledger output
- Independent operation of all modules (`tbot_bot/`, `tbot_api/`, `tbot_web/`)

All trade execution, logging, and ledger export functions must be self-contained and operational without external triggers or user input.

Execution, broker access, and strategy activation are governed independently using:
- `ALPACA_ENABLED`, `IBKR_ENABLED`, etc.
- `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`
- `FORCE_PAPER_EXPORT` overrides live exports even when `TEST_MODE=false`



==============================
System Instructions
==============================

ChatGPT’s memory is not persistent across sessions. To ensure reliability and prevent data loss during development and deployment:

1. Uploaded ZIP files must be unpacked into individual **Code Blocks**, with 100% fidelity and no modifications, **each printed in a single complete block**, before performing any analysis.
2. All generated or modified files must be printed in full into the chat as **single, self-contained Code Blocks**:
   - During the initial build: proceed through each file sequentially without pausing for confirmation, and print each one as a **full Code Block**, clearly labeled.
   - During testing/debugging: after each instruction or Code Block is generated, wait for **explicit user confirmation** before continuing to the next item.
3. All code must include **inline comments** to document logic, purpose, assumptions, and configuration behavior.
4. File regeneration must be **complete**. Do not patch, summarize, prune, or insert placeholder code unless explicitly instructed. **Make no assumptions.**
5. Once the full bot build is complete, **print all final files again in full Code Blocks** to the chat for archiving, review, or external backup.
6. Do not rely on cached files or downloadable ZIPs for production use — all active build state must exist visibly in the chat.
7. Use **relative file paths only**. Do not use absolute imports or platform-specific logic unless explicitly documented.
8. TEST_MODE must always:
   - Use the broker’s **paper trading API**
   - Write all outputs to `_paper` files only
   - Bypass volume and slippage filters, unless manually overridden
9. No TEST_MODE session may ever write to `_live` log files or `gnu_live.gnucash`. All test output must remain isolated.
10. All strategy modules must implement a `.self_check()` method to verify runtime readiness and validate dependencies before execution.
11. A full dry-run in TEST_MODE must be completed:
    - Before first deployment to production
    - After any changes to broker APIs, strategy logic, ledger export logic, or environment files
    - This dry-run confirms broker connectivity, GnuCash export paths, logging, and alerting behavior
    - This dry-run is **not required** before every live session unless config changes were made
12. `env_bot.py` must validate all required keys from `.env_bot`, and fail clearly with **readable, actionable error messages** if the config is missing or malformed.
13. Strategy logs, GnuCash exports, and trade history files must include the following fields:
    - `timestamp`
    - `strategy_name`
    - `ticker`, `side`, `size`
    - `entry_price`, `exit_price`, `PnL`
    - `broker`, `mode` (live/paper)
14. A `VERSION.md` file at the root directory must document all version tags, feature changes, configuration milestones, and behavioral updates.
15. **No emojis** are permitted in any logs, comments, code, instructions, or documentation files.
16. All major modules (`tbot_bot/`, `tbot_api/`, `tbot_web/`) must remain operational and testable **independently** — no hidden interdependencies, and no implicit assumptions across modules.
17. Brokers and strategies are enabled/disabled independently using:
    - `ALPACA_ENABLED`, `IBKR_ENABLED` to control broker usage
    - `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED` to control strategy execution
18. When `FORCE_PAPER_EXPORT=true`, all trades and logs are routed to `_paper` files regardless of TEST_MODE or broker settings. This guarantees isolation of test output from live data.




==============================
.env – Top-Level Environment File
==============================

# .env – Top-Level Environment Configuration
# Handles global system, API, encryption, and notification settings
# This file is parsed by tbot_api/, tbot_bot/, and related utility scripts

# -----------------------------------------
# Environment Flags
# -----------------------------------------
ENVIRONMENT="production"         # production or development mode
LOCAL=true                       # If running in local dev environment
LOCAL_IP=""                      # Optional: bind FastAPI to a specific local IP
LOCAL_PORT="6900"                # Port for local web/API access
REMOTE_IP=""                     # Optional: external IP override
REMOTE_PORT="6900"               # Port for external access or reverse proxy

# -----------------------------------------
# Authentication (for tbot_api web login)
# -----------------------------------------
USERNAME=""                      # Web dashboard login username
PASSWORD=""                      # (Optional) plaintext password (not used in production)
ENCRYPTED_PASSWORD=""            # Required for login; use encrypt_password.py to generate
ENCRYPTION_KEY=""                # AES key to decrypt .env_bot and validate user credentials

# -----------------------------------------
# API Keys & External Services
# -----------------------------------------

# Finnhub – used for screener, price/volume lookup
FINNHUB_API_KEY=""

# -----------------------------------------
# Alpaca Broker Credentials
# -----------------------------------------
ALPACA_PAPER_API_KEY=""          # Paper trading key
ALPACA_PAPER_SECRET_KEY=""       # Paper secret
ALPACA_LIVE_API_KEY=""           # Live trading key
ALPACA_LIVE_SECRET_KEY=""        # Live secret
ALPACA_PAPER_URL="https://paper-api.alpaca.markets"
ALPACA_LIVE_URL="https://api.alpaca.markets"

# -----------------------------------------
# Interactive Brokers (IBKR) API Credentials
# -----------------------------------------
IBKR_PAPER_USERNAME=""           # TWS username (paper)
IBKR_PAPER_ACCOUNT_NUMBER=""     # Account number used for paper trades
IBKR_PAPER_PASSWORD=""           # Optional: stored securely if automation is enabled
IBKR_LIVE_API_KEY=""             # API key for live session
IBKR_LIVE_SECRET_KEY=""          # Secret for live trading

# -----------------------------------------
# Notifications (Email Alerts)
# -----------------------------------------
ALERT_EMAIL=tb@tb.rgdnn.com      # Email to send alerts to
SMTP_USER=tb@tb.rgdnn.com        # SMTP login
SMTP_PASS=MyTPassIs5^            # SMTP password or app-specific key
SMTP_HOST=smtp.dreamhost.com     # SMTP server
SMTP_PORT=486                    # SMTP port for TLS/SSL relay



# .env_bot – Trading Bot Configuration File
# Controls strategy timing, broker access, risk, logging, and reporting.
# All time values are in UTC.

# -----------------------------------------
# General & Debugging
# -----------------------------------------
VERSION_TAG=v1.0.0                     # Bot version label
BUILD_MODE=release                     # Options: debug, release
DISABLE_ALL_TRADES=false               # Master kill switch to block all trades
TEST_MODE=true                         # Enables paper APIs, skips filters, shortens runtime
FORCE_PAPER_EXPORT=false               # Force all trades to route to paper ledger even in live mode
DEBUG_LOG_LEVEL=verbose                # Logging level: quiet, info, verbose
ENABLE_LOGGING=true                    # Enables all file output logs
LOG_FORMAT=json                        # Options: json (structured) or csv (flat text)

# -----------------------------------------
# Trade Execution & Risk Controls
# -----------------------------------------
TRADE_CONFIRMATION_REQUIRED=false      # Require manual confirmation before sending trade orders
API_RETRY_LIMIT=3                      # Broker API retry attempts before failing
FRACTIONAL=true                        # Enable fractional share trading (if broker supports it)
TOTAL_ALLOCATION=0.02                  # Total capital to allocate per strategy window (e.g., 2%)
MAX_TRADES=4                           # Maximum number of trades allowed per strategy
WEIGHTS=0.4,0.2,0.2,0.2                # Allocation weights per trade if multiple entries trigger
DAILY_LOSS_LIMIT=0.05                  # Max daily loss threshold (as percent of capital)
MAX_RISK_PER_TRADE=0.025               # Max capital at risk per trade (e.g., 2.5%)
MAX_OPEN_POSITIONS=5                   # Cap on total concurrent open positions across all strategies

# -----------------------------------------
# Price & Volume Filters
# -----------------------------------------
MIN_PRICE=2                            # Minimum stock price filter
MAX_PRICE=100                          # Maximum stock price filter
MIN_VOLUME_THRESHOLD=1000000           # Minimum daily volume filter (ignored if TEST_MODE=true)

# -----------------------------------------
# Strategy Routing & Broker Mode
# -----------------------------------------
ALPACA_ENABLED=true                    # Enable Alpaca broker integration
IBKR_ENABLED=true                      # Enable Interactive Brokers integration
ALPACA_MODE=paper                      # Alpaca account mode: live or paper
IBKR_MODE=paper                        # IBKR account mode: live or paper
STRATEGY_SEQUENCE=open,mid,close       # Execution order for strategies
STRATEGY_OVERRIDE=null                 # Optional: run only one strategy (open, mid, close)

# -----------------------------------------
# Global Time & Polling
# -----------------------------------------
TRADING_DAYS=mon,tue,wed,thu,fri       # Days allowed for trading (UTC-based)
SLEEP_TIME=1s                          # Delay between polling cycles (e.g., 1s, 5s, 10s)

# -----------------------------------------
# OPEN Strategy Configuration
# -----------------------------------------
STRAT_OPEN_ENABLED=true                # Master toggle for OPEN strategy
START_TIME_OPEN=14:30                  # UTC start time (9:30 AM EST)
OPEN_ANALYSIS_TIME=20                  # Minutes to build opening range
OPEN_MONITORING_TIME=30                # Duration to monitor and exit trades
STRAT_OPEN_BUFFER=0.02                 # Breakout buffer percentage (e.g., 2%)
SHORT_TYPE_OPEN=disabled               # Shorting type: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# MID Strategy Configuration (VWAP Mean Reversion)
# -----------------------------------------
STRAT_MID_ENABLED=true                 # Master toggle for MID strategy
START_TIME_MID=15:30                   # UTC start time (10:30 AM EST)
MID_ANALYSIS_TIME=10                   # Minutes to validate VWAP signal
MID_MONITORING_TIME=45                 # Duration to monitor trade
STRAT_MID_VWAP_THRESHOLD=0.02          # VWAP deviation trigger percentage
SHORT_TYPE_MID=InverseETF              # Shorting type for MID: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# CLOSE Strategy Configuration (Momentum or Fade)
# -----------------------------------------
STRAT_CLOSE_ENABLED=true               # Master toggle for CLOSE strategy
START_TIME_CLOSE=19:30                 # UTC start time (2:30 PM EST)
CLOSE_ANALYSIS_TIME=10                 # Minutes to identify trend or fade
CLOSE_MONITORING_TIME=30               # Duration to manage position
STRAT_CLOSE_VIX_THRESHOLD=15           # VIX threshold to enable entry
SHORT_TYPE_CLOSE=LongPut               # Shorting type for CLOSE: ShortSell, LongPut, InverseETF, or disabled

# -----------------------------------------
# Notifications
# -----------------------------------------
NOTIFY_ON_FILL=true                    # Email alert when trade is filled
NOTIFY_ON_EXIT=true                    # Email alert when trade is closed

# -----------------------------------------
# Reporting & GnuCash Export
# -----------------------------------------
GNC_EXPORT_MODE=auto                   # Options: auto = export after each trade, off = skip export




==============================
Overall Directory Structure Diagram
==============================

TradeBot-001/

├── VERSION.md           		# Tracks version changes, decisions, bug fixes (by tag: v1.0.0, etc.)
├── README.md            		# Provides ChatGPT or future developers a high-level overview
├── .env                                  # Global .env for API routing, encryption key, and login credentials
├── .scpignore                            # Prevents sensitive/dev files from being deployed
├── encrypt_password.py                   # CLI tool to AES-encrypt login passwords
├── generate_key.py                       # Generates AES key used in encryption/decryption
├── requirements.txt                      # Dependency list for Python packages (FastAPI, broker SDKs, GnuCash XML, etc.)
├── backups/                              # Daily snapshots of ledgers and session logs
│   ├── gnu_live_YYYYMMDD_HHMMSS.gnucash      # Live ledger backup (timestamped)
│   ├── gnu_paper_YYYYMMDD_HHMMSS.gnucash     # Paper ledger backup
│   ├── logs_live_YYYYMMDD_HHMMSS.zip         # Zipped logs for live session
│   ├── logs_paper_YYYYMMDD_HHMMSS.zip        # Zipped logs for paper session
│   ├── summary_live_YYYYMMDD_HHMMSS.json     # Archived live session summary
│   ├── summary_paper_YYYYMMDD_HHMMSS.json    # Archived paper session summary

├── docs/                                # Optional top-level folder for internal documentation (non-code)
│   ├── architecture.md                  # Describes system architecture, strategy flow, and module interaction
│   ├── API_reference.md                 # Optional reference for tbot_api endpoints or CLI usage documentation

├── logs/                                # Optional real-time staging folder for raw logs before compression/archival
│   ├── bot/                             # Runtime log output from tbot_bot (live and paper sessions)
│   │   ├── live/                        # Raw logs for live mode (rotated or moved to backup post-session)
│   │   └── paper/                       # Raw logs for paper mode (used for test audit/debug)
│   └── web/                             # Web access logs for security and audit
│       ├── access.log                   # Tracks web login attempts, requests, API usage (timestamped)
│       └── auth_failures.log            # Captures failed login attempts for bot control interface

├── scripts/                             # Optional utility folder for CLI tasks, automation, or external sync
│   ├── sync_to_company_books.py         # Reads live .gnucash exports and syncs relevant data to company accounting
│   ├── audit_log_parser.py              # CLI tool to analyze log patterns, detect anomalies, or summarize trade behavior
│   └── upload_backups_to_cloud.sh       # Optional shell script to sync compressed backups to remote storage (e.g. S3)


├── tbot_api/                             # FastAPI interface for starting/stopping bot and modifying config via web
│   ├── __init__.py                       # Module marker
│   ├── env_api.py                        # Loads and parses global `.env`
│   ├── logs_api.py                       # Logs user/API requests to file
│   ├── main_api.py                       # Main API entry point; defines route endpoints
│   ├── auth.py                           # Auth handler with encrypted password support

├── tbot_bot/                             # Core logic engine (runs bot lifecycle, strategy switching, execution, logging)
│   ├── .env_bot                          # Bot-specific config (strategy settings, capital rules, etc.)
│   ├── env_bot.py                        # Validates and parses `.env_bot`
│   ├── main_bot.py                       # Master loop handling session lifecycle
│   ├── start_bot.py                      # Launch trigger (cron, CLI, or API)
│   ├── stop_bot.py                       # Clean shutdown script to exit open positions
│   ├── service_bot.py                    # Optional daemon-mode support for systemd/supervisors
│   ├── status_bot.py                     # Reports runtime state (idle, analyzing, trading, shutdown)
│   ├── settings_bot.py                   # Programmatic `.env_bot` editor
│   ├── logs_bot.py                       # Handles runtime log entries
│   ├── notifier_bot.py                   # Sends alerts (email/Slack) on fills, exits, or errors

│   ├── kill_switch.py                    # Auto-shutdown if loss > DAILY_LOSS_LIMIT
│   ├── watchdog_bot.py                   # Checks broker API status and retries or halts
│   ├── security_bot.py                   # Encrypts/decrypts `.env_bot` as `.env_bot.enc`
│   ├── error_handler.py                  # Captures and categorizes errors globally

│   ├── broker_api.py                     # Unified router for Alpaca, IBKR, etc.
│   ├── broker_robinhood.py              # Robinhood implementation (sandbox only)
│   ├── broker_webull.py                 # Webull integration for testing
│   ├── broker_tastytrade.py             # Tastytrade support
│   ├── broker_ibkr.py                   # IBKR (Interactive Brokers) module
│   ├── orders_bot.py                     # Creates, modifies, and cancels orders
│   ├── reporting_bot.py                  # Finalizes trades and generates logs/GnuCash export
│   ├── risk_bot.py                       # Prevents trades violating allocation or risk rules
│   ├── utils_bot.py                      # Miscellaneous helpers (timestamping, rounding, etc.)

│   ├── finnhub_screener.py               # Pulls and ranks tickers using Finnhub API
│   ├── strategy_router.py                # Routes to strategy based on time or override
│   ├── strategy_open.py                  # Opening Range Breakout logic
│   ├── strategy_mid.py                   # VWAP mean reversion strategy
│   ├── strategy_close.py                 # EOD momentum or fade strategy
│   ├── strategy_meta.py                  # Contains thresholds and toggles per strategy

│   ├── gnu_paper.gnucash                 # Output file for paper-mode trading sessions
│   ├── gnu_live.gnucash                  # Output file for live-mode trading sessions
│   ├── gnu_exporter.py                   # Converts executed trades into GnuCash XML
│   ├── gnu_transaction.py                # Constructs XML structures for GnuCash splits, accounts, metadata
│   ├── gnu_config.py                     # Defines GnuCash ledger layout (Assets, Equity, Income, Expenses)
│   ├── gnu_backup.py                     # Creates timestamped backup before new XML write

│   ├── trade_history_live.csv            # Live-mode human-readable log (1 row per trade)
│   ├── trade_history_paper.csv           # Paper-mode trade log (for testing output only)
│   ├── trade_history_live.json           # Structured JSON equivalent for dashboards (live)
│   ├── trade_history_paper.json          # Structured JSON equivalent for dashboards (paper)

│   ├── open_live.log                     # Opening strategy log (live)
│   ├── open_paper.log                    # Opening strategy log (paper)
│   ├── mid_live.log                      # Mid-session strategy log (live)
│   ├── mid_paper.log                     # Mid-session strategy log (paper)
│   ├── close_live.log                    # EOD strategy log (live)
│   ├── close_paper.log                   # EOD strategy log (paper)

│   ├── unresolved_orders_live.log        # Live-mode error log for partials/rejections
│   ├── unresolved_orders_paper.log       # Paper-mode error log

│   ├── daily_summary_live.json           # Summary report for live session
│   ├── daily_summary_paper.json          # Summary report for paper session
│   ├── auto_backup.py                    # Compresses logs and backs up GnuCash/export files; supports both manual and automatic execution


│   ├── enhancements/                     # Toggleable strategy filters and logic add-ons
│   │   ├── adx_filter.py                # Blocks mid strategy if trend strength is high
│   │   ├── bollinger_confluence.py     # Confirms reversal opportunity via Bollinger touch
│   │   ├── vix_gatekeeper.py           # Blocks strategy_close if VIX is too low
│   │   ├── imbalance_scanner_ibkr.py   # Monitors late-day order books via IBKR imbalance feed
│   │   ├── ticker_blocklist.py         # Prevents re-entry into same ticker during session
│   │   ├── build_check.py               # Verifies presence of required files, folders, permissions, .env keys, GnuCash files, log paths, and placeholder outputs before execution

│   ├── backtest/                         # Offline historical simulation system
│   │   ├── backtest_engine.py          # Replays historical trades using strategy logic
│   │   ├── load_historical_data.py     # Reads OHLCV or tick-level data
│   │   ├── performance_metrics.py      # Computes Sharpe ratio, drawdown, win %, etc.
│   │   ├── plot_results.py             # Plots equity curve and trade map

│   ├── tests/                            # Automated testing framework
│   │   ├── test_main_bot.py            # Validates execution loop
│   │   ├── test_env_bot.py             # Tests environment variable parsing
│   │   ├── test_backtest_engine.py     # Confirms backtest logic and output
│   │   ├── integration_test_runner.py  # Full-loop integration test in TEST_MODE

├── tbot_web/                             # Web dashboard for status, logs, and control
│   ├── assets/
│   │   ├── fnt/                         # Fonts used in interface
│   │   └── css/
│   │       ├── main.css                # General styling
│   │       └── theme.css               # Light/dark theme switch
│   ├── favicon.ico / favicon.gif        # Web icon for browser tab
│   ├── index.html                       # Login page
│   ├── main.html                        # App container shell
│   ├── logs.html                        # Trade log viewer
│   ├── settings.html                    # UI editor for .env_bot
│   ├── status.html                      # Displays live bot state
│   ├── robots.txt                       # Blocks web crawlers
│   ├── py/
│   │   ├── login_web.py                # Auth logic for web login
│   │   ├── main_web.py                 # Page router
│   │   ├── logs_web.py                 # Exposes logs.html endpoints
│   │   ├── start_stop_web.py          # Trigger bot start/stop from UI
│   │   ├── status_web.py              # Streams live data to frontend





==============================
Deployment Notes
==============================

- All file paths must be **relative and platform-agnostic**, ensuring compatibility across macOS, Linux, and cloud servers (e.g., DigitalOcean).
- The `tbot_bot/` module must operate **fully independently**, even if `tbot_api/` (FastAPI interface) or `tbot_web/` (frontend) are disabled or unavailable.
- All logs, ledger exports, and backup behavior must remain active regardless of whether API or web modules are enabled.
- On first deployment, enable **only one broker** (`ALPACA_ENABLED=true` or `IBKR_ENABLED=true`) to simplify debugging and test connectivity.
- At startup, all enabled brokers must validate their API credentials from `.env`. Missing, malformed, or unauthorized keys must trigger a hard stop.
- Strategy activation is controlled independently using:
  - `STRAT_OPEN_ENABLED`
  - `STRAT_MID_ENABLED`
  - `STRAT_CLOSE_ENABLED`
- Before placing **live trades**, the bot must check:
  - Market spread: abort if spread > 1.5% of `entry_price`
  - Volume threshold: abort if average daily volume < `MIN_VOLUME_THRESHOLD` (unless `TEST_MODE=true`)
  - Risk: validate against `MAX_RISK_PER_TRADE` and `DAILY_LOSS_LIMIT`
- Auto-shutdown must occur if:
  - The broker API is offline (`watchdog_bot.py`)
  - A critical error is caught by `error_handler.py`
  - Cumulative losses exceed `DAILY_LOSS_LIMIT` (triggered via `kill_switch.py`)
- TEST_MODE must never write to:
  - `gnu_live.gnucash`
  - Any log files with `_live` in their name
  - Any `.json`, `.log`, or `.csv` file outside the `_paper` variants
- `FORCE_PAPER_EXPORT=true` overrides normal TEST_MODE behavior and forces all exports to `_paper` outputs. This includes trade history, strategy logs, daily summaries, and GnuCash ledger writes.
- GnuCash XML exports are saved to:
  - `gnu_live.gnucash` when `TEST_MODE=false` and `FORCE_PAPER_EXPORT=false`
  - `gnu_paper.gnucash` when `TEST_MODE=true` or `FORCE_PAPER_EXPORT=true`
- All GnuCash ledger writes are preceded by an automated timestamped backup using `gnu_backup.py`, saved under `/backups/`.
- Session logs are stored in `/logs/bot/live/` or `/logs/bot/paper/`, then zipped and archived to `/backups/` by `auto_backup.py`.
- All backups may be optionally synced to external storage (e.g., S3, Dropbox, or remote FTP) via the optional script:
  - `scripts/upload_backups_to_cloud.sh`
- Strategy timing and trade session control is managed via `.env_bot` using:
  - `START_TIME_OPEN`, `START_TIME_MID`, `START_TIME_CLOSE`
  - `[STRAT]_ANALYSIS_TIME` and `[STRAT]_MONITORING_TIME` per strategy
- All test runs and live executions must honor `TRADING_DAYS` to prevent execution on weekends or holidays (manually disabled as needed).




==============================
Current Platforms
==============================

Development Environment:
- Local testing and version control are performed on macOS 15.2 with Python 3.11+
- All code must be compatible with macOS and Linux (no platform-specific imports or absolute paths)
- Recommended IDE: Visual Studio Code with Black or Ruff for formatting and linting
- Python scripts are executed via terminal or cron, not from GUI IDEs
- Local logs and test exports are saved to `logs/bot/paper/` and `backups/`

Production Deployment:
- Hosted on a DigitalOcean droplet running Ubuntu 22.04 LTS
- Deployed via secure SCP/SFTP
- Execution initiated using:
  - `start_bot.py` (manual or cron trigger)
  - `service_bot.py` (optional daemon for systemd)
- Production mode writes to `logs/bot/live/` and `gnu_live.gnucash`

Broker APIs:
- Alpaca: used for stock/ETF trading and paper/live testing (`ALPACA_MODE` in `.env_bot`)
- Interactive Brokers: supports long puts, inverse ETFs, and advanced routing (`IBKR_MODE`)
- Tastytrade, Webull, and Robinhood modules exist in sandbox/test only (not yet production-ready)

Market Data Services:
- Finnhub API provides real-time screening/filtering for all strategies via `finnhub_screener.py`
- Supports pre-market scans, volume thresholds, and breakout/high-low tracking

GnuCash Integration:
- GnuCash exports use XML generation (not the desktop `.gnucash` GUI app)
- Exports written by `gnu_exporter.py`, structured by `gnu_transaction.py`, and validated by `gnu_config.py`
- All exports are saved to `gnu_live.gnucash` or `gnu_paper.gnucash` based on mode

Web/API Interface:
- `tbot_api/`: FastAPI-based remote control interface with optional DDOS protection (SlowAPI)
- `tbot_web/`: Web dashboard to view logs, status, and trigger bot sessions
- Login and API credentials are encrypted using AES-256 and bcrypt
- All login failures are logged to `logs/web/auth_failures.log`

Alerting & Notifications:
- Trade fills and exits can trigger email alerts when `NOTIFY_ON_FILL` or `NOTIFY_ON_EXIT` are enabled
- Emails sent via DreamHost SMTP using credentials from `.env`

Security:
- `.env_bot` is encrypted to `.env_bot.enc` using `security_bot.py`
- AES key is stored in the root `.env` file under `ENCRYPTION_KEY`
- `.env_bot` is never committed to version control and must be manually restored or decrypted




==============================
Time Zone Standards
==============================

Overview:
To ensure consistency, accuracy, and interoperability across development, testing, and production environments, all time-related variables in TradeBot are defined and logged in **UTC (Coordinated Universal Time)**.

Usage:
- All strategy start times (`START_TIME_OPEN`, `START_TIME_MID`, `START_TIME_CLOSE`) are set in UTC
- Log timestamps, strategy triggers, ledger entries, and alerts must all use UTC
- Internal time comparisons in `strategy_router.py` and `status_bot.py` must convert local system time to UTC before logic execution

Reasoning:
- UTC avoids ambiguity across time zones, daylight saving time shifts, or server environments (macOS, Linux, cloud)
- Allows reliable scheduling when hosting in geographically distributed environments (e.g., DigitalOcean, AWS)
- Compatible with broker API timestamps and log analysis pipelines

Example Mapping:
- 14:30 UTC → 9:30 AM EST (Market Open)
- 15:30 UTC → 10:30 AM EST (Midday Strategy)
- 19:30 UTC → 2:30 PM EST (Close Strategy)

Implementation Tip:
If debugging locally in EST or PST, always convert timestamps before interpreting logs or database entries.

Best Practice:
Add a helper function in `utils_bot.py`:
```python
def utc_now():
    return datetime.utcnow().replace(tzinfo=timezone.utc)




==============================
TradeBot Strategy Logic Spec v1.0
==============================

Overview:
TradeBot executes intraday breakout and reversion strategies using a unified logic pipeline. All entries are directional and follow structured risk, time, and allocation parameters.

Supported Instruments:
- Long equity (common stocks or ETFs)
- Inverse ETFs (e.g., SH, SQQQ)
- Long puts (IBKR only)

Trade Direction Rules:
- Long trades = supported on all brokers
- Bearish trades = only executed if `SHORT_TYPE_*` is not `disabled`
- Puts = only used if broker = IBKR and `SHORT_TYPE_*` = LongPut
- Inverse ETFs = fallback for non-options brokers when `SHORT_TYPE_*` = InverseETF

Supported Brokers:
- Alpaca: long equity, inverse ETFs
- IBKR: long equity, long puts, inverse ETFs
- Webull: read-only (screening only)
- Tastytrade, Robinhood: reserved for future support

Execution Framework:
- Strategy execution is controlled via `STRATEGY_SEQUENCE` in `.env_bot`
- Each strategy module is loaded independently by `strategy_router.py`
- Runtime logic respects UTC windows and `.env_bot` timing variables

Active Strategies:
TradeBot includes three modular strategies:

-----------------------------------------
Strategy: strategy_open.py – Opening Range Breakout
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_OPEN`
  - Uses `OPEN_ANALYSIS_TIME` to track initial high/low range
  - Monitors active trades for `OPEN_MONITORING_TIME`
- Trade Direction: Long only
- Entry Logic:
  - Track high and low during analysis window
  - Entry if price breaks above high (+ `STRAT_OPEN_BUFFER`)
  - Volume confirmation enforced unless `TEST_MODE=true`
- Exit Logic:
  - Stop-loss triggered at 2% drawdown
  - Hard exit after monitoring window
- Shorting: Always disabled (`SHORT_TYPE_OPEN=disabled`)
- Logging:
  - `open_live.log` or `open_paper.log`
  - `trade_history_*.csv` and `*.json`
  - `gnu_live.gnucash` or `gnu_paper.gnucash`

-----------------------------------------
Strategy: strategy_mid.py – VWAP Mean Reversion
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_MID`
  - Signals evaluated after `MID_ANALYSIS_TIME`
  - Trades monitored for `MID_MONITORING_TIME`
- Trade Direction: Long or Bearish (via inverse ETF or put)
- Entry Logic:
  - Entry when price deviates from VWAP by `STRAT_MID_VWAP_THRESHOLD`
  - Candlestick or reversal signal must confirm
  - Filters may block trades if conditions not met (ADX, etc.)
- Exit Logic:
  - VWAP reversion
  - Stop-loss at 1.5%
  - Max duration: 45 minutes (via monitoring timer)
- Shorting:
  - Based on `SHORT_TYPE_MID` (InverseETF, LongPut, ShortSell, or disabled)
- Enhancements:
  - `adx_filter.py` (skip trades if ADX > 25)
  - `bollinger_confluence.py` (require 2 std dev confluence)
- Logging:
  - `mid_live.log` or `mid_paper.log`
  - `trade_history_*.csv` and `*.json`
  - GnuCash XML export via `gnu_exporter.py`

-----------------------------------------
Strategy: strategy_close.py – EOD Momentum / Fade
-----------------------------------------

- Time Window:
  - Starts at `START_TIME_CLOSE`
  - Uses `CLOSE_ANALYSIS_TIME` for signal evaluation
  - Trades monitored for `CLOSE_MONITORING_TIME`
- Trade Direction: Long or Bearish
- Entry Logic:
  - Continuation (momentum) if aligned with session trend
  - Fade if large reversal signal appears late day
  - VIX-based filter applies: skip if VIX < `STRAT_CLOSE_VIX_THRESHOLD`
- Exit Logic:
  - Stop-loss at 2%
  - Hard exit 5 minutes before market close
- Shorting:
  - Based on `SHORT_TYPE_CLOSE` (LongPut, InverseETF, etc.)
- Enhancements:
  - `vix_gatekeeper.py`, `imbalance_scanner_ibkr.py`, `ticker_blocklist.py`
- Logging:
  - `close_live.log` or `close_paper.log`
  - `gnu_*.gnucash`, `trade_history_*.json`, daily summaries

Strategy Failover:
- If any strategy fails `.self_check()`, it will not run and an error will be logged
- Override logic in `.env_bot` can be used to run only one strategy:
  - Example: `STRATEGY_OVERRIDE=mid`



==============================
Runtime Modes
==============================

TradeBot supports two execution modes, controlled via the `TEST_MODE` flag in `.env_bot`. These modes share the same strategy logic but differ in how trades are routed, logs are written, and filters are enforced.

A third override behavior exists via `FORCE_PAPER_EXPORT=true`, which forces **all trade outputs** (including live trades) to write to `_paper` logs and `gnu_paper.gnucash`, regardless of `TEST_MODE`.

-----------------------------------------
TEST_MODE=true
-----------------------------------------

Purpose:
- Used to validate broker connectivity, logging, and GnuCash exports via real paper APIs without risking capital.

Behavior:
- Trades routed through paper APIs:
  - `ALPACA_MODE=paper`
  - `IBKR_MODE=paper`
- Runtime durations are shortened for validation:
  - `OPEN_ANALYSIS_TIME=1`
  - `OPEN_MONITORING_TIME=1`
  - Same for mid and close strategies
- Filters disabled:
  - Volume, spread, volatility ignored
- Outputs:
  - `open_paper.log`, `mid_paper.log`, `close_paper.log`
  - `trade_history_paper.csv`, `trade_history_paper.json`
  - `daily_summary_paper.json`
  - `gnu_paper.gnucash`
- Logging and exports activated only if:
  - `ENABLE_LOGGING=true`
  - `GNC_EXPORT_MODE=auto`

Restrictions:
- Must **never** write to:
  - `gnu_live.gnucash`
  - Any `_live` logs, even accidentally

-----------------------------------------
TEST_MODE=false
-----------------------------------------

Purpose:
- Full production mode with capital exposure and complete risk systems enabled.

Behavior:
- Trades routed through live APIs:
  - `ALPACA_MODE=live`
  - `IBKR_MODE=live`
- Runtime durations and filters fully enforced:
  - `*_ANALYSIS_TIME`, `*_MONITORING_TIME`
  - Volume, slippage, spread limits enforced
- Outputs:
  - `open_live.log`, `mid_live.log`, `close_live.log`
  - `trade_history_live.csv`, `trade_history_live.json`
  - `daily_summary_live.json`
  - `gnu_live.gnucash`
- Logging and export behavior same as TEST_MODE, gated by:
  - `ENABLE_LOGGING=true`
  - `GNC_EXPORT_MODE=auto`

-----------------------------------------
FORCE_PAPER_EXPORT=true
-----------------------------------------

Purpose:
- Routes all logs and ledger exports to paper-mode outputs, even in live mode.
- Useful for testing new strategy logic or broker APIs in production without corrupting live books.

Behavior:
- Does **not** affect which broker is used for trade routing
  - You may still place real trades (e.g., `IBKR_MODE=live`)
- But:
  - All `.log`, `.csv`, `.json` files are saved as `_paper`
  - `gnu_paper.gnucash` is written instead of `gnu_live.gnucash`
- Overrides TEST_MODE during export
- Strategy logs and GnuCash exports still require:
  - `ENABLE_LOGGING=true`
  - `GNC_EXPORT_MODE=auto`

Example:
If `TEST_MODE=false` but `FORCE_PAPER_EXPORT=true`:
- Real trades are executed via live broker
- But logs and GnuCash entries are routed to paper output files for isolation

This setting is ideal for confirming behavior on production accounts without writing to official accounting records.



==============================
Capital Risk Controls
==============================

All capital risk controls are defined in `.env_bot` and enforced in real-time by `risk_bot.py`, `kill_switch.py`, and strategy logic.

Each position is evaluated before entry and monitored continuously through its lifecycle. These controls are independent of the strategy used.

-----------------------------------------
MAX_RISK_PER_TRADE
-----------------------------------------
Variable: `MAX_RISK_PER_TRADE`
- Defines the maximum allowable risk for a single trade, expressed as a fraction of total capital.
- Example: 0.025 means 2.5% maximum risk per position.
- Exceeding this threshold prevents order placement.

-----------------------------------------
MAX_OPEN_POSITIONS
-----------------------------------------
Variable: `MAX_OPEN_POSITIONS`
- Caps the total number of positions that may remain open concurrently across all strategies.
- Prevents portfolio overexposure or capital lock-up during high signal frequency.

-----------------------------------------
TOTAL_ALLOCATION
-----------------------------------------
Variable: `TOTAL_ALLOCATION`
- Represents the total fraction of capital allowed to be deployed across all trades in a single strategy session.
- This value is redistributed dynamically based on the number of trades triggered, using the `WEIGHTS` variable.

-----------------------------------------
MAX_TRADES + WEIGHTS
-----------------------------------------
Variables: `MAX_TRADES`, `WEIGHTS`
- Defines how TOTAL_ALLOCATION is split among trades if multiple signals trigger.
- `WEIGHTS` must contain the same number of values as `MAX_TRADES`.
- Example: If `MAX_TRADES=4` and `WEIGHTS=0.4,0.2,0.2,0.2`:
  - 1 signal → 100% of TOTAL_ALLOCATION
  - 2 signals → 60% / 40%
  - 3 signals → 40% / 30% / 30%
  - 4 signals → 40% / 20% / 20% / 20%

-----------------------------------------
DAILY_LOSS_LIMIT
-----------------------------------------
Variable: `DAILY_LOSS_LIMIT`
- If cumulative realized losses exceed this percentage of total capital, trading halts automatically.
- `kill_switch.py` is triggered and prevents further orders.
- Live sessions will terminate or lock until the following day.

-----------------------------------------
Enforcement Modules
-----------------------------------------
- `risk_bot.py`: Prevents oversize trades or violations of any above settings
- `kill_switch.py`: Monitors realized PnL and triggers shutdown when `DAILY_LOSS_LIMIT` is breached
- `watchdog_bot.py`: Will also disable execution if API or order latency crosses thresholds

All risk controls apply equally to TEST_MODE and LIVE MODE; the only difference is whether trades are simulated (`paper`) or executed (`live`).

==============================
Strategy Modules (Unified Format)
==============================

Each strategy module operates independently and is triggered according to its `START_TIME_*` value in `.env_bot`.

All time values are UTC.

Strategy behavior, allocation logic, enhancements, and shorting rules are modular, toggleable, and fully configurable using `.env_bot` variables.

Each strategy is only executed if its corresponding master toggle is enabled:

- `STRAT_OPEN_ENABLED=true`
- `STRAT_MID_ENABLED=true`
- `STRAT_CLOSE_ENABLED=true`

If any of these are set to false, the strategy will be skipped automatically by `strategy_router.py` before initialization.

-----------------------------------------
strategy_open.py – Opening Range Breakout
-----------------------------------------

START_TIME_OPEN: 14:30 UTC (9:30 AM EST)  
ANALYSIS WINDOW: `OPEN_ANALYSIS_TIME`  
MONITORING WINDOW: `OPEN_MONITORING_TIME`  
SHORTING: Disabled (`SHORT_TYPE_OPEN=disabled`)  
ENABLED: Controlled by `STRAT_OPEN_ENABLED`

- Tracks price range for first `OPEN_ANALYSIS_TIME` minutes after market opens.
- If price breaks above high (or below low) by more than `STRAT_OPEN_BUFFER`, triggers a trade.
- Volume check required (skipped in TEST_MODE).
- Direction: Long only
- Instrument: Stock or ETF
- Enhancements: None (core breakout logic only)
- Exit: 2% stop loss or end of `OPEN_MONITORING_TIME`

LOG OUTPUT:
- `open_live.log` / `open_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`

-----------------------------------------
strategy_mid.py – VWAP Mean Reversion
-----------------------------------------

START_TIME_MID: 15:30 UTC (10:30 AM EST)  
ANALYSIS WINDOW: `MID_ANALYSIS_TIME`  
MONITORING WINDOW: `MID_MONITORING_TIME`  
SHORTING: Allowed if `SHORT_TYPE_MID` = `InverseETF`  
ENABLED: Controlled by `STRAT_MID_ENABLED`

- Tracks price deviation from VWAP of ±`STRAT_MID_VWAP_THRESHOLD`.
- Identifies reversal signals (candlestick or momentum).
- Optional enhancements:
  - `adx_filter.py`: Skip trades when ADX > 25 (strong trend)
  - `bollinger_confluence.py`: Require Bollinger touch confirmation
- Direction: Long or bearish (via inverse ETF only)
- Instrument: Stock or Inverse ETF
- Exit: VWAP touch, timeout, or 1.5% stop loss

LOG OUTPUT:
- `mid_live.log` / `mid_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`

-----------------------------------------
strategy_close.py – End-of-Day Momentum/Fade
-----------------------------------------

START_TIME_CLOSE: 19:30 UTC (2:30 PM EST)  
ANALYSIS WINDOW: `CLOSE_ANALYSIS_TIME`  
MONITORING WINDOW: `CLOSE_MONITORING_TIME`  
SHORTING: Allowed if `SHORT_TYPE_CLOSE` = `LongPut` or `InverseETF`  
ENABLED: Controlled by `STRAT_CLOSE_ENABLED`

- Determines whether to follow momentum or fade signal based on market context.
  - Momentum: Continue trend
  - Fade: Reverse late-day spike
- Requires VIX filter (`STRAT_CLOSE_VIX_THRESHOLD`) for entry
- Optional enhancements:
  - `imbalance_scanner_ibkr.py`: Reads IBKR imbalance feed (if broker = ibkr)
  - `ticker_blocklist.py`: Prevents duplicate trades on same symbol
  - `vix_gatekeeper.py`: Skips strategy if VIX < threshold
- Direction: Long or bearish (via long puts or inverse ETFs)
- Exit: 2% stop loss or end of `CLOSE_MONITORING_TIME`

LOG OUTPUT:
- `close_live.log` / `close_paper.log`
- GnuCash: `gnu_live.gnucash` or `gnu_paper.gnucash`
- Trade History: `trade_history_*.csv/json`

Strategy Failover:
- If any strategy fails `.self_check()`, it will not run and an error will be logged
- Override logic in `.env_bot` can be used to run only one strategy:
  - Example: `STRATEGY_OVERRIDE=mid`





==============================
Strategy Allocation Clarification
==============================


Overview:
TradeBot allocates capital dynamically based on the number of valid trade signals returned by each strategy. The logic ensures that total capital exposure respects the configured limits while maximizing potential opportunity.

Total Capital Limit:
- Variable: TOTAL_ALLOCATION
- Example: 0.02 = 2% of total account capital available to that strategy window
- This value is split across multiple trades using WEIGHTS if more than one signal passes the filters

Maximum Trades:
- Variable: MAX_TRADES
- Defines the max number of trades that can be placed during a strategy window (e.g., 4)

Trade Weighting:
- Variable: WEIGHTS
- Format: comma-separated list matching MAX_TRADES
- Example: 0.4,0.2,0.2,0.2 (used if all 4 trades pass filters)

Allocation Behavior:
The bot dynamically adapts capital allocation if fewer trades qualify:

- 1 trade: 100% of TOTAL_ALLOCATION
- 2 trades: 60% / 40%
- 3 trades: 40% / 30% / 30%
- 4 trades: 40% / 20% / 20% / 20% (default weights)

This ensures that high-confidence signals receive more capital, and weak or borderline signals are deprioritized or skipped.

Implementation:
- Logic handled inside `risk_bot.py` and `reporting_bot.py`
- Trade size is determined using available buying power and selected weight
- All allocations respect MAX_OPEN_POSITIONS and FRACTIONAL settings

Edge Case Handling:
- If fewer than expected trades pass all filters, unallocated capital is held in reserve
- Trade weight list is truncated dynamically to match number of qualifying entries
- If weights are misconfigured or total > 1.0, `env_bot.py` will raise a validation error

Best Practice:
Use realistic weights and limit MAX_TRADES based on broker rules and personal risk tolerance



- Fails early if critical files are missing or invalid.

==============================
Logging & Reporting Format
==============================

TradeBot writes structured output files during every session for use in audits, dashboards, backtests, and ledger exports. All filenames are split into `_live` and `_paper` variants based on TEST_MODE.

Log Mode Switching
------------------------------
Variable: TEST_MODE (from .env_bot)
- true  → writes to `_paper` log/ledger files
- false → writes to `_live` files

Variable: LOG_FORMAT (from .env_bot)
- csv   → flat human-readable logs
- json  → structured logs (recommended for programmatic use)

Primary Log Files
------------------------------
All strategy logs and trade history files follow the naming structure:

  open_live.log / open_paper.log            # Strategy: Opening Range Breakout  
  mid_live.log / mid_paper.log              # Strategy: VWAP Mean Reversion  
  close_live.log / close_paper.log          # Strategy: End-of-Day Momentum/Fade  

  trade_history_live.csv / trade_history_paper.csv  
  trade_history_live.json / trade_history_paper.json  

  unresolved_orders_live.log / unresolved_orders_paper.log  
  daily_summary_live.json / daily_summary_paper.json  

Each file is written by `reporting_bot.py` or `logs_bot.py` and stored in `tbot_bot/` or routed through `/logs/bot/live/` or `/logs/bot/paper/` for runtime staging and archival by `auto_backup.py`.

Required Fields in trade_history_*.json (if LOG_FORMAT=json)
------------------------------
- timestamp          → ISO 8601 UTC timestamp  
- strategy_name      → open, mid, close  
- ticker             → Stock or ETF symbol  
- side               → long or short  
- size               → number of shares or contracts  
- entry_price        → float  
- exit_price         → float  
- PnL                → profit/loss (positive = black, negative = red)  
- broker             → e.g., alpaca, ibkr  
- mode               → paper or live  
- error_code         → optional; only if rejected, failed, or partial  

Log File Notes
------------------------------
- Trade logs (`trade_history_*.json/csv`) are never re-imported into GnuCash. They serve as human- and machine-readable audit files.  
- `unresolved_orders_*.log` contains raw error responses, partial fills, and broker exceptions.  
- `daily_summary_*.json` summarizes the session with:
  - total trades  
  - total PnL  
  - win/loss ratio  
  - average fill time  
  - most/least profitable trade  
  - signals triggered by each strategy  
- **Log rotation:** While logs are not automatically rotated by size, the `auto_backup.py` script compresses and archives logs at the end of each session. This prevents excessive growth in the `/logs/` directory. All rotated archives are timestamped and stored in `/backups/`.

GnuCash Ledger Routing
------------------------------
Based on TEST_MODE:

- TEST_MODE=true  → `gnu_paper.gnucash` ledger is updated  
- TEST_MODE=false → `gnu_live.gnucash` ledger is updated  

The export sequence is triggered automatically via `reporting_bot.py`, which sends executed trades to:

1. `gnu_exporter.py` → loads trade metadata  
2. `gnu_transaction.py` → builds GnuCash-compliant XML entries  
3. `gnu_config.py` → ensures correct account mapping  
4. `gnu_backup.py` → creates a timestamped backup in `/backups/`  

No .json or .csv logs are re-parsed or imported into the ledger. All exports are performed directly through memory using current strategy session state.

Use Cases
------------------------------
- Compliance audit trail  
- Dashboards or real-time monitoring  
- Backtest vs. live comparison  
- Trade reconstruction


==============================
GnuCash Integration
==============================

Overview:
TradeBot generates double-entry ledger files compatible with GnuCash using custom XML exporters. Each trade execution triggers an update to either `gnu_live.gnucash` or `gnu_paper.gnucash` based on TEST_MODE.

Ledger Files:
- gnu_live.gnucash   → used when TEST_MODE=false
- gnu_paper.gnucash  → used when TEST_MODE=true

GnuCash Files Are:
- Updated in real time after each confirmed trade
- Never overwritten—backups are made before each write
- Not used for re-import or logic flow—they are strictly for audit, tax, and sync-to-company-books

Export Process:
Triggered by `reporting_bot.py` when a trade is confirmed. The following modules are involved:

1. `gnu_exporter.py`
   - Orchestrates the XML generation process
   - Receives trade record and calls the appropriate handlers

2. `gnu_transaction.py`
   - Builds XML blocks for:
     - Account splits
     - Transaction metadata
     - Profit/loss entries
     - Fee allocation

3. `gnu_config.py`
   - Maps trade data into GnuCash’s Chart of Accounts structure
   - Enforces category separation:
     - Assets > Holdings > {Equity, Puts, Inverse ETFs}
     - Income > Realized Gains
     - Expenses > Trade Fees
     - Equity > Retained Earnings

4. `gnu_backup.py`
   - Creates a timestamped backup of the `.gnucash` file in `/backups/`
   - Backup filenames follow the convention:
     - `gnu_live_YYYYMMDD_HHMMSS.gnucash`
     - `gnu_paper_YYYYMMDD_HHMMSS.gnucash`

Example Entry Flow:
- A long equity trade in strategy_mid.py results in:
  - Entry in Assets > Holdings > Long Equity
  - Profit recorded in Income > Realized Gains > Equity
  - Fees deducted from Expenses > Trade Fees
  - Balancing split routed to Equity > Retained Earnings

Internal Chart of Accounts:
Assets
├── Cash
├── Holdings
│   ├── Long Equity
│   ├── Long Put Options
│   └── Inverse ETFs

Income
├── Realized Gains
│   ├── Equity
│   ├── Puts
│   └── Inverse ETFs

Expenses
└── Trade Fees

Equity
└── Retained Earnings

Export Behavior Rules:
- TEST_MODE=true
  → All trades routed to `gnu_paper.gnucash`
  → Volume/slippage ignored, export used for structure validation only

- TEST_MODE=false
  → All trades routed to `gnu_live.gnucash`
  → Export must succeed after each live trade to maintain compliance and sync integrity

- Export skips if `GNC_EXPORT_MODE=off` in `.env_bot`
  → Set to `auto` (default) to enable normal export behavior

- No exports are ever derived from .csv or .json files

Sync Note:
`sync_to_company_books.py` (optional, in `/scripts/`) can be used to extract summaries from gnu_live.gnucash and update your main company ledger.

GnuCash Export is considered mission-critical and must pass all self_check() diagnostics prior to trade execution in live mode.


==============================
Enhancement Module Activation
==============================

Overview:
TradeBot includes modular enhancements that can refine signal quality, block trades under poor conditions, or perform startup diagnostics. These are located in `/tbot_bot/enhancements/` and operate as plug-ins—each designed to activate automatically based on strategy context or `.env_bot` configuration.

All enhancements are:
- Independently testable
- Compatible with both TEST_MODE and live mode
- Invoked automatically from `strategy_router.py` or within individual strategy files

Behavior & Integration:
- Each enhancement returns a simple boolean (`True` = allow trade, `False` = block trade)
- If any enhancement fails (e.g., due to missing data), the strategy logs a warning and proceeds with core logic—unless a fatal error is raised

Enhancement Modules
------------------------------

1. adx_filter.py – Trend Strength Filter
----------------------------------------
Purpose:
- Blocks mean reversion trades when ADX > 25 (indicating a strong trend)

Applies to:
- strategy_mid.py

Trigger:
- Always-on (future toggle: `ADX_FILTER_ENABLED=true` in `.env_bot`)

Notes:
- Skips VWAP entries during trending markets

2. bollinger_confluence.py – Volatility Confirmation
-----------------------------------------------------
Purpose:
- Requires price to touch or exceed ±2 standard deviations on Bollinger Bands

Applies to:
- strategy_mid.py

Trigger:
- Inline call in strategy_mid.py; may be toggleable in future builds

Notes:
- Reduces false positives in flat or low-volatility conditions

3. vix_gatekeeper.py – Volatility Threshold Lockout
----------------------------------------------------
Purpose:
- Prevents trades if VIX is below configured minimum

Applies to:
- strategy_close.py

Trigger:
- Compares real-time VIX against `STRAT_CLOSE_VIX_THRESHOLD` in `.env_bot`

Notes:
- Helps avoid EOD trades during complacent market conditions

4. imbalance_scanner_ibkr.py – Order Book Pressure Monitor
-----------------------------------------------------------
Purpose:
- Reads Interactive Brokers imbalance data between 20:30–21:00 UTC

Applies to:
- strategy_close.py

Trigger:
- Active only when `BROKER=ibkr`

Notes:
- Blocks late-day trades if strong opposing imbalance is detected (IBKR market data subscription required)

5. ticker_blocklist.py – One Trade Per Ticker Per Day
------------------------------------------------------
Purpose:
- Prevents repeat trades on the same ticker during a single session

Applies to:
- All strategies

Trigger:
- Always-on (no toggle)

Notes:
- Tracks traded symbols in memory or temp file

6. build_check.py – Pre-Launch System Verifier
----------------------------------------------
Purpose:
- Verifies all required files, paths, and variables before runtime

Applies to:
- Called once at startup by `main_bot.py` or via CLI

Checks:
- Presence of `.env`, `.env_bot`, `.gnucash` files
- Writable paths and initialized log files
- Placeholder outputs for first run

Fail Behavior:
- Halts the bot if any check fails

Best Practices:
---------------
- Keep all enhancements decoupled from strategy core logic
- Add toggles in `.env_bot` only if dynamic enable/disable behavior is needed
- Use enhancements to prevent poor trades, not as signal generators







==============================
Safety Systems
==============================

Overview:
TradeBot includes multiple layered safety systems to prevent losses, mitigate risk, and ensure fault-tolerant behavior. These systems are enforced regardless of TEST_MODE or broker configuration.

Modules:

1. kill_switch.py
   - Automatically halts the bot if cumulative daily losses exceed the `DAILY_LOSS_LIMIT` specified in `.env_bot`
   - Shuts down all strategy modules and logs the trigger event
   - Prevents further trades until the next session

2. watchdog_bot.py
   - Monitors API availability and response times for:
     - Broker (ALPACA_MODE or IBKR_MODE)
     - Market data (Finnhub)
   - If any API becomes unreachable or unresponsive:
     - Logs the failure
     - Cancels open orders
     - Gracefully shuts down the bot

3. risk_bot.py
   - Evaluates every proposed trade against the following constraints:
     - `MAX_RISK_PER_TRADE`
     - `TOTAL_ALLOCATION`
     - `MAX_OPEN_POSITIONS`
   - If any rule is violated, the trade is blocked and the reason is logged

4. error_handler.py
   - Global exception manager
   - Categorizes errors into:
     - NetworkError
     - BrokerError
     - LogicError
     - ConfigError
   - Logs full traceback and metadata to:
     - `unresolved_orders_live.log` or `unresolved_orders_paper.log`
   - For critical errors:
     - Sends alert via `notifier_bot.py`
     - May trigger kill_switch if severity exceeds threshold

5. security_bot.py
   - Manages encryption and secure storage of `.env_bot`
   - Only decrypts the environment file if valid `ENCRYPTION_KEY` is provided in the root `.env`
   - Prevents use of plaintext trading credentials in production

Hard Shutdown Behavior:
- If any of the above modules raise a fatal error or threshold is breached:
  - Open trades are exited if possible
  - The bot writes a final `daily_summary_*.json` log
  - Email or Slack alert is sent (if enabled)

All safety modules must pass their respective `self_check()` validations before strategy execution begins. Failing any check will prevent trading activity.



==============================
Secure Environment Variables
==============================

Overview:
TradeBot separates its runtime configuration into two environment files:
- `.env` contains broker credentials, API keys, encryption keys, and SMTP credentials.
- `.env_bot` defines trading logic, timing, strategy settings, and risk controls.

Security Goals:
- Never expose `.env_bot` contents in plaintext on shared systems.
- Ensure only validated and decrypted variables are loaded during runtime.
- Allow encrypted deployment on remote servers (e.g., DigitalOcean) without exposing raw configuration.

Encryption System:
- `.env_bot` is encrypted using AES-256 via the `cryptography` module.
- The encrypted version is saved as `.env_bot.enc`.
- The decryption key is defined in the global `.env` file under:
  ENCRYPTION_KEY="your-256-bit-key"

Required Files:
- `security_bot.py`: Handles encryption and decryption of the `.env_bot` file.
- `generate_key.py`: One-time use script to generate a strong AES-256 key.
- `encrypt_password.py`: CLI tool to encrypt login credentials for the web interface.

Encryption Workflow:
1. Create a plaintext `.env_bot` file and populate it with all required variables.
2. Run `security_bot.py encrypt` to generate `.env_bot.enc`.
3. Store the `ENCRYPTION_KEY` securely inside `.env` (never commit to GitHub or version control).
4. During runtime, `env_bot.py` will:
   - Load and decrypt `.env_bot.enc` using the key from `.env`
   - Validate all keys and raise readable errors if any are missing or malformed

Manual Encryption Example:
  python tbot_bot/security_bot.py encrypt

Manual Decryption Example (for debugging):
  python tbot_bot/security_bot.py decrypt

Security Notes:
- Never include `.env_bot` or `.env_bot.enc` in version control or build packages.
- Use `.scpignore` and `.gitignore` to exclude these files.
- Encrypted files should only be decrypted in memory or on secure systems.

Best Practices:
- Always test decryption and validation on a staging environment before deploying to production.
- Rotate keys if deployment environments or personnel change.
- Log failed decryptions or missing variables to `unresolved_orders_*.log`.

Recovery:
If `.env_bot.enc` becomes corrupted or the encryption key is lost:
- Use the latest `.env_bot` backup from the `/backups/` folder
- Re-encrypt using `security_bot.py`





==============================
Centralized Error Management
==============================

Overview:
TradeBot uses a centralized error handling system to monitor and manage failures during runtime across all modules. The `error_handler.py` module ensures that critical issues are logged, reported, and escalated appropriately — preventing silent failures or inconsistent state.

Module: `tbot_bot/error_handler.py`

Capabilities:
- Captures and categorizes exceptions from:
  - Strategy modules (e.g. logic errors, data type mismatches)
  - Broker interface modules (`broker_api.py`, `broker_ibkr.py`, etc.)
  - Utility and infrastructure modules (`reporting_bot.py`, `risk_bot.py`, etc.)

- Error Classification:
  - `NetworkError`: API connectivity issues, timeouts, DNS failures
  - `BrokerError`: Order rejection, margin issues, invalid asset classes
  - `LogicError`: Runtime logic issues or invalid config values
  - `ConfigError`: Missing keys or improperly formatted values in `.env_bot`

- Logging Behavior:
  - All errors are written in structured format to:
    - `unresolved_orders_live.log` or `unresolved_orders_paper.log` (based on `TEST_MODE`)
    - Format: JSON or CSV depending on `LOG_FORMAT`
  - Fields:
    - `timestamp`
    - `strategy_name`
    - `broker`
    - `error_type`
    - `error_code` (optional)
    - `raw_exception` (full stack trace, truncated to prevent log overflow)

- Retry & Fallback:
  - Implements exponential backoff retry logic for transient failures (e.g. temporary API downtime)
  - If retry fails after `API_RETRY_LIMIT`, error is escalated and logged

- Notification System:
  - For critical errors or unresolved rejections, triggers alert via `notifier_bot.py`
  - Alerts include timestamp, error summary, strategy context, and broker info
  - Alert channels defined via SMTP settings in `.env`

- Kill Switch Integration:
  - On detection of unrecoverable error conditions:
    - Invokes `kill_switch.py` to halt further trades
    - Ensures clean shutdown and logs the shutdown reason to `logs_bot.py`

- Optional Integration:
  - Can be linked to `status_web.py` and `logs_web.py` to show error status via dashboard
  - Failsafe behavior should never rely on frontend modules — operates fully headless

Usage Notes:
- Must be imported and initialized in `main_bot.py` and reused across all critical modules
- When possible, all exceptions should be wrapped and passed to `error_handler.handle()` with appropriate classification tags
- Ensures maximum transparency and auditability of all failed or skipped trades


==============================
Backtesting Framework
==============================

Overview:
To ensure robustness and validate strategy logic before deployment, TradeBot includes a complete historical backtesting engine. This framework simulates trades using historical data and provides actionable performance metrics.

Module:
- backtest_engine.py

Features:
- Simulates historical trades using the same strategy logic found in:
  - strategy_open.py
  - strategy_mid.py
  - strategy_close.py
- Loads minute-level OHLCV data via load_historical_data.py
- Bypasses live broker APIs; trades are simulated internally
- Compatible with both CSV and JSON output formats
- Results are stored in a subfolder such as backtest_results/
- Reuses all logic and environment variables from .env_bot

Performance Metrics (via performance_metrics.py):
- Win Rate (%)
- Maximum Drawdown
- Average Trade Duration
- Average PnL per trade
- Sharpe Ratio

Charts & Reports:
- Visualize equity curve, drawdown, and entry/exit points using plot_results.py

Command-Line Interface:
Run from the root of tbot_bot/ using:
python backtest/backtest_engine.py --strategy=open --start=2023-01-01 --end=2023-12-31 --data_source=./historical_data/open_ohlcv.csv

Runtime Configuration:
- All parameters (allocation, thresholds, filters) are pulled from .env_bot
- TEST_MODE logic is automatically assumed (no real trades)
- Filters (e.g., volume, price) may be toggled manually for analysis

Supported Strategies:
- open, mid, close — must be listed in STRATEGY_SEQUENCE
- Each strategy must support a .simulate() method or equivalent backtest logic

Ledger Output:
- Trade logs generated during backtests will be written to:
  - trade_history_backtest.csv
  - trade_history_backtest.json
  - daily_summary_backtest.json
- These do not modify live or paper GnuCash ledgers
- GnuCash XML export is not used during backtesting

Logging Format:
All simulated trade logs follow the same structure as live/paper runs:
- timestamp
- strategy_name
- ticker, side, size
- entry_price, exit_price, PnL
- mode=backtest

Notes:
- The backtest engine is sandboxed and stateless.
- It is a required step before any live trading session begins for a new strategy.
- Does not depend on tbot_api/ or tbot_web/.




==============================
Testing and Validation Suite
==============================

Overview:
A robust testing framework ensures that all TradeBot logic executes as expected across strategies, environments, and runtime modes. The following tools, test files, and logic gates are implemented to support validation prior to any live deployment.

Testing Directory Structure:
Located in: `tbot_bot/tests/`

Files:
- `test_main_bot.py` – Verifies lifecycle loop, strategy routing, and logger integrity.
- `test_env_bot.py` – Confirms full variable coverage, validation errors, and defaults in `.env_bot`.
- `test_backtest_engine.py` – Runs simulated trades on sample historical data and verifies consistency with execution rules.
- `integration_test_runner.py` – Launches end-to-end simulation of a trading session (TEST_MODE only).

Framework:
- All tests use `pytest` and must be runnable via CLI or CI/CD pipeline.
- Tests are modular and can be run individually or in batches.
- Output formats are compatible with `--junitxml` and CI test reporters.

Example Test Command:
  pytest tbot_bot/tests/

Integration Test Workflow:
1. Loads a simulated `.env_bot` test config
2. Launches `main_bot.py` using `TEST_MODE=true`
3. Injects historical price data using mocks or patched inputs
4. Runs `start_bot.py` in dry-run mode
5. Verifies:
   - Strategy execution order (based on `STRATEGY_SEQUENCE`)
   - Log generation to correct `_paper` files
   - GnuCash export logic (`gnu_exporter.py`)
   - Proper handling of signals, triggers, and errors
6. Asserts trade integrity and structure of all logs and exports

CI Compatibility:
- Compatible with GitHub Actions, GitLab CI, or local test runners.
- All test scripts and outputs are headless (no GUI, web UI, or API calls required).
- Custom `.env_bot.test` config files may be loaded during CI runs with overrides.

Requirements:
- Python 3.11+
- `pytest`, `pydantic`, and all packages listed in `requirements.txt`

Test-Mode Enforcement:
- `integration_test_runner.py` MUST only run with `TEST_MODE=true`
- All trade outputs are written to `*_paper` logs only
- Test failures are captured and printed to stdout/stderr immediately

Version Compliance:
- `test_env_bot.py` must validate that `.env_bot["VERSION_TAG"]` matches `VERSION.md`
- Build is considered invalid if the tags are mismatched

Recommended Additions (Optional):
- `test_gnu_exporter.py`: Verify XML structure, account mappings, and compliance
- `test_logging_format.py`: Validate JSON structure matches schema
- `test_strategy_selfcheck.py`: Confirm `.self_check()` returns `True` across all strategies


==============================
Real-Time Monitoring Dashboard
==============================

Overview:
The web interface provided by `tbot_web/` includes a live dashboard designed to monitor bot operations, active positions, and key runtime metrics. This dashboard operates independently of trading logic and is updated via background tasks and lightweight API polling.

Purpose:
- Provides remote visibility into trading activity and system health
- Allows real-time monitoring without compromising headless operation
- Offers read-only observability and does not affect core strategy execution

Metrics to Display:
- Current active strategy (`strategy_open.py`, `strategy_mid.py`, `strategy_close.py`)
- Scheduled and actual UTC start times from `.env_bot`
- Number of trades signaled, entered, exited
- Real-time P&L (per position and cumulative)
- Active positions (ticker, size, entry price, current price, unrealized PnL)
- Broker connectivity and API status (`watchdog_bot.py`)
- System state: idle, analyzing, trading, shutdown
- API retry count or recent error summary
- Test mode indicator (true/false)

Frontend Components:
- `status.html`: Live strategy state and performance metrics
- `logs.html`: Stream of major log events, alerts, and errors
- `main.html`: Container layout for dashboard navigation
- `index.html`: Login portal (encrypted via `auth.py`)

Backend Modules:
- `status_web.py`: Streams live data from `status_bot.py` to frontend
- `logs_web.py`: Exposes recent log snapshots
- `start_stop_web.py`: Optional lifecycle control from web UI
- `main_web.py`: FastAPI router for web interface
- `login_web.py`: Handles user authentication

Implementation Details:
- Data is updated either via WebSockets or async polling via FastAPI
- Web layer relies on `.env` credentials for login and encrypted session management
- Supports read-only mode for secure deployments (no trading control exposed)

Security:
- Login attempts are rate-limited via SlowAPI
- Failed login attempts are written to `logs/web/auth_failures.log`
- Successful access is logged to `logs/web/access.log`

Important Notes:
- The dashboard is optional and not required for bot functionality
- All logic must remain functional even if `tbot_web` is disabled or unreachable
- Can be monitored from desktop, tablet, or mobile device in low-bandwidth environments




==============================
Final Build Checklist
==============================

This checklist ensures all components of TradeBot are complete, validated, and safe for production use. Every item must be confirmed prior to launching live trades.

Configuration
-------------
- `.env` is present, fully populated with API keys, encryption key, SMTP config.
- `.env_bot` is present and fully validated by `env_bot.py` on startup.
- All variables (including per-strategy timing and shorting) are populated with meaningful values.
- Version tag in `.env_bot` matches top-level `VERSION.md`.

Environment Parsing
-------------------
- `env_bot.py` enforces full schema validation and halts on missing keys.
- `.env_bot.template` is generated and matches current variable structure and inline comments.

Core Runtime Logic
------------------
- `main_bot.py` loads strategy sequence from `STRATEGY_SEQUENCE`.
- Each strategy module exposes `self_check()` and passes with current configuration.
- Trade execution is gated behind runtime flags, volume checks, and slippage thresholds.

Logging
-------
- All logs route to `_live` or `_paper` folders/files based on `TEST_MODE`.
- Log entries contain full metadata: timestamp, ticker, side, size, prices, strategy, broker, mode.
- Log paths match `logs/bot/live/`, `logs/bot/paper/` (staged) and `backups/` (archived).
- `LOG_FORMAT` applies globally across all logs (CSV or JSON).

GnuCash Ledger Export
---------------------
- Trade data is exported via `gnu_exporter.py` to either `gnu_live.gnucash` or `gnu_paper.gnucash`.
- All ledgers are pre-backed up by `gnu_backup.py`.
- Account structure and splits are validated by `gnu_transaction.py` and `gnu_config.py`.

Broker Connectivity
-------------------
- `broker_api.py` correctly routes to Alpaca or IBKR modules based on `BROKER`.
- Paper/live switching is controlled by `ALPACA_MODE` and `IBKR_MODE`.
- `watchdog_bot.py` monitors API heartbeat and halts trading on disconnection.

Safety & Shutdown
-----------------
- `kill_switch.py` halts trading if `DAILY_LOSS_LIMIT` breached.
- `risk_bot.py` blocks trades violating capital allocation rules.
- `error_handler.py` captures and logs uncaught exceptions and triggers alert if needed.
- `stop_bot.py` gracefully closes open positions and terminates runtime cleanly.

Notifications
-------------
- `notifier_bot.py` sends email on fill or exit if `NOTIFY_ON_FILL` and `NOTIFY_ON_EXIT` are enabled.
- Email relay config pulled from `.env` and testable via dummy run.

Testing & QA
------------
- Full dry-run completed with `TEST_MODE=true`
- All output files written to `_paper` variants and reviewed for accuracy
- `tests/` directory runs cleanly via `pytest`, including integration loop

Build Output
------------
- All final files printed to Code Blocks during build
- No ZIP-only distribution used
- Full version history and changes logged in `VERSION.md`

Deployment
----------
- All file paths are relative and platform-agnostic
- No hardcoded machine-dependent logic or file references
- Ready to launch from cron, CLI (`start_bot.py`), or API (`tbot_api`)































































