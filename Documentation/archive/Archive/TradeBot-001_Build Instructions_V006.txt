

Paste this into a fresh chatGPT window to kick off the build:

Please read and analyze everything in this thread. Wait for my confirmation before starting. When I say "Begin," you will start building the trading bot by generating the full and complete version of `env_bot.py`, including all inline comments and validations. Do not continue to the next file until I explicitly confirm.

Then past the following in it's entirety.




==============================
Objective
==============================


Automatically identify securities in a bi-directional manner in any market conditions, and place trades using long equity (up), and long put OR Inverse ETF (down), on any
trading platform that supports these types of trades.


==============================
System Instructions
==============================

/system

ChatGPTâ€™s long-term memory is unreliable, and OpenAI may wipe cached data or downloadable files without warning.

To prevent loss of critical project data during development:

1. Print the full contents of every file from provided ZIP archives in a series of chat windows before performing any deep analysis.
2. Write a comprehensive summary of necessary fixes, along with a clear list of tasks required to build a fully functional stock trading bot.
3. Except for login authentication handled via `index.html` and `tbot_api`, all modules must remain independent, self-contained, and fully operational on their own.
4. Print all generated or modified code in full to the chat windowâ€”no diffs or summaries.
5. Include clear inline comments in every script to explain purpose and logic.
6. If a file needs to be rebuilt, regenerate and display the full content in the chat.
7. Once development is complete, print all final files to individual chat windows before ZIP archive creation.
8. When testing or debugging, make no assumptionsâ€”no code is abridged, modified or pruned without explicit user instruction.
9. During testing, give the human operator one step at a time. Wait for confirmation before continuing.
10. Before placing trades, execute a dry-run using live data with no order execution; log all signals per strategy.
11. Generate a `.env_bot.template` file with all required keys, default/example values, and inline comments.
12. Include `strategy_name` in all trade logs and GnuCash exports.
13. Each strategy must expose a `self_check()` method to confirm runtime readiness.
14. Print a version banner on startup using `version.py`.
15. `env_bot.py` must validate all keys and raise readable config errors if any are missing.
16. Don't use emojis

==============================
Deployment Notes
==============================

- All paths must be relative and platform-agnostic.
- Logging and GnuCash export must work even if tbot_api or tbot_web are disabled.
- During first deployment, enable only one broker (Alpaca or IBKR) to simplify troubleshooting.
- All real-money trades must be preceded by volume + slippage checks.
- Bot must never trade tickers with spreads > 1.5% of price or with 0 bid/ask liquidity.
- Prevent overwriting trade logs or ledger exports unless `GNC_EXPORT_MODE=off`.


==============================
Current platforms
==============================

- Local testing and version control on macOS 15.2
- Production deployment on DigitalOcean droplet
- FastAPI for web/API
- SlowAPI for login rate-limiting + DDOS protection
- GnuCash for ledger generation (via XML export)
- Cryptography for .env encryption



==============================
Other considerations
==============================

API services, Bot Functionality and Web Interface should remain as Functionally Independent as possible.
Bot should be entirely self contained, and be able to function independently without need for API and Web modules.


==============================
TradeBot Strategy Logic Spec v1.0
==============================

Overview:
TradeBot will automatically identify securities and place trades in a bi-directional manner, using:
- Long equity for bullish setups
- Long put OR Inverse ETF for bearish setups
- No shorting or leveraged ETFs

Supports any broker platform with compatible APIs:
Alpaca, IBKR, Webull, Tastytrade, Robinhood

==============================
 Runtime Modes
==============================

TEST MODE:
- 1-minute analysis + 1-minute monitoring
- Skips volume filters
- Paper trades only (logged to `gnu_paper.gnucash`)
- Used for logic verification and debug

LIVE MODE:
- Full strategy execution with volume/volatility filters
- Executes via live broker APIs
- Trades logged to `gnu_live.gnucash`
- Kill switch, watchdogs, and drawdown enforcement active

==============================
Capital Risk Controls
==============================

- MAX_RISK_PER_TRADE: 2â€“3% of capital
- MAX_OPEN_RISK: All trades = max 5% capital exposure
- DAILY_LOSS_LIMIT: Auto-kill triggers if hit (default: 5%)
==============================
Strategy Modules (Unified Format)
==============================

----------------------------------------------
Strategy: strategy_open.py â€“ Opening Range Breakout
----------------------------------------------

- Time Window: 14:30â€“15:20 UTC  (corresponds to 9:30â€“10:20 AM EST)
- Direction: Long only
- Instrument: Stock or ETF
- Logic:
  - Track high/low for the first 20 minutes after market open
  - Wait for a breakout above high (or below low) with buffer zone
  - Confirm with volume before entering trade
- Capital Allocation:
  - 1 candidate = 100% of TOTAL_ALLOCATION
  - 2 = 60% / 40%
  - 3 = 40% / 30% / 30%
  - 4 = 40% / 20% / 20% / 20%
- Exit:
  - Stop loss at 2% drawdown
  - Hard exit at 15:20 UTC
- Enhancements: None (core logic only)
- Logs:
  - open.log, trade_history.csv, gnu_paper.gnucash or gnu_live.gnucash

----------------------------------------------
Strategy: strategy_mid.py â€“ VWAP Mean Reversion
----------------------------------------------

- Time Window: 15:30â€“19:30 UTC  (corresponds to 10:30 AMâ€“2:30 PM EST)
- Direction: Long or Inverse
- Instrument: Stock or Inverse ETF
- Logic:
  - Identify price deviations of Â±2% from VWAP
  - Look for reversal signals (candlestick patterns or momentum)
  - Apply optional filters based on market conditions
- Capital Allocation:
  - Maximum 5 simultaneous positions
  - Equal-weighted or prioritized based on signal strength
- Exit:
  - VWAP touch
  - 45-minute timeout
  - Stop loss at 1.5%
- Enhancements (optional):
  - adx_filter.py â€“ Skip trades when ADX > 25
  - bollinger_confluence.py â€“ Require 2 standard deviation Bollinger confluence
- Logs:
  - mid.log, trade_history.csv, gnu_paper.gnucash or gnu_live.gnucash

----------------------------------------------
Strategy: strategy_close.py â€“ EOD Momentum/Fade
----------------------------------------------

- Time Window: 19:30â€“21:00 UTC  (corresponds to 2:30â€“4:00 PM EST)
- Direction: Long or Bearish (using Inverse ETF or Long Put)
- Instrument: Stock, Inverse ETF, or Long Put
- Logic:
  - Select mode based on session trend and signal:
    - trend: Continuation breakout aligned with market trend
    - fade: Reversal or exhaustion after late-day spike
- Capital Allocation:
  - 30% to 40% of total capital
  - Focused entries on strongest signals
- Exit:
  - Stop loss at 2% drawdown
  - Hard exit at 20:55 UTC (3:55 PM EST)
- Enhancements (optional):
  - vix_gatekeeper.py â€“ Skip strategy if VIX < STRAT_CLOSE_VIX_THRESHOLD
  - imbalance_scanner_ibkr.py â€“ Activate between 20:30â€“21:00 UTC if broker = IBKR
  - ticker_blocklist.py â€“ Prevent re-trading same ticker during session
- Logs:
  - close.log, trade_history.csv, gnu_paper.gnucash or gnu_live.gnucash



==============================
ðŸ”§ Optional Enhancements (Toggleable)
==============================

- adx_filter.py â†’ Skip VWAP trades in strong trend conditions
- bollinger_confluence.py â†’ Confirm overbought/oversold areas
- vix_gatekeeper.py â†’ Skip strategy_close on low volatility
- imbalance_scanner_ibkr.py â†’ Detect large late-day order flows
- ticker_blocklist.py â†’ Prevent duplicate tickers same day
- build_check.py â†’ Validate file paths, structure, permissions

==============================
GnuCash Integration
==============================

- gnu_exporter.py â†’ Writes XML to:
    - gnu_paper.gnucash (TEST_MODE)
    - gnu_live.gnucash (LIVE_MODE)

- gnu_transaction.py â†’ Constructs XML blocks
- gnu_config.py â†’ Chart of accounts (Assets, Equity, Income)
- gnu_backup.py â†’ Pre-write daily ledger backup
- trade_history.csv â†’ Every trade, tagged with strategy + broker + result
- daily_summary.json â†’ Daily log snapshot
- unresolved_orders.log â†’ Errors and partial fills

Log Entry Format:
- timestamp, strategy_name, ticker, side, size, entry, exit, PnL, broker, mode (paper/live)


==============================
Logging & Reporting
==============================

- trade_history.csv â†’ all trades, strategies, timestamps
- open.log / mid.log / close.log â†’ individual strategy logs
- unresolved_orders.log â†’ API rejections or partials
- daily_summary.json for snapshot audit
- Each log entry should include: timestamp, strategy_name, ticker, side, size, entry/exit price, PnL, broker, mode (paper/live)
- If LOG_FORMAT=json, ensure all fields are human-readable and easily parseable by external tools (e.g., GnuCash XML, dashboards).


==============================
Safety Systems
==============================

- kill_switch.py â†’ Halts trading if loss > DAILY_LOSS_LIMIT
- watchdog_bot.py â†’ Checks API/broker status, shuts down if offline
- risk_bot.py â†’ Blocks trade if it violates allocation or exposure
- security_bot.py â†’ Optional AES encryption for .env_bot



==============================
Backtesting Framework
==============================

Overview:
To ensure the reliability and robustness of all trading strategies, a dedicated backtesting module must be implemented prior to any live deployment. This system will simulate historical trades using past market data to evaluate strategy performance, identify edge cases, and avoid overfitting.

Module: `backtest_engine.py`

Features:
- Replay historical data using minute-level OHLCV
- Use same strategy modules (e.g., `strategy_open.py`, `strategy_mid.py`)
- Output full simulated logs to `backtest_results/`
- Metrics generated: Win Rate, Max Drawdown, Avg Trade Duration, Sharpe Ratio
- Runs in TEST_MODE logic, with optional toggle for skipping volume or slippage filters

Integration:
- Command: `python backtest_engine.py --strategy=open --start=2023-01-01 --end=2023-12-31`
- Uses same `.env_bot` logic and capital allocation
- Supports CSV or JSON export of trade history for import into GnuCash or dashboards

==============================
Structured Logging Format
==============================

Overview:
Logging must support both human-readable formats and structured outputs for analytics.

Configuration:
- `.env_bot`: `LOG_FORMAT=csv` or `LOG_FORMAT=json`

Log Files Affected:
- `open.log`, `mid.log`, `close.log`
- `unresolved_orders.log`
- `daily_summary.json`
- `trade_history.csv/json`

JSON Field Requirements:
- `timestamp`
- `strategy_name`
- `ticker`
- `side`
- `size`
- `entry_price`
- `exit_price`
- `PnL`
- `broker`
- `mode` (paper/live)
- `error_code` (if applicable)

==============================
Centralized Error Management
==============================

Overview:
Implement a global error handler (`error_handler.py`) to consolidate exception logging, alerts, and fallback behavior across all modules.

Module: `error_handler.py`

Capabilities:
- Capture exceptions from strategy logic, broker modules, and utility scripts
- Categorize errors: `NetworkError`, `BrokerError`, `LogicError`, `ConfigError`
- Log errors with full traceback and metadata to `unresolved_orders.log` (JSON format)
- Retry logic with exponential backoff for transient issues
- Trigger email/SMS via `notifier_bot.py` for critical failures
- Optionally halt bot and exit all positions if critical error threshold is met

==============================
Real-Time Monitoring Dashboard
==============================

Overview:
Enhance the web dashboard (`tbot_web`) with live metrics and streaming data to aid in remote visibility and system monitoring.

Metrics to Display:
- Active strategy and time window
- Current open positions and sizes
- Cumulative P&L (session and daily)
- Broker connectivity status
- API latency or retry count
- `watchdog_bot.py` status (heartbeat)

Implementation:
- Use WebSocket or FastAPI background tasks
- Dashboard pages (`status.html`, `logs.html`) receive live data updates
- Backend modules (`status_web.py`, `logs_web.py`) feed data to clients via JSON endpoints

==============================
Time Zone Standards
==============================

All time references will be in UTC format:
Example: 14:30â€“15:20 UTC    #9:30â€“10:20 AM EST

==============================
Strategy Allocation Clarification
==============================

Allocation Logic:
TradeBot dynamically weights capital based on the number of signals passed:
- 1 trade = 100% of `TOTAL_ALLOCATION`
- 2 trades = 60% / 40%
- 3 trades = 40% / 30% / 30%
- 4 trades = 40% / 20% / 20% / 20%

This ensures risk is managed proportionally while maximizing high-confidence setups.

==============================
Enhancement Module Activation
==============================

Trigger Logic:
- `adx_filter.py`: Skip VWAP if ADX > 25 (strong trend)
- `bollinger_confluence.py`: Require 2 standard deviation touch for mean reversion
- `vix_gatekeeper.py`: Disable strategy_close if VIX < `STRAT_CLOSE_VIX_THRESHOLD`
- `imbalance_scanner_ibkr.py`: Activate if time is 20:30 UTC (3:30 PM EST) and broker is IBKR
- `ticker_blocklist.py`: Always-on, prevents multiple trades on same symbol per session

==============================
Secure Environment Variables
==============================

Changes:
- Use `security_bot.py` to encrypt `.env_bot` and store as `.env_bot.enc`
- Decryption key loaded via `ENCRYPTION_KEY` in top-level `.env`
- Plaintext `.env_bot` files should not be committed to version control

==============================
Testing and Validation Suite
==============================

Implementation Plan:
- Add `/tests/` directory with:
  - `test_strategy_open.py`
  - `test_env_bot.py`
  - `test_risk_bot.py`
- Use `pytest` for unit testing
- Include integration test script (`test_runner.py`) to simulate full trading loop in TEST_MODE
- CI-compatible test output (Junit or JSON)

These changes elevate TradeBotâ€™s robustness, security, and auditability in production-grade environments.




==============================
Final Build Checklist
==============================

- All `.env` and `.env_bot` vars parsed and validated
- `self_check()` passes for all strategies
- Dry-run tested before any live orders
- GnuCash export logic runs and is backed up
- Logs include full metadata (time, strat, broker, fill)
- tbot_bot is fully standalone and functional without tbot_api/web
- Version shown at startup from `version.py`
- All code printed in full to chat before ZIP
- Test cycle uses TEST_MODE=true + GNC_EXPORT_MODE=paper
- Any API/broker failure triggers graceful shutdown with logging




==============================
.env â€“ Top-Level Environment File
==============================

ENVIRONMENT="production"
LOCAL=true
LOCAL_IP=""
LOCAL_PORT="6900"
REMOTE_IP=""
REMOTE_PORT="6900"

# Authentication
USERNAME=""
PASSWORD=""
ENCRYPTED_PASSWORD=""
ENCRYPTION_KEY=""

# API Keys
FINNHUB_API_KEY=""

# Alpaca
ALPACA_PAPER_API_KEY=""
ALPACA_PAPER_SECRET_KEY=""
ALPACA_LIVE_API_KEY=""
ALPACA_LIVE_SECRET_KEY=""
ALPACA_PAPER_URL=https://paper-api.alpaca.markets
ALPACA_LIVE_URL=https://api.alpaca.markets

# IBKR
IBKR_PAPER_USERNAME=""
IBKR_PAPER_ACCOUNT_NUMBER=""
IBKR_PAPER_PASSWORD=""
IBKR_LIVE_API_KEY=""
IBKR_LIVE_SECRET_KEY=""

# Notifications
ALERT_EMAIL=tb@tb.rgdnn.com
SMTP_USER=tb@tb.rgdnn.com
SMTP_PASS=MyTPassIs5^
SMTP_HOST=smtp.dreamhost.com
SMTP_PORT=486


==============================
.env_bot â€“ Trading Bot Environment File
==============================

# General + Debugging
VERSION_TAG=v1.0.0
BUILD_MODE=release
DISABLE_ALL_TRADES=false
TEST_MODE=true
DEBUG_LOG_LEVEL=verbose
ENABLE_LOGGING=true
LOG_FORMAT=csv

# Trade Controls
TRADE_CONFIRMATION_REQUIRED=false
API_RETRY_LIMIT=3
FRACTIONAL=true
TOTAL_ALLOCATION=0.02
MAX_TRADES=4
WEIGHTS=0.4,0.2,0.2,0.2
DAILY_LOSS_LIMIT=0.05
MAX_RISK_PER_TRADE=0.025
MAX_OPEN_POSITIONS=5

# Filters
MIN_PRICE=2
MAX_PRICE=100
MIN_VOLUME_THRESHOLD=1000000

# Broker & Routing
BROKER=alpaca
ALPACA_MODE=paper
IBKR_MODE=paper
STRATEGY_SEQUENCE=open,mid,close
STRATEGY_OVERRIDE=null

# Timing
START_TIME=14:30 UTC.  #9:30 AM EST
TRADING_DAYS=mon,tue,wed,thu,fri  # Disable weekends
ANALYSIS_TIME=20
MONITORING_TIME=30
SLEEP_TIME=1s

# Notifications
NOTIFY_ON_FILL=true
NOTIFY_ON_EXIT=true

# Reporting + Exporting
GNC_EXPORT_MODE=auto
STRAT_OPEN_BUFFER=0.02
STRAT_MID_VWAP_THRESHOLD=0.02
STRAT_CLOSE_VIX_THRESHOLD=15

# Shorting
SHORT_TYPE=disabled  # Options: ShortSell, LongPut, disabled



==============================
Overall Directory Structure Diagram
==============================

TradeBot-001/
â”œâ”€â”€ .env                                  # Global .env for API routing, encryption key, and login credentials
â”œâ”€â”€ .scpignore                            # Prevents sensitive/dev files from being deployed
â”œâ”€â”€ encrypt_password.py                   # CLI tool to AES-encrypt login passwords
â”œâ”€â”€ generate_key.py                       # Generates AES key used in encryption/decryption
â”œâ”€â”€ requirements.txt                      # Dependency list for Python packages (FastAPI, broker SDKs, GnuCash XML, etc.)

â”œâ”€â”€ tbot_api/                             # FastAPI interface for starting/stopping bot and modifying config via web
â”‚   â”œâ”€â”€ __init__.py                       # Module marker
â”‚   â”œâ”€â”€ env_api.py                        # Loads and parses global `.env`
â”‚   â”œâ”€â”€ logs_api.py                       # Logs user/API requests to file
â”‚   â”œâ”€â”€ main_api.py                       # Main API entry point; defines route endpoints
â”‚   â”œâ”€â”€ auth.py                           # Auth handler with encrypted password support

â”œâ”€â”€ tbot_bot/                             # Core logic engine (runs bot lifecycle, strategy switching, execution, logging)
â”‚   â”œâ”€â”€ .env_bot                          # Bot-specific config (strategy settings, capital rules, etc.)
â”‚   â”œâ”€â”€ env_bot.py                        # Validates and parses `.env_bot`
â”‚   â”œâ”€â”€ main_bot.py                       # Master loop handling session lifecycle
â”‚   â”œâ”€â”€ start_bot.py                      # Launch trigger (cron, CLI, or API)
â”‚   â”œâ”€â”€ stop_bot.py                       # Clean shutdown script to exit open positions
â”‚   â”œâ”€â”€ service_bot.py                    # Optional daemon-mode support for systemd/supervisors
â”‚   â”œâ”€â”€ status_bot.py                     # Reports runtime state (idle, analyzing, trading, shutdown)
â”‚   â”œâ”€â”€ settings_bot.py                   # Programmatic `.env_bot` editor
â”‚   â”œâ”€â”€ logs_bot.py                       # Handles runtime log entries
â”‚   â”œâ”€â”€ notifier_bot.py                   # Sends alerts (email/Slack) on fills, exits, or errors

â”‚   â”œâ”€â”€ kill_switch.py                    # Auto-shutdown if loss > DAILY_LOSS_LIMIT
â”‚   â”œâ”€â”€ watchdog_bot.py                   # Checks broker API status and retries or halts
â”‚   â”œâ”€â”€ security_bot.py                   # Encrypts/decrypts `.env_bot` as `.env_bot.enc`
â”‚   â”œâ”€â”€ error_handler.py                  # Captures and categorizes errors globally

â”‚   â”œâ”€â”€ broker_api.py                     # Unified router for Alpaca, IBKR, etc.
â”‚   â”œâ”€â”€ broker_robinhood.py              # Robinhood implementation (sandbox only)
â”‚   â”œâ”€â”€ broker_webull.py                 # Webull integration for testing
â”‚   â”œâ”€â”€ broker_tastytrade.py             # Tastytrade support
â”‚   â”œâ”€â”€ broker_ibkr.py                   # IBKR (Interactive Brokers) module
â”‚   â”œâ”€â”€ orders_bot.py                     # Creates, modifies, and cancels orders
â”‚   â”œâ”€â”€ reporting_bot.py                  # Finalizes trades and generates logs/GnuCash export
â”‚   â”œâ”€â”€ risk_bot.py                       # Prevents trades violating allocation or risk rules
â”‚   â”œâ”€â”€ utils_bot.py                      # Miscellaneous helpers (timestamping, rounding, etc.)

â”‚   â”œâ”€â”€ finnhub_screener.py               # Pulls and ranks tickers using Finnhub API
â”‚   â”œâ”€â”€ strategy_router.py                # Routes to strategy based on time or override
â”‚   â”œâ”€â”€ strategy_open.py                  # Opening Range Breakout logic
â”‚   â”œâ”€â”€ strategy_mid.py                   # VWAP mean reversion strategy
â”‚   â”œâ”€â”€ strategy_close.py                 # EOD momentum or fade strategy
â”‚   â”œâ”€â”€ strategy_meta.py                  # Contains thresholds and toggles per strategy

â”‚   â”œâ”€â”€ gnu_paper.gnucash                 # Output file for paper-mode trading sessions
â”‚   â”œâ”€â”€ gnu_live.gnucash                  # Output file for live-mode trading sessions
â”‚   â”œâ”€â”€ gnu_exporter.py                   # Converts executed trades into GnuCash XML
â”‚   â”œâ”€â”€ gnu_transaction.py                # Constructs XML structures for GnuCash splits, accounts, metadata
â”‚   â”œâ”€â”€ gnu_config.py                     # Defines GnuCash ledger layout (Assets, Equity, Income, Expenses)
â”‚   â”œâ”€â”€ gnu_backup.py                     # Creates timestamped backup before new XML write
â”‚   â”œâ”€â”€ trade_history.csv                 # Master trade log
â”‚   â”œâ”€â”€ unresolved_orders.log             # Logs API rejections, partial fills, errors
â”‚   â”œâ”€â”€ daily_summary.json                # Summary of session PnL, fill rate, metrics

â”‚   â”œâ”€â”€ enhancements/                     # Toggleable strategy filters and logic add-ons
â”‚   â”‚   â”œâ”€â”€ adx_filter.py                # Blocks mid strategy if trend strength is high
â”‚   â”‚   â”œâ”€â”€ bollinger_confluence.py     # Confirms reversal opportunity via Bollinger touch
â”‚   â”‚   â”œâ”€â”€ vix_gatekeeper.py           # Blocks strategy_close if VIX is too low
â”‚   â”‚   â”œâ”€â”€ imbalance_scanner_ibkr.py   # Monitors late-day order books via IBKR imbalance feed
â”‚   â”‚   â”œâ”€â”€ ticker_blocklist.py         # Prevents re-entry into same ticker during session
â”‚   â”‚   â”œâ”€â”€ build_check.py              # Sanity check for directory structure, permissions, required files

â”‚   â”œâ”€â”€ backtest/                         # Offline historical simulation system
â”‚   â”‚   â”œâ”€â”€ backtest_engine.py          # Replays historical trades using strategy logic
â”‚   â”‚   â”œâ”€â”€ load_historical_data.py     # Reads OHLCV or tick-level data
â”‚   â”‚   â”œâ”€â”€ performance_metrics.py      # Computes Sharpe ratio, drawdown, win %, etc.
â”‚   â”‚   â”œâ”€â”€ plot_results.py             # Plots equity curve and trade map

â”‚   â”œâ”€â”€ tests/                            # Automated testing framework
â”‚   â”‚   â”œâ”€â”€ test_main_bot.py            # Validates execution loop
â”‚   â”‚   â”œâ”€â”€ test_env_bot.py             # Tests environment variable parsing
â”‚   â”‚   â”œâ”€â”€ test_backtest_engine.py     # Confirms backtest logic and output
â”‚   â”‚   â”œâ”€â”€ integration_test_runner.py  # Full-loop integration test in TEST_MODE

â”œâ”€â”€ tbot_web/                             # Web dashboard for status, logs, and control
â”‚   â”œâ”€â”€ assets/
â”‚   â”‚   â”œâ”€â”€ fnt/                         # Fonts used in interface
â”‚   â”‚   â””â”€â”€ css/
â”‚   â”‚       â”œâ”€â”€ main.css                # General styling
â”‚   â”‚       â””â”€â”€ theme.css               # Light/dark theme switch
â”‚   â”œâ”€â”€ favicon.ico / favicon.gif        # Web icon for browser tab
â”‚   â”œâ”€â”€ index.html                       # Login page
â”‚   â”œâ”€â”€ main.html                        # App container shell
â”‚   â”œâ”€â”€ logs.html                        # Trade log viewer
â”‚   â”œâ”€â”€ settings.html                    # UI editor for .env_bot
â”‚   â”œâ”€â”€ status.html                      # Displays live bot state
â”‚   â”œâ”€â”€ robots.txt                       # Blocks web crawlers
â”‚   â”œâ”€â”€ py/
â”‚   â”‚   â”œâ”€â”€ login_web.py                # Auth logic for web login
â”‚   â”‚   â”œâ”€â”€ main_web.py                 # Page router
â”‚   â”‚   â”œâ”€â”€ logs_web.py                 # Exposes logs.html endpoints
â”‚   â”‚   â”œâ”€â”€ start_stop_web.py          # Trigger bot start/stop from UI
â”‚   â”‚   â”œâ”€â”€ status_web.py              # Streams live data to frontend
