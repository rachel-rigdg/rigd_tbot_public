================================================================================
Document: 020
Directory_Structure
Version: v047
Date: UTC:2025-06-24 00:00:00
================================================================================

This document defines the authoritative directory and file structure for the RIGD TradeBot project.

Contents:
- Full Directory Structure Diagram (reflects required runtime and automation organization)

All file locations and naming conventions must be strictly followed for compliance, operational integrity, and system automation.

All provisioning, encryption, and secret management must be performed via the Web UI configuration step. No CLI/manual/legacy provisioning is ever allowed after bootstrap.


================================================================================
Overall Directory Structure Diagram 
================================================================================

rigd_tbot/
│
├── VERSION.md                          # Human/gpt-readable version history for project reference
├── CHANGELOG.md                        # Optional: Commit-style technical history of all code and spec changes
├── README.md                           # Project-wide usage, setup, and architecture summary
├── requirements.txt                    # Python package requirements for all components
├── .env                                # Global runtime config for Flask port, encryption, and login (plaintext)
├── .env_bot                            # Decrypted bot runtime settings (overwritten if using encrypted version)
├── .env_bot.template-test              # Sample config for testing/cloning bots
├── .scpignore_env                      # File exclusion rules: env/config only
├── .scpignore_dev                      # File exclusion rules: dev/test artifacts
├── .scpignore_enc                      # File exclusion rules: deploys only encrypted config
├── .scpignore_prod_archive             # File exclusion rules: production archive packaging (excludes env, ledgers, etc.)
├── run_tbot.sh				            # Unified launcher: boots TradeBot web UI, performs full bootstrap/config provisioning, then launches the bot on success
│   
├── tools/				                # One-time encryption/auth tools (DEPRECATED for runtime; provisioning now via config Web UI scripts) - NOTE: All secret and Fernet key creation/provisioning must occur via the Web UI configuration/provisioning step. Legacy tools in /tools/ are for initial import/migration ONLY and are not used by production system after first bootstrap.
│   ├── _init_all_core_databases.sh     # [Legacy] CLI for initial database schema setup; NOT for production use
│   ├── build_check.py			        # Full project self-check: keys, schemas, config, directory structure, file integrity
│   ├── encrypt_env.py			        # [Legacy] CLI: Encrypts .env for initial migration only; never generates Fernet keys for runtime.
│   ├── encrypt_env_bot.py           	# [Legacy] CLI: Encrypts .env_bot as support/.env_bot.enc with Fernet key in storage/keys/env_bot.key
│   ├── encrypt_json.py			        # [Legacy] CLI: Encrypts JSON secrets in storage/secrets/ using category Fernet keys
│   ├── hash_password.py		        # [Legacy] CLI: Creates bcrypt-hashed user, Fernet key, and DB entry; superceded by Web UI
│   ├── init_encrypted_secrets.py	    # [Legacy] CLI: Generates encrypted secrets from plaintext templates for one-time bot setup
│   ├── log_test.py			            # Sanity-check: Verifies log output in active runtime environment
│   ├── secrets_template.txt		    # Sample bot configuration values (plaintext reference only)
│   ├── server_template.txt		        # Sample server setup values (plaintext reference only)
│   ├── setup_server.sh                 # [Legacy] CLI/server bootstrapping script
│   └── sync_project.sh                 # Deployment sync utility: manages live/dev folder and file syncs
│   
├── backups/                            # Archived audit logs, encrypted session reports, and credential backups (auto-rotated)
│   └──  logs_*.zip                     # Zipped daily logs (all modes)
│       └── summary_*.json              # Encrypted JSON session summaries (PnL, metrics)
│    
├── logs/                               # Live log files (rotated by auto_backup)
│   ├── bot/
│   │   └── sessions/                   # Strategy/session-specific runtime logs
│   └── web/			                # Web UI authentication logs (multi-user, full audit)
│       ├── access.log                  # Web: IP/timestamp log of all login events
│       └── auth_failures.log           # Web: Failed login, lockout, and RBAC audit events
│    
├── support/				            # Internal project documentation and automation scripts
│   ├── architecture.md                 # Full system/module architecture breakdown (reference)
│   ├── API_reference.md                # CLI/internal API function reference (optional)
│   ├── security_notes.md               # Data handling, key roles, and encryption policies (reference)
│   │
│   └── scripts/				            # Internal automation and codebase tools (non-runtime)
│       ├── audit_log_parser.py          	# CLI: Parse, summarize, and export audit log analytics
│       ├── Fix_Paths.py			        # Codebase repair: Recursively fixes legacy import paths in tbot_bot/
│       ├── sync_to_accounting.py        	# CLI: Push trade data to accounting ingestion endpoint (offline/manual sync)
│       ├── tradebot.service              	# Systemd or process manager service definition for bot daemon
│       └── upload_backups_to_cloud.sh   	# CLI: Uploads backup archives to S3/cloud/offsite vault
│
├── systemd_units/	
│   └── tbot_bot.service              		    # tbot Core Bot Runtime	- launches:tbot_bot.runtime.main	→ symlink: ~/.config/systemd/user/
│
├── tbot_bot/                                	# Core engine: execution, strategy, reporting, and config
│   ├── __init__.py
│   │
│   ├── accounting/                              # Accounting integration, ledger/COA/schema helpers (all logic for bot ledger/COA creation, validation, export)
│   │   ├── account_transaction.py               # Builds accounting journal entries for trade export to accounting (never manages/provisions secrets/keys)
│   │   ├── accounting_api.py                    # Exports finalized trade/report data to accounting system endpoint (post-trade only, no live config)
│   │   ├── accounting_config.py                 # Validates and creates required output folder structure; enforces ledger/COA existence and schema compliance
│   │   ├── coa_utils.py                         # COA DB utilities: create/import/export/validate COA db (metadata + hierarchy), supports Web UI editing
│   │   ├── init_coa_db.py                       # Bootstrap script: initializes a new COA DB using tbot_ledger_coa_template.json as hierarchy/template (called only at provisioning/reset)
│   │   ├── init_ledger_db.py                    # Bootstrap script: initializes a new bot ledger DB file using tbot_ledger_schema.sql (called only at provisioning/reset)
│   │   ├── ledger_utils.py                      # Ledger DB utilities: create OFX-compliant ledger db, schema validation, audit helpers (no COA/metadata logic)
│   │   ├── tbot_ledger_coa_template.json        # Editable COA hierarchy/template (codes/names/structure, referenced and modified via coa.html)
│   │   ├── tbot_ledger_schema.sql               # SQL schema file for bot ledger DB (transactions, double-entry, audit, summary tables)
│   │   └── README_COA.md                        # Documentation: COA/ledger schema update, UI editing instructions, compliance notes
│   │
│   ├── backtest/                                # Backtesting, simulation, and research
│   │   ├── backtest_engine.py                   # Strategy replay and simulation engine
│   │   ├── load_historical_data.py              # Loads CSV/OHLCV/tick data for backtesting
│   │   ├── performance_metrics.py               # Computes Sharpe, win rate, drawdown, and related stats
│   │   └── plot_results.py                      # Graphs equity curves, trades, and heatmaps
│   │
│   ├── broker/                                  # Broker API interface and adapters
│   │   ├── broker_api.py                        # Unified broker interface; routes to selected broker module
│   │   └── brokers/                             # Specific broker implementations (modular, isolated)
│   │       ├── __init__.py                      # Enables dynamic broker module import
│   │       ├── alpaca.py                        # Alpaca REST/WebSocket trading adapter
│   │       ├── ibkr.py                          # IBKR TWS/Gateway adapter (async + reconnect)
│   │       ├── tradier.py                       # Tradier REST trading adapter
│   │       └── robinhood.py                     # Robinhood (unofficial, not for production)
│   │
│   ├── config/                                 # Local bot config loaders, encryption, and secure settings editors
│   │   ├── bootstrapping_helper.py		        # Runs core DB initialization scripts (calls tbot_bot/core/scripts/*); checks and sets .bootstrapped flag (called by provisioning_runner.py)
│   │   ├── config_encryption.py                # Fernet encrypt/decrypt for config/secrets; secure file backup (called by provisioning_helper.py and configuration_web.py)
│   │   ├── db_bootstrap.py                     # Calls tbot_bot/core/scripts/* for DB init (delegates schema logic); invoked by provisioning_runner.py
│   │   ├── env_bot.py                          # Loads/validates/parses .env_bot for runtime; used by UI and shell launchers (never touches keys)
│   │   ├── error_handler.py                    # Global error logging, exception tracing, system error output (imported in all runtime modules)
│   │   ├── key_manager.py                      # Generates/checks/rotates Fernet keys (category-specific); called by provisioning_helper.py and provisioning_runner.py
│   │   ├── network_config.py                   # Loads/decrypts encrypted network config (network_config.json.enc) using Fernet; called by bot, web, and shell
│   │   ├── provisioning_helper.py		        # Generates and writes all required Fernet keys and minimal secrets (idempotent); calls key_manager.py, security_users.py; invoked by provisioning_runner.py
│   │   ├── provisioning_runner.py		        # Central orchestrator: watches for provisioning flag; calls key_manager.py, provisioning_helper.py, bootstrapping_helper.py, db_bootstrap.py; handles all setup steps and privilege/escalation
│   │   ├── PROVISION_FLAG                      # File flag (created post-provisioning) to skip re-provisioning at startup
│   │   ├── security_bot.py                     # Loads/decrypts .env_bot using Fernet keys from storage/keys/; used by config UI and runtime scripts
│   │   └── settings_bot.py                     # Editor/validator for .env_bot (strategy/runtime vars); used by Web UI/scripts; never manages key files
│   │
│   ├── control/                                # Control signals for runtime (web/CLI triggers)
│   │   ├── bot_state.txt                    	# Written by main.py or tbot_runner_supervisor.py (if present). Holds current bot state for UI/status. No other process watches this file.
│   │   ├── test_mode.flag			            # Written by test_web.py (UI action); presence triggers TEST_MODE in main.py. Removed by integration_test_runner.py or main.py only.
│   │   ├── control_start.flag                  # Written by start_stop_web.py (UI action); main.py reads and handles start trigger. No separate watcher.
│   │   └── control_stop.flag                   # Written by start_stop_web.py (UI action); main.py reads and handles stop trigger. No separate watcher.
│   │
│   ├── core/                                       # Persistent state, user authentication, and schema files
│   │   ├── databases/					            # created during the provisioning process
│   │   │   ├── LEDGER_STATUS.db                    # Ledger open/closed/version status, referenced by bot/accounting sync logic
│   │   │   ├── PASSWORD_RESET_TOKENS.db            # Stores password reset tokens (used by Web UI password reset only)
│   │   │   ├── SYSTEM.db                           # Stores global bot settings (never overwritten by accounting)
│   │   │   ├── SYSTEM_LOGS.db                      # Append-only event and error log for all system actions (audited by Web UI and CLI)
│   │   │   ├── SYSTEM_USERS.db                     # Auth DB: source of truth for local login/role/session; never shared
│   │   │   └── USER_ACTIVITY_MONITORING.db         # Logs user logins, RBAC changes, browser/IP, and session events (Web UI audit panel)
│   │   │
│   │   ├── schemas/
│   │   │   ├── ledger_status_schema.sql             # DB schema for LEDGER_STATUS.db (never altered by runtime)
│   │   │   ├── password_reset_schema.sql            # Schema for PASSWORD_RESET_TOKENS.db (Web UI reset logic)
│   │   │   ├── system_logs_schema.sql               # Schema for SYSTEM_LOGS.db (UI/CLI logs panel)
│   │   │   ├── system_schema.sql                    # Schema for SYSTEM.db (system settings, enforced at startup)
│   │   │   ├── system_users_schema.sql              # Schema for SYSTEM_USERS.db (bcrypt, roles, enforced at user add/change)
│   │   │   └── user_activity_monitoring_schema.sql  # Schema for USER_ACTIVITY_MONITORING.db (audit log structure)
│   │   │
│   │   └── scripts/
│   │       ├── init_ledger_status.py                # (Re)initialize LEDGER_STATUS.db from current COA/schema
│   │       ├── init_password_reset_tokens.py        # Initialize PASSWORD_RESET_TOKENS.db (triggered by bootstrap only)
│   │       ├── init_system_logs.py                  # Initialize SYSTEM_LOGS.db (first boot or wipe)
│   │       ├── init_system_users.py                 # Initialize SYSTEM_USERS.db, insert initial admin from Web UI POST only
│   │       ├── init_system.py                       # Create SYSTEM.db (global settings), never run outside bootstrap
│   │       ├── init_user_activity_monitoring.py     # Create USER_ACTIVITY_MONITORING.db (audit tracking), never run by hand
│   │       └── verify_all_core_databases.py         # Script: checks integrity of all DBs, outputs state/COA, used by admin self-check
│   │
│   ├── data/
│   │   └── cache/
│   │       └── fundamentals_{date}.json           	# Ephemeral daily cache: stores API/screener data and runtime metadata for strategy logic and post-trade analysis
│   │ 
│   ├── enhancements/				                # Core safety/risk modules and real-time trading guards; enforced per .env_bot and strategy logic
│   │   ├── adx_filter.py                	        # Enforces risk: blocks new trades during strong ADX/trending conditions (used by risk control in strategy logic)
│   │   ├── black_scholes_filter.py     	        # Enforces option trade validation: checks pricing against Black-Scholes model; blocks invalid trades
│   │   ├── bollinger_confluence.py               	# Enforces entry: requires Bollinger Band confluence for strategy trade signals
│   │   ├── build_check.py               	    	# System requirement: pre-launch validator for keys, schemas, COA, and directory structure
│   │   ├── finnhub_fundamental_guard.py	        # Enforces entry filter: blocks trade if company fails fundamental thresholds from screener
│   │   ├── imbalance_scanner_ibkr.py    		    # Session gatekeeper: uses IBKR imbalance feed to validate end-of-day trading in close strategy
│   │   ├── ticker_blocklist.py                   	# Risk enforcement: blocks duplicate ticker use within the same trading session
│   │   ├── tuning_tracker.py		                # Tracks session and strategy performance for self-tuning and audit; provides live stats to Web UI
│   │   └── vix_gatekeeper.py                     	# Risk enforcement: blocks or disables trading when VIX exceeds threshold (checked before any entry)
│   │
│   ├── output/
│   │   ├── logs/                                             # System/global logs (not per-bot; shown in logs.html where specified)
│   │   │   ├── main_bot.log (or system_logs.log)                    # Main system-level log, bot lifecycle, errors (shown in logs.html)
│   │   │   ├── heartbeat.log                                        # API/connection heartbeat events (shown in logs.html)
│   │   │   ├── router.log                                           # Strategy router-level events (optional; may be shown in logs.html if present)
│   │   │   ├── screener.log                                         # Screener/universe events (optional; may be shown in logs.html if present)
│   │   │   ├── kill_switch.log                                      # Kill switch and shutdown triggers (optional; may be shown in logs.html if present)
│   │   │   ├── provisioning.log                                     # Provisioning run log (shown in logs.html)
│   │   │   ├── provisioning_status.json                             # Provisioning status (shown in logs.html)
│   │   │   ├── auth_web.log                                         # Web login/auth activity (shown in logs.html)
│   │   │   ├── security_users.log                                   # User/role management activity log (shown in logs.html)
│   │   │   ├── system_logs.log                                      # System-level events (alias for main_bot.log; shown in logs.html)
│   │   │   ├── system_users.log                                     # User create/delete/audit log (shown in logs.html)
│   │   │   ├── user_activity_monitoring.log                         # User login/session/RBAC activity (shown in logs.html)
│   │   │   ├── start_log                                            # Bot/session start events (shown in logs.html)
│   │   │   ├── stop_log                                             # Bot/session stop events (shown in logs.html)
│   │   │   ├── init_system_logs.log                                 # Bootstrap-only: initial system log DB setup (not shown in logs.html)
│   │   │   ├── init_system_users.log                                # Bootstrap-only: initial user DB setup (not shown in logs.html)
│   │   │   ├── init_user_activity_monitoring.log                    # Bootstrap-only: initial user activity DB setup (not shown in logs.html)
│   │   │   ├── init_password_reset_tokens.log                       # Bootstrap-only: initial password reset DB setup (not shown in logs.html)
│   │   │   └── password_reset_tokens.log                            # Runtime password reset events (optional; may be shown in logs.html if present)
│   │   │
│   │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}/       # ← Scoped per bot ID - Entire directory mirrored to Accounting system
│   │       ├── logs/                                					    # Unified strategy logs (one per phase or failure mode)
│   │       │   ├── open.log			                					# Log of all trades and decisions during open strategy window
│   │       │   ├── mid.log			                					    # Log of trades during midday session (position management, adjustments)
│   │       │   ├── close.log			            						# Log of closeout phase decisions and trade executions
│   │       │   ├── unresolved_orders.log	        						# Captures failed, rejected, or stale orders not resolved during session
│   │       │   └── error_tracebacks.log		        					# Full Python tracebacks for all uncaught exceptions (with timestamps)
│   │       │
│   │       ├── ledgers/  										                                    # created during the provisioning process
│   │       │   ├── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_COA_v1.0.0.db    	# Chart of Accounts (COA) for bot ledger, schema version v1.0.0
│   │       │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db        	# OFX-compliant ledger for live trading data per broker
│   │       │
│   │       ├── screeners/
│   │       │   └── symbol_universe.json		    # Stores filtered symbol metadata for next-day screeners.
│   │       │
│   │       ├── summaries/
│   │       │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_daily_summary.json  	# JSON performance summary for session (PnL, latency, counts, risk triggers)
│   │       │
│   │       └── trades/
│   │           ├── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_trade_history.csv   	# All trade data for session (raw, human-readable)
│   │           └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_trade_history.json  	# Structured trade records for ingestion, reconciliation, and audit
│   │
│   ├── reporting/
│   │   ├── auto_backup.py                      # WORKER. Compresses and archives output/ after session ends. Only launched by main.py.
│   │   ├── daily_summary.py                    # WORKER. Builds daily trade summary stats and outcomes. Only launched by main.py.
│   │   ├── log_rotation.py                     # WORKER. Cleans output folder after N days (log file retention). Only launched by main.py.
│   │   ├── notify_rebalance_requirements.py    # WORKER. Watches for low float; notifies accounting to rebalance. Only launched by main.py.
│   │   ├── report_router.py                    # WORKER. Routes finalized trade output to logs/accounting system. Only launched by main.py.
│   │   ├── session_report.py                   # WORKER. Session wrap-up summary (for UI, compliance). Only launched by main.py.
│   │   ├── status_logger.py                    # WORKER. Syncs live bot state to UI/status.json (optional). Only launched by main.py.
│   │   └── trade_logger.py                     # WORKER. Records trade data to output/trades. Only launched by main.py.
│   │
│   ├── runtime/
│   │   ├── __init__.py
│   │   ├── main.py                                 # ENTRY DISPATCHER. SINGLE SYSTEMD ENTRY for all bot operations.
│   │   │                                           #  - Checks for bootstrap/init and launches portal_web_main.py (Web UI).
│   │   │                                           #  - After successful configuration, provisioning, and bootstrapping, launches bot_supervisor.py (if present) for all persistent monitoring, phase management, and process orchestration.
│   │   │                                           #  - No persistent supervision, bot run-loop, or process management logic in main.py.
│   │   ├── start_bot.py                            # CLI helper only. Writes control_start.flag; does NOT watch for flags or launch processes.
│   │   ├── status_bot.py                           # WATCHER. Tracks bot health/state, writes status.json, session logs. Only launched by bot_supervisor.py.
│   │   ├── stop_bot.py                             # CLI helper only. Writes control_stop.flag; does NOT watch for flags or launch processes.
│   │   ├── tbot_supervisor.py                      # CENTRAL SUPERVISOR. Manages all bot phase/state transitions, persistent monitoring, and all subprocess lifecycle. Only one instance allowed; always launched by main.py if present. Handles/waits for and may restart monitor, runtime, or other persistent bot subprocesses. Never runs strategy code directly.
│   │   └── watchdog_bot.py                         # WATCHER. Dedicated connection/process monitor. Only launched by bot_supervisor.py.
│   │
│   ├── screeners/			            	# Screener & Symbol Selection, staged universe/blocklist build, API quota minimization, modular providers
│   │   ├── providers/                              	# Pure data fetch adapters, stateless, config-injected
│   │   │   ├── finnhub_provider.py                 	# Finnhub provider adapter: fetches symbols and quotes via injected API keys/config
│   │   │   ├── ibkr_provider.py                    	# IBKR provider adapter: fetches symbols and quotes via injected API keys/config
│   │   │   ├── nasdaq_provider.py                    # NASDAQ provider adapter: fetches symbols and quotes via injected API keys/config
│   │   │   ├── nyse_provider.py                      # NYSE provider adapter: fetches symbols and quotes via injected API keys/config
│   │   │   └── yahoo_provider.py                      # Yahoo provider adapter: fetches symbols via CSV/web scraping, injected config if any
│   │   │
│   │   ├── screeners/                              	# Runtime filter modules using providers' data
│   │   │   ├── alpaca_screener.py                         # Alpaca screener: runtime quote filtering; delegates symbol/quote fetch to provider adapters
│   │   │   ├── finnhub_screener.py                        # Finnhub screener: runtime quote filtering; uses provider adapter for fetches
│   │   │   ├── ibkr_screener.py                           # IBKR screener: runtime quote filtering; uses provider adapter for fetches
│   │   │   └── tradier_screener.py                        # Tradier screener: runtime quote filtering; uses provider adapter for fetches
│   │   │
│   │   ├── blocklist_manager.py                        # Blocklist manager: add/remove/update, timestamps, archival, polling/recovery, UI integration - Centralized blocklist management for staged symbol universe builds and daily universe maintenance.
│   │   ├── provider_base.py                           # Abstract base class/interface for all provider adapters: standardizes fetch_symbols method
│   │   ├── provider_registry.py                       # Maps provider strings to adapter classes; single source for dynamic provider loading
│   │   ├── screener_base.py                           # Abstract screener base: core interface, loads universe, wires modules, calls providers, credential loader
│   │   ├── screener_filter.py                         # Symbol normalization/filtering: blocklist-first, broker/fractional-aware, spec-compliant, dedupe logic
│   │   ├── screener_utils.py                          # Universe/blocklist load/save, atomic writes, helpers, dedupe, validation, drift/audit utilities
│   │   ├── symbol_enrichment.py                        # Stage 2: Enriches symbols in symbol_universe.unfiltered.json with price, market cap, and volume via active enrichment provider (e.g. Finnhub).
│   │   ├── symbol_source_loader.py                    # Orchestrates symbol source loading: calls provider adapters with injected config, normalizes and merges symbols
│   │   ├── symbol_universe_refresh.py                 # Orchestrates staged, free-first universe/blocklist build, crash-resume, multi-pass output, dynamic provider calls
│   │   ├── universe_orchestrator.py                    # Orchestrates the full nightly universe build process by running: symbol_universe_refresh.py (fetch symbols, write unfiltered universe) AND symbol_enrichment.py (enrich, filter, blocklist, write final universe)
│   │   ├── universe_archiver.py                       # Automated archival, retention, restore/rollback utilities for all universes/blocklists (policy-driven)
│   │   ├── universe_diff.py                           # Diff/compare any two universe/blocklist files (drift, audit, rollback, UI/API integration)
│   │   ├── universe_logger.py                         # Dedicated, UTC, audit-level logger for all universe/blocklist events, failures, file ops, user actions
│   │   ├── universe_rebuild_cli.py                    # CLI to trigger universe/blocklist rebuild, validation, archival, manual recovery/force rebuild
│   │   └── universe_validation.py                     # Full validation/QA/drift/field/spec checks for universes/blocklists, dedupe, schema, credential/field presence
│   │
│   ├── storage/				                    # Persistent runtime data: encrypted secrets, keys, backups, and exports
│   │   ├── backups/                                # Daily encrypted ledger/config backups (UTC timestamped)
│   │   │   └── {date}/                             # Subfolder for each backup snapshot date
│   │   │
│   │   ├── exports/                                # Daily export artifacts (for audit/recovery)
│   │   │   └── {date}/                             # Subfolder for each export snapshot date
│   │   │
│   │   ├── keys/                                   # All Fernet encryption keys, one per secret/config category (NEVER committed) - created during the provisioning process
│   │   │   ├── .keep                               # Ensures empty keys folder is tracked in git
│   │   │   ├── acct_api.key                        # Fernet key for encrypting/decrypting acct_api_credentials.json.enc
│   │   │   ├── broker.key                          # Fernet key for encrypting/decrypting broker_credentials.json.enc
│   │   │   ├── env.key                             # Fernet key for decrypting env.json.enc (general bot config)
│   │   │   ├── env_bot.key                         # Fernet key for decrypting .env_bot.enc (runtime bot settings)
│   │   │   ├── login.key                           # Fernet key for encrypting SYSTEM_USERS.db (login/auth)
│   │   │   ├── runtime_config.key		            # Fernet key for encrypting/decrypting runtime_config.json.enc (persistent bot runtime config)
│   │   │   ├── screener_api.key                    # Fernet key for decrypting screener_api.json.enc
│   │   │   └── smtp.key                            # Fernet key for decrypting smtp_credentials.json.enc
│   │   │
│   │   ├── secrets/				                # All encrypted JSON config files—each unlocked with corresponding Fernet key - created during the provisioning process
│   │   │   ├── acct_api_credentials.json.enc       # Encrypted API token/creds for accounting endpoint (if used)
│   │   │   ├── alert_channels.json.enc             # Encrypted alert channel configuration (email, Slack, etc.)
│   │   │   ├── bot_identity.json.enc		        # Encrypted bot identity and entity/jurisdiction metadata
│   │   │   ├── broker_credentials.json.enc         # Encrypted broker API credentials (ALPACA/IBKR, etc.)
│   │   │   ├── network_config.json.enc   		    # Encrypted network config (hostname, IP, port)
│   │   │   ├── runtime_config.json.enc		        # Encrypted persistent runtime bot configuration settings
│   │   │   ├── smtp_credentials.json.enc           # Encrypted SMTP credentials for notifications
│   │   │   └── screener_api.json.enc               # Encrypted screener API credentials
│   │   │
│   │   └── migration_archives/                     # Historical config/ledger/backup artifacts (for manual recovery/migration)
│   │
│   ├── strategy/			                        # Strategy Logic
│   │   ├── strategy_close.py                       # End-of-day logic (momentum/fade)
│   │   ├── strategy_meta.py                        # Strategy thresholds and global constants
│   │   ├── strategy_mid.py                         # VWAP-based mid-session logic
│   │   ├── strategy_open.py                        # Opening range breakout logic
│   │   └── strategy_router.py                      # Directs execution based on STRATEGY_SEQUENCE and .env_bot config
│   │ 
│   ├── support/                                # Core support modules: runtime, encryption, path, config validation, COA utilities
│   │   ├── .env_bot.enc                        # Encrypted runtime bot config (Fernet-encrypted; generated by Web UI/settings_web.py)
│   │   ├── bootstrap_utils.py                  # UI-only first-run logic: detects bootstrap status, determines page to show (config or login); calls db_bootstrap.py
│   │   ├── build_check.py                      # Validates COA/schema/key alignment and file integrity at build/startup; blocks on error (calls path_resolver.py)
│   │   ├── config_fetch.py                     # Loads, validates, and returns the latest live config for key/secret rotation; provides config dicts to provisioning and key_manager logic
│   │   ├── decrypt_secrets.py                  # Loads/decrypts *.json.enc secrets using Fernet keys from storage/keys/; called by config/runtime modules
│   │   ├── encrypt_secrets.py                  # Encrypts/rotates all secret/config JSONs in storage/secrets/ using Fernet keys from storage/keys/
│   │   ├── path_resolver.py                    # Resolves storage/output/config paths for all modules, based on BOT_IDENTITY and file category; called by all runtime modules for dynamic file routing
│   │   ├── service_bot.py                      # (Optional) Systemd-compatible daemon: manages TradeBot process as a background service (not required for bootstrap)
│   │   ├── utils_config.py                     # Loads/validates all bot/env config files (.env, .env_bot, runtime envs)
│   │   ├── utils_identity.py                   # Computes/parses BOT_IDENTITY_STRING; manages all identity metadata for file/output routing
│   │   ├── utils_log.py                        # Provides structured logging for system/trade/web/app events
│   │   └── utils_time.py                       # Time and scheduling utilities (UTC conversion, timestamps, session windows)
│   │
│   ├── test/				                        # Complete automated and manual test suite for all bot modules. All test scripts only read from secrets/keys created by Web UI; never modify config or secrets.
│   │   ├── integration_test_runner.py              # TEST RUNNER. Launched by main.py in TEST_MODE, or manually/CI. Simulates full bot bootstrap, strategy, and shutdown. Writes only to test logs/artifacts. Never launches or supervises any watcher/worker.
│   │   ├── test_backtest_engine.py                 # DEV/CI TEST. Validates backtest engine vs. reference metrics, equity curves. Never launched in production.
│   │   ├── test_broker_trade_stub.py               # DEV/CI TEST. Sends randomized test trades to broker adapters, checks order flow and logging. Never launched in production.
│   │   ├── test_coa_consistency.py                 # DEV/CI TEST. Confirms COA JSON/schema matches, validates COA integration with utils_coa.py. Never launched in production.
│   │   ├── test_coa_web_endpoints.py               # DEV/CI TEST. End-to-end API/UI tests for COA web endpoints (/coa, /coa/api, /coa/export). Never launched in production.
│   │   ├── test_env_bot.py                         # DEV/CI TEST. Verifies .env_bot config, required variables, and structure. Never launched in production.
│   │   ├── test_ledger_schema.py                   # DEV/CI TEST. Ensures all ledgers match schema, enforce double-entry and compliance. Never launched in production.
│   │   ├── test_logging_format.py                  # DEV/CI TEST. Validates structure, content, and completeness of all bot log files. Never launched in production.
│   │   ├── test_main_bot.py                        # DEV/CI TEST. Asserts session start/stop lifecycle, CLI/web triggers, and state changes. Never launched in production.
│   │   ├── test_screener_integration.py            # DEV/CI TEST. Full integration/compatibility test for all screener modules, API secrets, and symbol eligibility. Never launched in production.
│   │   ├── test_screener_random.py                 # DEV/CI TEST. Tests screener with randomized symbols for eligibility/filtering logic. Never launched in production.
│   │   ├── test_screener_credentials.py            # DEV/CI TEST. Unit and integration tests for screener credential management module, verifying encryption, persistence, and UI integration.
│   │   ├── test_strategy_selfcheck.py              # DEV/CI TEST. Runs .self_check() on all strategy modules, validates config/signal paths. Never launched in production.
│   │   ├── test_strategy_tuner.py                  # DEV/CI TEST. Tests strategy modules with sample tickers; validates entry/exit, thresholds. Never launched in production.
│   │   └── test_universe_cache.py                  # DEV/CI TEST. Verifies universe cache schema, age, and content. Never launched in production.
│   │
│   └── trading/			                    # Trade Execution
│       ├── instruments.py
│       ├── kill_switch.py                      # Triggers shutdown on DAILY_LOSS_LIMIT or catastrophic loss violation.
│       ├── logs_bot.py                         # Runtime logging of trade operations to output/logs.
│       ├── notifier_bot.py                     # Sends alerts to configured channels (email/Slack/SMS/PagerDuty).
│       ├── orders_bot.py                       # Handles order submission, modifies/fills, and broker feedback.
│       ├── reporting_bot.py                    # Pushes trades to accounting system; manages ledger output and COA compliance.
│       ├── risk_bot.py                         # Enforces all risk constraints (caps, allocations, Defense Mode, open trades).
│       ├── utils_coa.py                        # Loads, validates, and updates the bot COA; integrates with tbot_ledger_coa_template.json and supports Web UI editing.
│       ├── utils_etf.py                        # Resolves ETF and inverse ETF tickers for supported symbols (top 20+ ETFs, as per project specifications).
│       ├── utils_puts.py                       # Returns put option contract specs for any supported broker.
│       └── utils_shorts.py                     # Provides broker-agnostic helpers for executing short trades, including real shorts, synthetic shorts, and alternatives.
│   
└── tbot_web/                                   # Web dashboard: bot monitoring, logs, user auth, control, and COA management
    ├── static/                                 # Static frontend resources
    │   ├── fnt/                                # Embedded fonts used in the interface
    │   │
    │   ├── js/
    │   │   ├── configuration.js            # Handles configuration form logic, validation, and AJAX submits on configuration.html
    │   │   ├── main_ui.js         		    # Handles live dashboard behavior, state polling, and controls config overlay in main.html
    │   │   ├── wait.js            		    # Waits for bot to finish initialization/provisioning; auto-redirects to main.html when ready
    │   │   ├── universe.js                 # updates and serves status components to Universe.html
    │   │   ├── screener_credentials.js     # JS: Screener credential management UI logic, API calls, masking, field validation
    │   │   └── shared_utils.js    		    # Provides shared API helpers and utility functions for frontend JavaScript modules        
    │   │
    │   └── css/
    │       ├── base
    │       │   ├── layout.css                      # Global layout, structure, and centering for all pages
    │       │   ├── normalize.css                   # CSS reset for cross-browser consistency
    │       │   └── variables.css                   # Custom CSS variables for colors, fonts, spacing
    │       │
    │       ├── components
    │       │   ├── buttons.css                     # Button styling and layout rules
    │       │   ├── hamburger.css                   # Hamburger menu animation and mobile nav styles
    │       │   ├── spinner.css                     # Spinner and progress indicator animation
    │       │   └── tabs.css                        # Tab navigation styles
    │       │
    │       ├── pages
    │       │   ├── account.css                     # Account page styles: profile and settings forms
    │       │   ├── configuration.css               # Configuration page (forms, blocks, horizontal wrapping)
    │       │   ├── edit_user.css                   # Edit user page: user edit form layout and alignment
    │       │   ├── ledger.css                      # Ledger page: table formatting and alignment
    │       │   ├── logs.css                        # Logs page: log view container, filter bar, color
    │       │   ├── main.css                        # Main container, alignment, and page structure styles
    │       │   ├── password_reset.css              # Password reset forms: input and feedback styling
    │       │   ├── register.css                    # Register page: admin account creation form
    │       │   ├── screener_credentials.css        # CSS: Stylesheet for screener credential config page (layout, masking, validation)
    │       │   ├── settings.css                    # Settings page: settings form blocks and layout
    │       │   ├── status.css                      # Status page: status grid, error color, responsive tweaks
    │       │   ├── test.css                        # Test mode/system test sequence page
    │       │   ├── users.css                       # Users page: user list, RBAC, user management forms
    │       │   └── universe.css                    # Symbol universe UI page - monitor rebuild and re-filter Symbol Universe
    │       │
    │       └── shared
    │           ├── forms.css                       # Form input and UI style rules
    │           └── responsive.css                  # Responsive/adaptive layout rules
    │
    ├── favicon.ico / favicon.gif               # Site icon for browser tab
    │
    ├── py/                                      # Flask backend endpoints, blueprints, business logic
    │   ├── __init__.py                         # Registers all Flask blueprints (main entry)
    │   ├── account_web.py                      # User account/profile endpoints (view/update account details)
    │   ├── coa_web.py                          # COA endpoints: view, edit, export; calls utils_coa_web.py, config_encryption.py. Never launches any worker/watcher.
    │   ├── configuration_web.py                # Handles configuration route: displays, saves, and provisions config; calls config_encryption, key_manager, security_users. Never launches any worker/watcher.
    │   ├── ledger_web.py		                # Ledger management API providing endpoints for viewing, uploading broker CSVs, reconciling, editing, and resolving ledger entries; all changes are tracked with versioning and audit logs. Only admin users can perform edits or reconciliations. Never launches any worker/watcher.
    │   ├── login_web.py                        # User login/logout/session; calls auth_web.py, security_users.py, session_manager.py. Never launches any worker/watcher.
    │   ├── logout_web.py                       # Handles session termination and logout logic; updates session and user state. Never launches any worker/watcher.
    │   ├── logs_web.py                         # Displays log output (read-only); calls utils_log.py. Never writes logs; never launches any worker/watcher.
    │   ├── main_web.py                         # Orchestrates main UI shell; registers routes, manages state; triggers bot start if required; links wait.html and ledger.html. Never launches any worker/watcher.
    │   ├── password_reset_web.py               # Handles password reset requests and token validation for users.
    │   ├── portal_web_main.py                  # Flask app for provisioning bootstrapping, and all static files and all operational blueprints (phases in this order: configuration → provisioning → bootstrapping → registration → login → main_web.py that shows: status, Settings, logs, ledger, COA, test, configuration, account). Never launches any worker/watcher.
    │   ├── register_web.py			            # Handles user registration logic and SYSTEM_USERS.db creation/updating. Never launches any worker/watcher.
    │   ├── run_web.py                          # Main entry point into web UI (CLI). Never launches any worker/watcher.
    │   ├── screener_credentials_web.py         # Flask blueprint: routes and API endpoints for screener credential config and audit
    │   ├── settings_web.py                     # Bot strategy/runtime settings routes; calls utils_config.py (never handles credentials). Never launches any worker/watcher.
    │   ├── start_stop_web.py                   # API/UI for bot control lifecycle (start/stop); writes control files (flags) for main.py. Never launches any worker/watcher.
    │   ├── status_web.py                       # Serves live bot/system status; reports active session/metrics from status sources. Never launches any worker/watcher.
    │   ├── test_web.py				            # Dedicated backend blueprint handling TEST_MODE control flag creation, test start sequencing, real-time log streaming, and test completion flag reset. Never launches any worker/watcher; writes test_mode.flag only. Reads test_mode.log for UI.
    │   ├── universe_web.py                     # Endpoints for viewing, rebuilding, and exporting the symbol universe cache.
    │   └── users_web.py                        # User list, create, edit, delete, and RBAC assignment endpoints (admin only).
    │
    ├── robots.txt                              # Blocks bots and search engine indexing (security)
    │
    ├── support/                                # Web UI supporting modules: auth, crypto, session, CSRF, helpers. Never launches any worker/watcher; only imported.
    │   ├── auth_web.py                         # Auth helpers; bcrypt password validation/hashing. Only imported.
    │   ├── configuration_loader.py		        # Loads and decrypts config for UI (never handles keys). Only imported.
    │   ├── configuration_saver.py		        # Saves/encrypts config from UI (never creates keys). Only imported.
    │   ├── csrf_protection.py                  # CSRF protection for web forms and blueprints. Only imported.
    │   ├── default_config_loader.py            # Loads config defaults/templates for UI (never touches secrets/keys). Only imported.
    │   ├── secrets_manager.py                  # Backend utilities: encryption/decryption, atomic writes, credential loader
    │   ├── security_users.py                   # RBAC/user CRUD; Fernet key helpers for user/auth secrets. Only imported.
    │   ├── session_manager.py                  # Web session management, token handling, timeouts. Only imported.
    │   ├── utils_coa_web.py			        # Loads, validates, and manages the bot’s Chart of Accounts (COA); interfaces with tbot_ledger_coa_template.json and provides COA to other modules. Only imported.
    │   └── utils_web.py                        # Minor UI/web helpers, non-secret logic. Only imported.
    │
    └── templates/                              # Jinja2 HTML UI templates (rendered for user)
        ├── account.html                        # User account/profile page
        ├── coa.html                            # Human-readable web form/table for COA viewing and editing (editable if RBAC allows)
        ├── configuration.html                  # Web form for updating email, API, and broker credential configuration via web UI 
        ├── edit_user.html                      # Edit individual user details (admin only)
        ├── index.html                          # Login page
        ├── ledger.html			                # Human-readable web form and table for viewing, adding, editing, and reconciling ledger entries, with admin-only access to edit or resolve discrepancies
        ├── logs.html                           # Log viewer (view bot/system logs)
        ├── main.html                           # Dashboard shell (all UI widgets)
        ├── password_reset_form.html            # Password reset entry form (token/entry point)
        ├── password_reset_request.html         # Password reset request form (initiate reset via email)
        ├── register.html			            # Flask template for user registration form
        ├── screener_credentials.html           # Jinja2: Screener credentials config page UI (add/edit/rotate/remove, masked fields)
        ├── settings.html                       # Web form for updating bot trading strategy and runtime config variables
        ├── status.html                         # Displays live bot health, strategies, PnL, session state, and key metrics (live data from status.json)
        ├── test.html				            # Web UI page providing controls to trigger TEST_MODE and view live test logs and results.
        ├── universe.html			            # Web UI page providing controls to inspect and modify the symbol universe
        ├── users.html                          # List and manage all users (admin only)
        └── wait.html                   	    # Spinner/progress bar shown while bot is initializing; triggers transition to main.html when ready





