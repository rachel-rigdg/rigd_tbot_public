================================================================================
Document: 010
010_Introduction_Objective_and_Overview
Version: v046
Date: UTC:2025-06-27 00:00:00
================================================================================


================================================================================
Master_Index_and_Summary
================================================================================

This master index provides a comprehensive reference to all TradeBot system specification documents. Each entry includes document number, filename, title, version, timestamp, summary of contents, and cross-reference notes for quick lookup and navigation.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Filename                                      	| Title/Subject                                  		| Summary & Key Contents                                                 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 000_chatKick-off.txt                          		| Initial Chat Kickoff & Setup Overview           	| Project goals, workflow, onboarding, and initial constraints            
| 010_Introduction_Objective_and_Overview_v045.txt 		| Objective & System Overview                 		| High-level system objective, instructions, deployment, time zone std    
| 020_Directory_Structure_v045.txt               		| Directory Structure & Module Layout           	| Authoritative directory/file structure, launch/control notes            
| 030_Trading_Bot_Core_Specs_v045.txt            		| Core Trading Bot Specifications                	| Infrastructure, risk, strategy logic, integration, float/ledger rules   
| 040_Screener_Symbol_Universe_v045.txt          		| Symbol Screener & Universe Controls            	| Screener modules, universe management, dynamic symbol filtering         
| 050_Enhancements_and_Safety_v045.txt           		| Safety/Enhancement Modules                    	| Kill switch, risk gating, VIX, filters, session enforcement             
| 060_Accounting_Integration_v045.txt            		| Accounting & Ledger Integration                 	| OFX schema, double-entry, COA, export, reconciliation                   
| 070_Runtime_Lifecycle_Logging_Reporting_and_Testing_v045.txt 	| Runtime, Logging, Testing, & Reporting 		| Session lifecycle, state machine, logging/report/test specs, TEST_MODE  
| 080_Env_Security_Integration_and_Expansion_Modules.txt 	| Env, Security, & Expansion Modules        		| Environment, encrypted config, key management, future enhancements      
| 090_Web_Interface_and_Dashboard_v045.txt       		| Web UI & Dashboard Specification                	| Flask UI, RBAC, bot control, dashboard logic, live status, COA mgmt    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usage Notes:
- Reference filenames and versions for currency.
- All content is current as of v045.
- Old v042/legacy documents are deprecated; do not consult prior indices.
- If in doubt, defer to the most recent versioned spec above.

================================================================================
Objective_and_Overview
================================================================================

This module contains the TradeBot system objective, high-level overview, system instructions, deployment notes, platform compatibility, and time zone standards.

Contents:
- Objective (UPDATED)
- System Instructions
- Deployment Notes (Updated)
- Current Platforms (Single Broker)
- Time Zone Standards

All specifications and requirements are mandatory and governed by the RIGD Trading Bot build process.


==============================
Objective (UPDATED)
==============================

TradeBot (TBot) executes bi-directional trades using long equity for bullish signals and inverse ETFs or long puts for bearish signals, strictly determined by SHORT_TYPE_* values in .env_bot. Brokers must support long equity and at least one approved bearish instrument (long put or inverse ETF) per assignment.

The system operates intraday strategies in real time with fully automated, risk-weighted execution. All risk controls are enforced exclusively via .env_bot parameters (DAILY_LOSS_LIMIT, MAX_RISK_PER_TRADE, TOTAL_ALLOCATION, MAX_OPEN_POSITIONS, etc.). **All trade output is logged immutably to OFX-compliant, entity-scoped SQLite ledgers with double-entry enforcement and UTC timestamps.**

**Bot bootstrap is initiated solely through a required Web UI submission (`configuration.html`), which invokes `configuration_web.py` and the required init scripts.** This is the exclusive entry point for creating users, credentials, system logs, identity metadata, and initial Chart of Accounts (COA)—CLI-based initialization is explicitly forbidden.

**COA Management and Editing:**
- The bot's Chart of Accounts (COA) is self-contained and managed entirely within the bot instance.
- **All COA creation, updates, and human-readable exports are performed via a dedicated COA Management page in the tbot_web UI.**
- The default COA is generated on initial bootstrap and can be viewed or modified only through the Web UI. CLI or accounting system pushes are not permitted.
- COA metadata is stored in the `coa_metadata` table with all required versioning and extensibility fields.
- **All Web UI/admin logic for COA must utilize `utils_coa_web.py`, and all ledger/schema integration must utilize `coa_utils_ledger.py`, per the current directory specification.**

**Accounting System Role (Post-Session Only):**
- The accounting system may read/export ledgers and trade data after session completion for audit, reporting, or reconciliation.
- All float injections, reserves, and transfers are executed externally after notification or on operator schedule; the bot only logs float deviation/rebalance events and does not manage any funds transfer.
- All entity, broker, float, and config metadata used by the bot at runtime must be present in the locally decrypted config files (`.env_bot.enc`, `bot_identity.json.enc`) at session start. No runtime injection or modification by any external system is permitted.

**Ledger and trade routing rules:**
- All execution toggles are set via `.env_bot` (`ALPACA_ENABLED`, `IBKR_ENABLED`, etc.), with per-strategy toggles (`STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`).
- **All trades and PnL activity must write to `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`**, with all ledger paths and metadata defined by internal config loaded at session start.
- **The bot does not read, manage, or calculate float or ledger updates from any external system during runtime; all provisioning occurs during Web UI bootstrap or by manual config update only.**

PnL, float tracking, and revenue movements are ingested, reconciled, and logged by the accounting system only after session completion. 

TEST_MODE is an active, runtime-only feature triggered by the presence of `tbot_bot/control/test_mode.flag`, typically set via the Web UI (`test_web.py`). When TEST_MODE is enabled, `main.py` supervises execution of dedicated test routines in `tbot_bot/test/`—these simulate end-to-end bot logic without affecting production ledgers or outputs. No production data or state is modified in TEST_MODE, and all test logs/artifacts are isolated from live outputs.

==============================
System Instructions 
==============================

1. All environment-specific values MUST be sourced ONLY from `.env`, `.env_enc`, `.env_bot`, `.env_bot.enc`. No hardcoded API keys, thresholds, credentials, toggles, file paths, or mode flags. `DISABLED ≠ OMITTED`: All logic must explicitly evaluate suppressed (disabled) states.

2. Inline comments REQUIRED in all generated code: logic branches, `.env_bot` references, and all condition paths must be clearly explained.

3. All file paths must be relative and platform-agnostic. Code must run unmodified on macOS, Linux, and all prod servers.

4. Ledger routing: All trade activity writes to the OFX-compliant, entity-scoped SQLite ledger. Ledger filename: `{ENTITY_CODE}_{JURISDICTION_CODE}_{account_name}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db` (account_name = lowercase ledger tag). **Ledger path, float, and all metadata are resolved at session start from internal config files; the bot NEVER receives runtime injection or push from any external system.** All ledger writes must be preceded by a backup. Test modules under `tbot_bot/test/` may simulate trade placement but **must NEVER alter or bypass production ledger logic**.

5. NO re-ingestion of `.csv` or `.json` logs permitted: external audit artifacts only.

6. Every strategy module must implement `.self_check()`. `main.py` must halt if any `.self_check()` fails. Failures must log strategy, reason, error context, with UTC timestamp.

7. `env_bot.py` must validate all required keys from `.env_bot.enc`, decrypted using `storage/keys/env.key`. Missing/malformed keys must raise a fatal, human-readable startup error.

8. Logs and ledger outputs must include: `timestamp`, `strategy_name`, `ticker`, `side`, `size`, `entry_price`, `exit_price`, `PnL`, `broker`, `error_code` (if applicable). Logs must use global `LOG_FORMAT` (CSV/JSON) from `.env_bot`.

9. `VERSION.md` is mandatory: must include version tag, structural changes, logic differences, and behavior deltas.

10. All modules must remain executable independently. Core logic (`tbot_bot/`) must NEVER import from Flask or `tbot_web/`. Web UI is independent and must not affect trading logic or risk controls. **Bootstrap scripts (`init_system_users.py`, `init_system_logs.py`, etc.) are executed ONLY via the Web UI upon `configuration.html` form submission, triggered by `configuration_web.py`. CLI-based bootstrap of user/credential/log systems is no longer supported.**

11. Strategy routing and broker enablement must be toggled ONLY via `.env_bot`: `ALPACA_ENABLED`, `IBKR_ENABLED`, `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`.

12. **The Chart of Accounts (COA) for the bot is fully self-contained and managed solely through a dedicated COA Management page in the tbot_web UI. All creation, modification, and export of the COA must occur via the Web UI. No CLI utilities, accounting system pushes, or external edits are permitted. The COA must be versioned, validated at runtime, and stored as both a JSON structure and a SQLite metadata table. All Web UI COA operations must use `utils_coa_web.py` and all ledger/schema operations must use `coa_utils_ledger.py`.**

13. **All Fernet keys and corresponding encrypted secrets (including those for ledger, COA, user credentials, and all config) must be rotated atomically and re-encrypted whenever any config, credential, or sensitive secret is modified, or a user is created/modified. This process is fully automated, with all affected files backed up before any overwrite. Old keys/secrets are never reused, and rotation requires no manual action.**  

14. Improvisation is FORBIDDEN. Clarify ambiguities before code changes. STRICT deterministic, auditable logic only.


================================================================================
Deployment Notes 
================================================================================

- All paths must be relative and cross-platform compatible (macOS, Linux, cloud).
- `tbot_bot/` must run independently of `tbot_web/`; core trading must continue if web UI is disabled.
- Logs, ledger exports, and backup behavior remain active regardless of web interface state.
- Only one broker should be enabled (`BROKER_NAME=ALPACA`, `ALPACA_ENABLED=true`, etc.).
- Broker API keys from `.env` must validate at startup—failure causes immediate shutdown.
- Strategy toggles: `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`.
- Pre-trade validation includes:
  - Market spread ≤ 1.5% of entry price
  - Volume ≥ `MIN_VOLUME_THRESHOLD`
  - No violations of `MAX_RISK_PER_TRADE` or `DAILY_LOSS_LIMIT`
- Auto-shutdown triggers:
  - Broker API failure (`watchdog_bot.py`)
  - Critical runtime error (`error_handler.py`)
  - Loss breach (`kill_switch.py`)
- Ledger write format: `entities/{ENTITY}_{JURIS}_{account}_{BROKER}_{BOT_ID}_BOT_ledger.db`
- Each ledger write is preceded by a timestamped backup (`backup_ledgers.py`): `entities/{ENTITY}_{JURIS}/backups/`
- OFX exports are generated only by `/export/generate_ofx.py`
- Log files: `/output/logs/open.log`, `/mid.log`, `/close.log`, `/unresolved_orders.log`
- Post-session logs may be zipped/archived (`auto_backup.py`)
- Optional cloud sync: `scripts/upload_backups_to_cloud.sh`
- Backups must not block live ledger writes; all archives are timestamped
- Session timing: `.env_bot` defines `START_TIME_*`, `[STRAT]_ANALYSIS_TIME`, `[STRAT]_MONITORING_TIME`
- Respect `TRADING_DAYS`—block execution on weekends/holidays

--------------------------------------------------------------------------------
COA/Schema Enforcement 
--------------------------------------------------------------------------------

- All bot ledger files **must** match the schema defined in `tbot_bot/accounting/tbot_ledger_schema.sql` and the COA defined in `tbot_bot/accounting/tbot_ledger_coa_template.json`.
- The COA must be present in each bot ledger as a dedicated table (`coa_metadata`) containing: `currency_code`, `entity_code`, `jurisdiction_code`, `coa_version`, `created_at_utc`, `last_updated_utc`.
- Any schema or COA mismatch at runtime (detected by `build_check.py` or ledger init scripts) must block execution and log a fatal error.
- The bot’s COA is self-contained and managed exclusively via the tbot_web UI (`coa_web.py`, `coa.html`). All edits and exports are performed here; no external push/pull from accounting.
- Human-readable COA exports are generated by the web UI and stored in `/output/ledgers/` for reference/audit.
- On new ledger creation, the COA table is initialized from the internal COA (default or UI-edited version) and locked for double-entry enforcement.
- All account transactions are validated against the COA at time of entry.
- **COA operations in the UI must use `utils_coa_web.py`; ledger and schema checks must use `coa_utils_ledger.py`.**


================================================================================
Current Platforms (Single Broker)
================================================================================

Development:
- Local dev on macOS 15.2, Python 3.11+
- macOS/Linux compatible only (no platform-specific code)
- Use VS Code, Black/Ruff for linting/formatting
- Scripts run via terminal or cron, not GUI
- Test logs/export saved to `logs/bot/sessions/`, `backups/`

Production:
- Runs on Ubuntu 22.04 LTS (DigitalOcean)
- Deployed via SCP/SFTP or `git pull` to prod branch
- Run mode:
  - `tbot_bot/runtime/main.py` is the **single systemd entrypoint** for all bot operations (launched by `tbot_bot.service`)
  - No other script or CLI tool launches bot workers, watchers, or strategies
  - Manual or cron launches of `start_bot.py` or `service_bot.py` are **deprecated and unsupported**; control is via Web UI flags and systemd only
- Logs:
  - `output/{BOT_IDENTITY}/logs/*.log` – strategy logs, unresolved orders, errors
  - `output/{BOT_IDENTITY}/summaries/` – session summaries
  - `output/{BOT_IDENTITY}/trades/` – CSV/JSON trade histories

Brokers:
- One active broker per bot
- Broker, float, and related metadata assigned by internal config loaded at bootstrap (`.env_bot.enc`, `bot_identity.json.enc`)
- Modular integrations:
  - Alpaca (default equities)
  - IBKR (ETFs, puts)
  - Tradier/Webull (test only)
- Each must pass `.self_check()`

Market Data:
- Finnhub API via `screeners/finnhub_screener.py`
- Pre/intraday/afterhours scan modes
- Filters: volume, float, price, gap via `.env_bot`

Accounting:
- All trades and ledgers are available for post-session ingestion/export by the accounting system for audit, reporting, and reconciliation.
- Ledger format: `{ENTITY}_{JURIS}_{BROKER}_{BOT_ID}_BOT_ledger.db`
- Structure in `ledger_schema.py`, OFX-compliant
- **COA required:** Each ledger is initialized and validated against `tbot_ledger_schema.sql` and `tbot_ledger_coa_template.json`, with a `coa_metadata` table and account hierarchy included at creation.
- OFX exports only via `generate_ofx.py`
- TradeBot does not emit CSV for ledgers; all CSV/JSON outputs are for human audit only

Web Interface:
- `tbot_web/` Flask dashboard (modular, phase-driven)
- Features:
  - Encrypted login (bcrypt + Fernet keys, no plaintext; `.env`/env vars only for Flask secret key)
  - Multi-phase config/registration/startup: UI phases for bootstrap, registration, and main dashboard, orchestrated by bot state and systemd units
  - Secure config UI: All configuration and credentials entered via Web UI, never CLI
  - Logs/status: Live dashboard, logs, and bot status read from `status.json` and log files per bot
  - Start/Stop: UI triggers write `control_start.txt`, `control_stop.txt` for systemd/bot lifecycle
  - **COA management:** COA can be viewed and edited exclusively through a dedicated tbot_web UI page, with RBAC enforcement. Human-readable COA export in Markdown/CSV. All edits versioned and audit-logged.

Alerts:
- Optional SMTP email via `.env`:
  - `NOTIFY_ON_FILL=true`, `NOTIFY_ON_EXIT=true`
- SMTP creds from DreamHost/etc. in `.env`

Security:
- `.env_bot` encrypted → `.env_bot.enc` via `tools/encrypt_env_bot.py`
- AES key in `.env` as `ENV_BOT_KEY`
- All encrypted files ignored via `.scpignore_*`
- **All core configuration, COA management, and secrets (including those for accounting and credentials) are subject to atomic Fernet key and secret rotation. Whenever any sensitive config or credential is changed, or any user is created/modified, all relevant keys and encrypted secrets are automatically regenerated and re-encrypted, with robust backup and no manual action required.**

Backup:
- Logs + ledgers archived via `auto_backup.py`
- Stored under `backups/`, upload via `upload_backups_to_cloud.sh`
- Secondary replication recommended (FTP/S3/ProtonVault)

Deployment Verification:
- Dry-run test required pre-live
- Must confirm:
  - Broker API up
  - Trade logs written
  - Ledger writes (COA present and schema validated)
  - Strategy triggers
  - Alerts (if configured)

Recovery:
- Backups must be timestamped + encrypted
- Mirror logs/ledgers to vault at EOD
- Regular integrity checks on `backups/` for audit/failure recovery

================================================================================
Time Zone Standards
================================================================================

- All time variables, logs, strategy triggers, ledger entries, and alerts use **UTC (Coordinated Universal Time)**—this is enforced system-wide.
- Strategy start times in `.env_bot` (e.g., `START_TIME_OPEN`, `START_TIME_MID`, `START_TIME_CLOSE`) must be specified in UTC.
- Ledger writes (e.g., `entities/{ENTITY}_{JURIS}_{BROKER}_{BOT_ID}_BOT_ledger.db`) **must set `DTPOSTED` and all OFX timestamps in UTC**.
- All COA/ledger metadata tables (`coa_metadata`) include `created_at_utc` and `last_updated_utc` fields, set in UTC at creation/update.
- Internal comparisons in `strategy_router.py`, `status_bot.py`, and time utilities must always convert or standardize to UTC before decision logic or log writes.
- **Rationale:** UTC eliminates ambiguity from DST, local zones, or server environments; ensures OFX compliance, reliable cross-entity reconciliation, and robust scheduling for distributed deployments.
- **Example mapping:**
  - 14:30 UTC → 9:30 AM EST (Market Open)
  - 15:30 UTC → 10:30 AM EST (Midday)
  - 19:30 UTC → 2:30 PM EST (Close)
- **Local debugging:** Always convert between UTC and {JURIS} zone before interpreting logs or DB entries.
- **Best practice:** Implement and use in `utils_time.py` (not `utils_bot.py`):

```python
from datetime import datetime, timezone

def utc_now():
    return datetime.utcnow().replace(tzinfo=timezone.utc)


================================================================================
Long-Term Holdings Management Module Specification
================================================================================

------------------------------------------
Objective:
------------------------------------------
Automate the management of long-term ETF holdings alongside the trading bot's cash float. The module ensures:

- Sufficient cash float for trading bot operations.
- Ongoing tax reserve funding for realized gains.
- Automated payroll extraction for operator income.
- Periodic portfolio rebalancing into target ETF allocations.

------------------------------------------
Functional Requirements:
------------------------------------------

1. **ETF Management**
   - User specifies up to 20 ETF tickers.
   - User defines target allocation percentages (equal-weight or custom).
   - ETF trades support fractional share orders.
   - Portfolio allocation targets are persisted in the bot configuration.

2. **Cash Float Management**
   - User sets **Float Target %** (e.g. 10% of total account value).
   - Bot monitors cash balance nightly (or after each strategy session).
   - If cash < Float Target %, sells ETF fractions to top up.
   - If cash > Float Target %, optional purchase of ETFs to restore target allocations.

3. **Tax Reserve Management**
   - User sets **Tax Reserve %** (e.g. 20%).
   - Applies to all **realized gains** from:
     - Trading bot activities.
     - ETF sales (including cash top-ups).
   - Nightly allocation diverts calculated amount to Tax Reserve account.
   - Tax Reserve held in cash or designated low-volatility vehicle.

4. **Payroll Allocation**
   - User sets **Payroll %** (e.g. 10–20%).
   - Applies to net realized gains *after* tax reserve allocation.
   - Nightly process moves this amount to the designated Payroll account.

5. **Reinvestment of Remaining Gains**
   - Remaining profit (after Tax and Payroll allocations) is reinvested into ETFs.
   - Purchases respect target allocation percentages.
   - Supports Dollar Cost Averaging (DCA) style buying.

6. **Periodic Portfolio Rebalancing**
   - User sets **Rebalance Interval** (e.g. 3, 6, or 12 months).
   - On scheduled rebalance, system:
     - Compares current ETF weights to target allocations.
     - Executes fractional buy/sell orders to restore targets.
     - Records all transactions with timestamp and audit log.

------------------------------------------
Web UI Management Page Requirements:
------------------------------------------

- **ETF Configuration Section**
  - Add up to 20 ETFs.
  - Set target allocation percentages.
  - Display current holdings vs. targets.

- **Adjustable Settings Section**
  - Float Target % (default: 10%)
  - Tax Reserve % (default: 20%)
  - Payroll % (default: 10–20%)
  - Rebalance Interval (choices: 3, 6, 12 months)
  - Enable/disable Auto-Rebalance toggle.

- **Current Status Section**
  - Display:
    - Total Account Value.
    - Cash Balance.
    - Tax Reserve Balance.
    - Payroll Reserve Balance.
    - ETF Holdings and % allocations.
  - Flag deviations from targets.

- **Manual Controls**
  - Trigger Immediate Rebalance.
  - Trigger Immediate Cash Top-Up.
  - Export holdings and allocation report.

------------------------------------------
Automated Nightly Workflow:
------------------------------------------

1. Compute total account value.
2. Verify cash balance against Float Target %:
   - If below target, sell ETF fractions to restore cash.
3. Calculate **Realized Gains** for the day:
   - Sum bot profits and ETF sales.
4. Allocate **Tax Reserve**:
   - Tax Reserve = Realized Gains × Tax Reserve %
   - Move funds to Tax Reserve bucket/account.
5. Allocate **Payroll**:
   - Payroll = (Realized Gains - Tax Reserve) × Payroll %
   - Move funds to Payroll account.
6. Allocate Remaining Profit:
   - Reinvest in ETFs according to target allocations.
   - Support fractional purchases.
7. Log all actions with timestamp, strategy context, and resulting balances.

------------------------------------------
Rebalancing Workflow:
------------------------------------------

- Runs on schedule (e.g. every 6 months) or manual trigger.
- Fetch current ETF holdings and values.
- Calculate deviations from target allocations.
- Execute fractional buy/sell orders to realign.
- Log all transactions with timestamp and audit trail.

------------------------------------------
Audit & Logging Requirements:
------------------------------------------

- All top-up, tax reserve, payroll, and ETF buy/sell actions are immutably logged.
- Logs include:
  - Timestamp (UTC)
  - Action type (top-up, rebalance, tax allocation, payroll)
  - Symbol
  - Quantity
  - Price
  - Total value
  - Resulting account balances
- Logs stored in structured JSON format.
- Exposed in Web UI for review and export.

------------------------------------------
Broker Integration Requirements:
------------------------------------------

- Must support:
  - Fractional share orders.
  - Reading full account holdings.
  - Placing market buy/sell orders.
- Broker API credentials managed via existing encrypted secrets system.
- All API actions logged with UTC timestamp and audit metadata.

------------------------------------------
Configuration Storage:
------------------------------------------

- All user-defined variables stored in encrypted config:
  - Float Target %
  - Tax Reserve %
  - Payroll %
  - ETF List and Allocations
  - Rebalance Interval
- Config changes trigger atomic key/secret rotation and backup per system policy.

------------------------------------------
Security & Compliance:
------------------------------------------

- All configuration and credentials encrypted at rest.
- Immutable, append-only audit logs.
- No manual CLI trades; all actions triggered via Web UI or automated schedule.
- Supports jurisdictional compliance via entity-specific ledgers and audit fields.

------------------------------------------
Example Default Settings:
------------------------------------------

- Float Target %: 10%
- Tax Reserve %: 20%
- Payroll %: 10%
- Rebalance Interval: 6 months
- ETFs:
  - SCHD: 50%
  - SCHY: 50%

------------------------------------------
Notes:
------------------------------------------

- Users can adjust all percentages at any time via Web UI.
- Supports multiple brokers and jurisdictions via modular design.
- System designed for full international ETF support in future expansion.




