================================================================================
Document: 090
Web_Interface_and_Dashboard
Version: v048
Date: UTC:2025-09-06 00:00:00
================================================================================

{BOT_IDENTITY} = {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}


================================================================================
Web_Interface_and_Dashboard
================================================================================

This module details the Flask-based Web UI, dashboard features, security, RBAC, COA management, modular multi-phase systemd integration, and all 2025-08 holdings/audit/security requirements for RIGD TradeBot.

Contents:
- Real-Time Monitoring Dashboard (COA Integration, v1.1)
- TEST_MODE Runtime Control and UI Integration
- Phase-Specific Flask App/Blueprint Modularization
- Full expanded web page, endpoint, and template inventory—including holdings management
- Screener Credential Management UI and Integration (Generic Indexed Format, 2025-07)
- Per-Page Modular CSS Loading (2025-07)
- **Ledger UI & API (Grouped Rows, Collapse/Expand, Balances Panel, Sync) — NEW**
- **COA Structure UI (Accounts Tree CRUD; RBAC) — NEW**
- **COA→Ledger Mapping UI (CRUD, Version History, Import/Export; RBAC) — NEW**

**Policy Enforcement:**  
- All provisioning, credential creation, Fernet key generation (including all *.key files), configuration management, COA operations, holdings management, and screener credential management are *triggered exclusively* via the tbot_web Web UI.  
- **No CLI or manual/external actions may create or modify credentials, secrets, keys, COA, holdings, or screener credentials after bootstrap.**  
- All privileged actions (key generation, secret creation, DB initialization, **full-system atomic key/secret rotation**) are performed by backend scripts in `tbot_bot/config/`, never directly by Flask or tbot_web.  
- **Any update to credentials, holdings, screener config, COA structure, or COA→Ledger mapping triggers full-system atomic key/secret rotation and versioned backup (to `tbot_bot/storage/backups/`).**  
- Flask only writes configuration/provisioning triggers and flag files; backend runner performs all privileged actions and bot launch.  
- **All file-system paths are resolved exclusively via `tbot_bot/support/path_resolver.py`; no hardcoded or relative paths.**

**UI Implementation Requirements:**
- Every user-facing page/template listed below must load its own dedicated CSS file from `/static/css/pages/`, ensuring precise, isolated styling.
- No changes to the iframe structure or Jinja2 rendering are permitted.
- **Ledger & Holdings UIs** (`ledger.html`, `holdings.html`) must source, reconcile, and display all data exclusively from the modular ledger implementation in `tbot_bot/accounting/ledger_modules/`. (Holdings configuration targets/symbols/splits are persisted in encrypted holdings secrets and accessed **only** via the holdings manager API.) Legacy `ledger.py` and `ledger_utils.py` are fully deprecated and forbidden for UI or API use.
- **COA Structure UI** (`coa.html`) must use the COA APIs provided via `tbot_bot/accounting/ledger_modules/` (no direct file writes).
- **COA→Ledger Mapping UI** (`coa_mapping.html`) must use `tbot_bot/accounting/coa_mapping_table.py` for load/save/versioning; mapping changes never touch the DB directly and are always versioned.
- **Ledger group rows support a persisted collapse/expand state per group**. The UI provides a per-group toggle and a global “Collapse all” control. State is stored server-side (`trade_group_collapsed`) and survives reloads and sessions.
- **Ledger balances panel** (right drawer) displays account/category balances and totals for the current filter/range. Data is fetched from `/ledger/balances` and computed by `tbot_bot/accounting/ledger_modules/ledger_balance.py`.
- Ledger sub-entries expose an inline **COA Account** selector (RBAC-guarded) for per-leg allocation updates. Changes are written via modular ledger APIs, are audit-logged, and reflected immediately in balances/reconciliation.
- **RBAC enforcement** is mandatory on all endpoints. Read-only views may be granted to `viewer`; **mutations (sync, edits, COA or mapping changes) require `admin`.**

**User-Facing Pages, Templates, and Endpoints (REQUIRED):**

- `index.html`                    # Login page
- `register.html`                 # Admin/user registration form
- `main.html`                     # Dashboard container shell
- `configuration.html`            # Bot/broker/API config form
- `coa.html`                      # **COA Structure editor:** accounts tree CRUD (RBAC)
- `coa_mapping.html`              # **COA→Ledger Mapping editor:** rules CRUD, versions, import/export (RBAC)
- `ledger.html`                   # Ledger entries, grouped rows, collapse/expand, balances panel, sync controls
- `holdings.html`                 # **Holdings management UI:** allocations, float/reserve splits, rebalancing (modular ledger only; config via encrypted holdings secrets)
- `logs.html`                     # Logs panel (read-only)
- `status.html`                   # Live bot/strategy status and health
- `settings.html`                 # Bot strategy/runtime settings
- `test.html`                     # TEST_MODE UI: trigger, logs, reset
- `account.html`                  # User account/profile page
- `users.html`                    # User admin (RBAC/role assignment, admin create/delete users)
- `edit_user.html`                # Edit individual user
- `password_reset_request.html`   # Password reset request/initiate
- `password_reset_form.html`      # Password reset token entry
- `universe.html`                 # Symbol universe viewer/tools
- `screener_credentials.html`     # Screener Credential Management UI (generic indexed format only)
- `wait.html`                     # Shown while provisioning/bootstrapping is in progress

**Holdings Management UI and Endpoint Requirements:**
- **`holdings.html`** provides full holdings config, allocations, float, reserve splits, top-up, symbol add/remove, periodic/manual rebalancing controls, and audit log panel.
- All changes are RBAC-controlled (admin only), logged, and versioned.
- UI must surface compliance state, audit history, and trigger full key/secret rotation on any change.
- All actions route through encrypted holdings secrets and holdings manager API.
- **Ledger, COA, and holdings UIs are cross-linked:** holdings operations show in both `holdings.html` and `ledger.html` as immutable events, COA-mapped via `ledger_modules/`.
- Backend: Flask blueprint (`holdings_web.py`), RESTful API for all CRUD operations, integrated with audit logging and encrypted config update. **All holdings events, balances, and audit entries are surfaced via `ledger_modules/`; holdings *configuration* (targets, symbols, splits) is persisted in `tbot_bot/storage/secrets/holdings_secrets.json.enc` and accessed only through the holdings manager API (no direct file access).**
- Settings/allocations are read/written via system API to **`tbot_bot/storage/secrets/holdings_secrets.json.enc`** (no direct file access; key: **`tbot_bot/storage/keys/holdings_secrets.key`**).
- UI/blueprint supports upload/export of holdings allocations and full audit history in CSV/JSON/Markdown.

**Other Expanded/Updated Requirements:**
- Screener credential management uses the generic indexed format.
- All endpoints enforce RBAC at both view and action level, with role-based UI controls and full audit logging.
- **All credential/config/holdings changes *and* any COA or COA→Ledger mapping change** (add/edit/delete/rotate) trigger **full-system atomic key/secret rotation** and backup; user is notified in the UI.
- All templates, CSS, and route structures must remain compliant with `020_Directory_Structure_{CURRENT_VERSION}.txt`.

---

** Compliance Update:**  
- Modular per-page CSS (`/static/css/pages/`) is required; cross-page bleed is forbidden.
- All screener credential logic/UI must use generic indexed format.
- Holdings/float/reserve management is required and surfaced in both holdings.html and ledger/COA views via the modular ledger system.
- All config/credential/holdings **and COA or mapping** changes trigger **full-system atomic key/secret rotation** with versioned backup (to `tbot_bot/storage/backups/`), enforced via backend.
- Audit, RBAC, and security policies are unchanged and strictly enforced.
- **All ledger, reconciliation, holdings, and COA operations surfaced in the UI are powered only by the approved accounting modules** (ledger operations via `ledger_modules/`; COA mapping via `coa_mapping_table.py`); legacy helpers and `ledger.py` are no longer permitted.
- **Ledger UI adds grouped rows with collapse/expand and a balances panel; new endpoints `/ledger/sync`, `/ledger/groups`, `/ledger/balances` are specified in this document.**
- **All file paths used by web blueprints and workers must be obtained via `tbot_bot/support/path_resolver.py`.**

=============================================================================================================================================
Real-Time Monitoring Dashboard 
=============================================================================================================================================

`tbot_web/` provides a secure, independent Flask-based web dashboard for real-time bot monitoring, audit, control, user/account management, password reset, Chart of Accounts (COA) **structure**, **COA→Ledger Mapping**, **Holdings Management**, and Screener Credential Management. UI and backend components strictly follow `020_Directory_Structure_{CURRENT_VERSION}.txt`. **All filesystem paths used by the dashboard are resolved exclusively via `tbot_bot/support/path_resolver.py` (no hardcoded/relative paths).**

**Frontend UI Components:**
- `templates/index.html`: Login portal; RBAC, rate-limited authentication, audit-logged.
- `templates/main.html`: Dashboard shell embedding all panels (strategy, log, status, COA, COA mapping, test, users, settings, screener credentials, **holdings**, etc.) using iframes.
- `templates/status.html`: Displays live bot health, session lifecycle, active strategy state, float metrics, win-rate, cumulative PnL, **holdings compliance/deviation**, and risk/defense/kill switch state. **Data is provided by `status_web.py`, which obtains paths via `path_resolver.py` and derives PnL/win-rate from approved accounting APIs in `ledger_modules/` (never from ad-hoc logs or hardcoded paths).**
- `templates/ledger.html`: **Ledger interface** (grouped rows with expand/collapse & persisted state, balances panel, inline COA leg selector, sync controls); **MUST source data exclusively from `tbot_bot/accounting/ledger_modules/`**. Display includes **`DTPOSTED` (UTC)**, **`FITID`**, and **`group_id`** for auditability.
- `templates/holdings.html`: **Dedicated UI for holdings management:** view and edit float top-ups, reserve splits, allocations, symbol list, periodic/manual rebalancing, and full audit history. **Holdings events/balances/compliance are surfaced via `ledger_modules/`; holdings configuration (targets/symbols/splits) is read/written only through the holdings manager API backed by the encrypted secrets file `tbot_bot/storage/secrets/holdings_secrets.json.enc` (key: `tbot_bot/storage/keys/holdings_secrets.key`).** All changes are versioned, RBAC-controlled, and cryptographically logged.
- `templates/configuration.html`: Secure interface for credentials, email, API/broker config; encrypted at rest. Submits configuration and sets provisioning trigger/flag.
- `templates/settings.html`: Edit and validate runtime trading parameters (timings, thresholds, risk controls); excludes credentials and COA. **Loads decrypted bot config from `tbot_bot/support/.env_bot.enc` via secure loader; no plaintext `.env_bot` in production.**
- `templates/coa.html`: **COA Structure editor** — accounts tree CRUD and export; displays account hierarchy, metadata, and version. Admin-only workflow with audit diffs. **Powered by accounting modules (`ledger_modules/`) and surfaced via `tbot_web/support/utils_coa_web.py`.**
- `templates/coa_mapping.html`: **COA→Ledger Mapping editor** — mapping rules CRUD, version history, import/export bundle; admin-only with full audit/versioning. **Backed by `tbot_bot/accounting/coa_mapping_table.py` (no direct DB writes).**
- `templates/screener_credentials.html`: Credential management UI for all screener/universe source credentials. Provides add, edit, rotate, and delete functionalities with field validation and audit logging.
- `templates/wait.html`: Displayed after initial configuration/provisioning trigger; polls for provisioning/bot status and redirects to dashboard when bot is running.
- `templates/test.html`: Dedicated UI page for TEST_MODE trigger and progress monitoring. Allows admin users to start the test sequence and view real-time logs and final test results.
- `templates/register.html`: User registration form for initial admin/user creation and password reset.
- `templates/account.html`: User profile/account page (change password/email).
- `templates/users.html`: User list and management (admin only, RBAC assignment).
- `templates/edit_user.html`: Edit user details (admin only).
- `templates/password_reset_request.html`: Request password reset email/token.
- `templates/password_reset_form.html`: Enter password reset token and new password.
- `templates/universe.html`: Symbol universe cache viewer, inspection, and management tools.

**Backend Flask Components (per directory spec):**
- `py/__init__.py`: Registers Flask blueprints for all routes.
- `py/coa_web.py`: **COA Structure UI & API (accounts tree CRUD, export).** Uses accounting modules for COA storage/access; admin-only edits with version bumps and audit logs.
- `py/coa_mapping_web.py`: **COA→Ledger Mapping UI & API (CRUD, versions, import/export).** Uses `tbot_bot/accounting/coa_mapping_table.py` for load/save/versioning; mapping changes are validated and always versioned (never in-place overwrite); admin-only with audit logs.
- `py/configuration_web.py`: Web UI route handling user, email, API, and broker credential configuration via encrypted multi-category config files. Only writes config and provisioning trigger; does *not* execute provisioning logic.
- `py/settings_web.py`: Loads and validates **decrypted bot config** from `tbot_bot/support/.env_bot.enc` via system APIs; provides API for updates/errors; includes TEST_MODE flag toggle reflecting presence of `test_mode.flag`.
- `py/status_web.py`: Serves live bot/session status with strategy metrics, system health, win-rate, PnL, float deviation, rebalance triggers, Defense/kill switch states, and alert counts as JSON. **All paths resolved via `path_resolver.py`; PnL/win-rate computed from `ledger_modules/` (no direct SQL or file reads outside approved modules).**
- `py/ledger_web.py`: **Ledger UI & API (NEW endpoints):**
  - **GET `/ledger`** — paginated list for ledger table (search/sort/filter).
  - **POST `/ledger/sync` (admin)** — triggers broker sync worker (`ledger_sync.py`); returns `sync_run_id`.
  - **GET `/ledger/groups`** — returns grouped rows by `group_id` with collapse state and legs.
  - **GET `/ledger/balances`** — returns balances panel data for current filters/range.
  - **POST `/ledger/collapse_expand/<group_id>`** — persist/toggle group collapsed state.
  - **POST `/ledger/collapse_all`** — persist global collapsed state.
  - **POST `/ledger/edit/<entry_id>` (admin)** — inline per-leg COA account update.
  - **RBAC:** `viewer` may call `GET /ledger`, `GET /ledger/groups`, `GET /ledger/balances`; only `admin` may call `/ledger/sync`, `/ledger/edit/*`, collapse state endpoints.  
  **Enforcement:** no direct SQL; all reads/writes go through `tbot_bot/accounting/ledger_modules/*`.
- `py/holdings_web.py`: Dedicated holdings management API. Provides endpoints for reading/writing holdings config, allocations, float top-ups, reserve splits, symbol list edits, periodic/manual rebalancing, and full holdings audit log/history. **All CRUD/audit actions use `ledger_modules/` for events/balances and the encrypted holdings secrets API for configuration**; RBAC (admin) enforced; atomic encrypted updates.
- `py/logs_web.py`: Streams and paginates logs of all types; ensures secure access and audit-compliant log delivery.
- `py/start_stop_web.py`: Manages lifecycle controls via `control_start.flag` / `control_stop.flag`, transition verification, and logging.
- `py/main_web.py`: Central route router; renders main dashboard shell, wait.html, ledger pages, test.html, screener credentials UI, holdings UI, and all iframe endpoints. Does not execute provisioning or bootstrapping; only checks `tbot_bot/control/bot_state.txt` for UI routing using the **canonical state set defined in Document 070**. Supports immediate TEST_MODE execution trigger detection.
- `py/test_web.py`: Dedicated backend blueprint handling TEST_MODE control flag creation, test start sequencing, real-time log streaming, and test completion flag reset.
- `py/run_web.py`: **Phase-aware Flask entrypoint**. Detects phase (bootstrap, registration, main) using `bot_state.txt`, and dynamically loads only the relevant Flask app and blueprints for that phase.
- `py/register_web.py`: Handles user registration logic and SYSTEM_USERS.db creation/updating. **Registration UI is available when no users exist; not gated by a special bot_state.**
- `py/account_web.py`: User profile/account endpoints (change password, email, view account).
- `py/users_web.py`: Admin user management, RBAC/role assignment, list/create/delete users.
- `py/password_reset_web.py`: Handles password reset initiation and token validation.
- **`py/screener_credentials_web.py`:** Flask blueprint for unified screener source credential UI and API (add/edit/delete/rotate) with admin RBAC enforcement and audit logging.

**Multi-Phase Flask App Structure:**
- `portal_web_main.py`: controls phase-aware blueprint loading. Flask app for configuration, provisioning, bootstrapping, registration, and all operational blueprints (phases in this order: configuration → provisioning → bootstrapping → registration → login → main dashboard).  
- **Flask modularization and phase control ensures that privileged routes, registration, or dashboard features can never be loaded or called outside their authorized lifecycle phase.**

**Support Modules (from tbot_web/support/):**
- `auth_web.py`: Handles user authentication, bcrypt password hashing, validation for login/session.
- `configuration_loader.py`: Loads and decrypts encrypted configuration files from **`tbot_bot/storage/secrets/*.json.enc`**.
- `configuration_saver.py`: Saves and encrypts configuration files to **`tbot_bot/storage/secrets/*.json.enc`**.
- `csrf_protection.py`: Provides CSRF protection for forms and blueprints.
- `default_config_loader.py`: Loads config template/defaults for UI forms; never manages secrets or Fernet keys.
- `security_users.py`: RBAC: role/permission enforcement, user CRUD, Fernet key helpers for user/auth.
- `session_manager.py`: Handles web session lifecycle, token management, timeouts.
- `utils_coa_web.py`: COA Structure UI helpers; all COA operations routed via approved accounting modules.
- `utils_web.py`: Web-only helpers, UI utilities, non-secret logic.
- `utils_holdings_web.py`: Holdings UI utilities (all reads/writes via `ledger_modules/`; no direct file access).
- `screener_credentials_web.py` support files for credential management integration.
- `holdings_web.py` and related helpers for holdings management, audit, and compliance, fully integrated with modular ledger.  
**Global rule:** All blueprints/utilities that touch the filesystem must obtain paths from `tbot_bot/support/path_resolver.py`.

**Holdings Management Workflows:**
- The web UI (`holdings.html`) allows admin users to view, edit, and audit all holdings allocations, float, reserve splits, top-up, symbol list, and rebalancing events. **All audit events, persistent data, and UI display must be sourced via the modular ledger (`ledger_modules/`) and never via legacy `ledger.py` or `ledger_utils.py`.**
- Any change to holdings config, allocations, or symbol lists triggers **full-system atomic key/secret rotation**, with backup and audit trail (**backups in `tbot_bot/storage/backups/`**).
- All holdings operations/events are visible in both `holdings.html` and `ledger.html`, mapped to correct COA categories for accounting compliance.
- Holdings config and audit history can be exported in CSV/Markdown, with immutable logs kept in `output/logs/` and `tbot_bot/storage/backups/`.

**Ledger Schema Alignment Update (UI Note):**
- `group_id` is first-class; grouping and reconciliation rely on it.
- UI persistence table `trade_group_collapsed(group_id PRIMARY KEY, collapsed INTEGER)` stores display state only.
- **Balances panel uses `tbot_bot/accounting/ledger_modules/ledger_balance.py` and `/ledger/balances` to compute totals for the active filter/range.**
- **All timestamps shown in the dashboard are UTC.**

**Other Expanded/Updated Requirements (summary only, no change):**
- Screener credential management uses only the generic indexed format, with strict RBAC.
- All endpoints enforce RBAC at both view and action level, with role-based UI controls and full audit logging.
- All credential/config/holdings **and COA or mapping** changes (including add/edit/delete/rotate) trigger **full-system atomic key/secret rotation** and backup; user is notified in the UI.
- All templates, CSS, and route structures must remain compliant with `020_Directory_Structure_{CURRENT_VERSION}.txt`.
- Ledger Schema Alignment Update:
  - `group_id` is a first-class field in the Trades schema and MUST be included anywhere `TRADES_FIELDS` is referenced or enforced. UI grouping and reconciliation rely on this field.
  - The UI persistence table `trade_group_collapsed` (fields: `group_id` PRIMARY KEY, `collapsed` INTEGER) is used only for display state and carries no accounting meaning.

--------------------------------------------------------------------------------
Flask Blueprint Overview
--------------------------------------------------------------------------------
**Global rules (all blueprints):**  
All filesystem paths MUST be obtained via `tbot_bot/support/path_resolver.py` (no hardcoded/relative paths). All mutations are CSRF-protected and RBAC-enforced. No direct SQL outside `tbot_bot/accounting/ledger_modules/`. All timestamps are UTC.

- `main_web.py`
  - URL Prefix: `/`
  - Role: Central router for main dashboard, status, logs, ledger, **COA structure, COA→Ledger mapping**, test UI, account, users, configuration/settings, screener credentials UI, and holdings management UI.
  - Loads only when `bot_state` is in the **ACTIVE states defined in Document 070** (e.g., `idle`, `analyzing`, `trading`, `monitoring`, `updating`).
  - Renders `main.html`, `wait.html`, `test.html`, `holdings.html`, or error pages based on `bot_state`.

- `configuration_web.py`
  - URL Prefix: `/configuration`
  - Role: Handles credential, API, and broker configuration UI and provisioning trigger. 
  - Accessible during `initialize`, `provisioning`, and `bootstrapping`.
  - Renders `configuration.html`.

- `register_web.py`
  - URL Prefix: `/register`
  - Role: Handles user registration UI and backend; supports post-provisioning admin/user creation and password setup.
  - **Accessible when no users exist** (gated by DB check), independent of `bot_state`.
  - Renders `register.html`.

- `status_web.py`
  - URL Prefix: `/status`
  - Role: Provides live bot status and health JSON API, used for dashboard updates. Metrics that derive from trades/PNL are read from approved accounting APIs in `ledger_modules/` (never ad-hoc files), with paths resolved via `path_resolver.py`.
  - Accessible during all active states (per Document 070) except `initialize` and shutdown/error states.

- `logs_web.py`
  - URL Prefix: `/logs`
  - Role: Streams bot and system logs.
  - Accessible during all active states (per Document 070) except `initialize` and shutdown/error states.

- `ledger_web.py`
  - URL Prefix: `/ledger`
  - Role: Ledger viewing, reconciliation, editing, event history, and **export** API. All data and holdings events are powered by modular ledger (`ledger_modules/`). **No CSV/import upload is permitted.**
  - Accessible when bot is active (per Document 070), not during `initialize`, `provisioning`, `bootstrapping`, or shutdown/error.
  - **Endpoints:**  
    - **GET `/ledger`** — Query ledger entries (search/sort/filter/paginate).  
    - **POST `/ledger/sync`** *(admin)* — Start broker sync (idempotent; returns `sync_run_id`).  
    - **GET `/ledger/groups`** — Grouped rows (by `group_id`) with legs and collapse state.  
    - **GET `/ledger/balances`** — Balances panel data (Assets/Liabilities/Equity and selected account totals).  
    - **POST `/ledger/collapse_expand/<group_id>`** — Persist/toggle collapse state.  
    - **POST `/ledger/collapse_all`** — Persist global collapse state.  
    - **POST `/ledger/edit/<entry_id>`** *(admin)* — Inline COA account change for a leg.  
    - **GET `/ledger/export`** — Export current view (CSV/JSON/Markdown).
    - **GET `/ledger/search — Query ledger entries (flat rows; search/sort/filter).
  - **RBAC:** `viewer`=read-only (`GET` endpoints), `admin`=all mutations (`/ledger/sync`, `/ledger/edit/*`, collapse-state endpoints).

- `holdings_web.py`
  - URL Prefix: `/holdings`
  - Role: Holdings management API and UI—viewing and editing of float/top-up, reserve splits, allocations, symbol list, rebalancing, and full audit history, all powered by modular ledger (`ledger_modules/`) and the encrypted holdings secrets API.
  - RBAC enforced: **viewer may read status/summary where permitted; all mutations are admin-only**.
  - Accessible only when bot is active (per Document 070), not during `initialize`, `provisioning`, `bootstrapping`, or shutdown/error.
  - Renders `holdings.html`.
  - All changes trigger **full-system atomic key/secret rotation** and backup of **`tbot_bot/storage/secrets/holdings_secrets.json.enc`** (key: **`tbot_bot/storage/keys/holdings_secrets.key`**) and are versioned via the ledger.

- `coa_web.py`
  - URL Prefix: `/coa`
  - Role: **Chart of Accounts (COA) structure UI & API** — accounts tree CRUD, metadata, versions, and export. All operations routed via approved accounting modules (`ledger_modules/`); **not** the mapping table.
  - Admin-only access for mutations; viewer may read.
  - Accessible when bot is active (per Document 070).
  - **Endpoints (COA Structure UI):**
    - **GET `/coa`** — Render COA UI (tree, metadata).
    - **GET `/coa/api`** — List COA accounts and metadata.
    - **POST `/coa/api`** *(admin)* — **Create** account/node.
    - **PUT `/coa/api/<account_code>`** *(admin)* — **Update** account/node.
    - **DELETE `/coa/api/<account_code>`** *(admin)* — **Delete** account/node (subject to constraints).
    - **GET `/coa/versions`** — List COA structure version history.
    - **GET `/coa/versions/<version_id>`** — Fetch a specific snapshot (read-only).
    - **POST `/coa/rollback/<version_id>`** *(admin)* — Roll back COA structure to snapshot (creates a new version).
    - **GET `/coa/export`** — Export COA structure (CSV/JSON/Markdown).
  - **RBAC:** `viewer`=read-only endpoints; `admin`=mutations.

- `coa_mapping_web.py`
  - URL Prefix: `/coa_mapping`
  - Role: **COA→Ledger Mapping UI & API** — mapping rules CRUD, version history, import/export bundle, and rollback; backed by `tbot_bot/accounting/coa_mapping_table.py`. Mapping changes are validated, always versioned, and never overwrite in place.
  - Admin-only access for mutations; viewer may read.
  - Accessible when bot is active (per Document 070).
  - **Endpoints (Mapping UI):**
    - **GET `/coa_mapping`** — Render mapping UI.
    - **GET `/coa_mapping/api`** — List active mapping rules.
    - **POST `/coa_mapping/api`** *(admin)* — **Create** mapping rule.
    - **PUT `/coa_mapping/api/<rule_id>`** *(admin)* — **Update** mapping rule.
    - **DELETE `/coa_mapping/api/<rule_id>`** *(admin)* — **Delete** mapping rule.
    - **GET `/coa_mapping/versions`** — List version history of `coa_mapping_table.json`.
    - **GET `/coa_mapping/versions/<version_id>`** — Fetch a specific snapshot (read-only).
    - **POST `/coa_mapping/rollback/<version_id>`** *(admin)* — Roll back to snapshot (creates a new version).
    - **GET `/coa_mapping/export`** — Export mapping bundle (JSON/CSV/Markdown).
    - **POST `/coa_mapping/import`** *(admin)* — Import mapping bundle (validates; creates new version; never overwrites in place).
  - **RBAC:** `viewer`=read-only endpoints; `admin`=mutations.

- `settings_web.py`
  - URL Prefix: `/settings`
  - Role: Runtime config management excluding credentials; updates trading and strategy parameters only.
  - Accessible during all active states (per Document 070).

- `start_stop_web.py`
  - URL Prefix: `/control`
  - Role: Handles bot lifecycle commands (start, stop, kill); writes control flags.
  - Accessible during all states except `initialize`.

- `test_web.py`
  - URL Prefix: `/test`
  - Role: TEST_MODE lifecycle management and UI; triggers and monitors test sequence.
  - Accessible only to admin users during active states (per Document 070).

- `account_web.py`
  - URL Prefix: `/account`
  - Role: User account and profile management (change password, update email, view account).
  - Accessible when bot is active (per Document 070).

- `users_web.py`
  - URL Prefix: `/users`
  - Role: User management (list, create, edit, delete, RBAC/role assignment, password reset).
  - Admin-only access, accessible when bot is active (per Document 070).

- `password_reset_web.py`
  - URL Prefix: `/password_reset`
  - Role: Password reset request and token validation endpoints.
  - Accessible after registration or when bot is active (per Document 070).

- `universe_web.py`
  - URL Prefix: `/universe`
  - Role: Universe cache viewing and management API/UI.
  - Admin-only access, accessible when bot is active (per Document 070).

- `screener_credentials_web.py`
  - URL Prefix: `/screener_credentials`
  - Role: Screener source credential management UI and API (generic indexed format). All writes trigger audit logging and key/secret rotation per policy.
  - Admin-only access.
  - CRUD operations: add, edit, rotate, delete credentials.
  - Access controlled by RBAC.
  - Integrates with encrypted secrets storage and audit logging.


--------------------------------------------------------------------------------
UI Routing and Lifecycle Phase Enforcement
--------------------------------------------------------------------------------

| Bot Phase/State (per Document 070)            | Allowed Blueprints / Pages                                                                                                                     | UI Behavior                              |
|-----------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------|
| `initialize`, `provisioning`, `bootstrapping` | `configuration_web`                                                                                                                             | Show `configuration.html` UI              |
| **No users exist** (DB check)                 | `register_web`, `password_reset_web`                                                                                                            | Show `register.html` UI                   |
| **ACTIVE states** (per Document 070)          | `main_web`, `status_web`, `logs_web`, `ledger_web`, `coa_web`, `coa_mapping_web`, `settings_web`, `start_stop_web`, `test_web`, `account_web`, `users_web`, `password_reset_web`, `universe_web`, `screener_credentials_web`, **`holdings_web`** | Show `main.html` dashboard and all panels |
| `graceful_closing_positions`, `emergency_closing_positions` | `main_web`, lifecycle blueprints                                                                                                   | Show `main.html` with shutdown feedback   |
| `shutdown`, `shutdown_triggered`, `error`     | Error pages only                                                                                                                                | Show error or shutdown UI; block others   |

**Routing constraints (all phases):** All filesystem paths are resolved via `tbot_bot/support/path_resolver.py` (no hardcoded paths); UI never performs direct SQL (ledger access only via `tbot_bot/accounting/ledger_modules/`); all timestamps shown are UTC.

--------------------------------------------------------------------------------
Access Control and RBAC
--------------------------------------------------------------------------------

- RBAC is enforced via `security_users.py` with roles at minimum: `viewer`, `admin`. CSRF is required on all POST/PUT/DELETE.
- **Ledger endpoints (`/ledger`)**  
  - `viewer`: `GET /ledger`, `GET /ledger/groups`, `GET /ledger/balances`, **`GET /ledger/export`**  
  - `admin`: all of the above + `/ledger/sync`, `/ledger/edit/*`, collapse-state endpoints
- **COA structure endpoints (`/coa`)**  
  - `viewer`: `GET /coa`, `GET /coa/api`, `GET /coa/versions*`, `GET /coa/export`  
  - `admin`: all of the above + `POST/PUT/DELETE /coa/api*`, `POST /coa/rollback/*`
- **COA→Ledger mapping endpoints (`/coa_mapping`)**  
  - `viewer`: `GET /coa_mapping`, `GET /coa_mapping/api`, `GET /coa_mapping/versions*`, `GET /coa_mapping/export`  
  - `admin`: all of the above + `POST/PUT/DELETE /coa_mapping/api*`, `POST /coa_mapping/import`, `POST /coa_mapping/rollback/*`
- **Holdings endpoints (`/holdings`)**  
  - `viewer`: read-only views where exposed by UI (status/compliance summaries)  
  - `admin`: all mutations (config, allocations, top-up, rebalancing), audit exports
- **Screener credentials endpoints (`/screener_credentials`)**  
  - `admin` only (read and write). All mutations are audit-logged and trigger key/secret rotation.
- Login required for all routes except initial bootstrap configuration.

--------------------------------------------------------------------------------
Modular App Loading
--------------------------------------------------------------------------------

- `run_web.py` loads blueprints based on `bot_state` (Document 070) to ensure privilege boundaries by phase.
- Only blueprints relevant to the current `bot_state` are registered; privileged operational UIs (ledger/COA/mapping/holdings) are not available before provisioning/registration completes.
- Phase gating is enforced server-side; iframes/pages cannot be loaded out of phase.

--------------------------------------------------------------------------------
Trigger and Action Flow
--------------------------------------------------------------------------------

- Configuration save triggers a provisioning flag file; the backend runner performs privileged actions (provisioning, DB init, key generation).
- `/ledger/sync` triggers `ledger_sync.py` with audit + `sync_run_id`.
- TEST_MODE via `/test` (admin only).
- Provisioning completion triggers bot launch and `bot_state` transitions (per Document 070).
- Start/stop/kill via `/control` updates `bot_state` and coordinates strategy lifecycle.
- UI polling endpoints (`status_web`) provide real-time `bot_state` for client-side updates.
- User registration and password reset flows are available after provisioning when no users exist.
- **COA structure and COA→Ledger mapping edits via `/coa` and `/coa_mapping` are validated, versioned, and audit-logged (no in-place overwrite; rollbacks create new versions). The active mapping version is updated atomically for subsequent postings.**
- **Any credential, holdings, or screener change—and any COA or mapping mutation—triggers full-system atomic key/secret rotation with versioned backup to `tbot_bot/storage/backups/`.**
- All role changes, credential updates, COA/ledger edits, screener credential changes, **holdings updates**, and test actions are logged with full audit trail.

================================================================================
Web Interface Status Design
================================================================================

This document specifies the detailed design for the status dashboard panel in the TradeBot web interface, including system status overview, session summary, and operational notes.

Contents:
- System Status Overview Table
- Session Status Summary Panel
- API and data feed source modules
- Severity and visual indicator logic
- Dashboard shows Holdings Balance/Deviation/Compliance from holdings manager via modular ledger.
- **COA metadata and holdings compliance loaded via `utils_coa_web.py` and `utils_holdings_web.py`; underlying data via `ledger_modules/`.**

The design ensures real-time operational visibility and audit compliance.

=======================================================================================
RIGD GROUP LLC — Web Interface: Status Dashboard Design 
=======================================================================================

**Table: System Status Overview**

| Column                      | Description                                         | Notes                                                                 |
|-----------------------------|-----------------------------------------------------|-----------------------------------------------------------------------|
| Broker                      | Name of active broker                               | From decrypted config via standardized fields (**`BROKER_CODE` + identity metadata**) |
| Trading Mode                | Current live/paper mode                             | **Derived from config; UI displays current mode (never hard-coded).** |
| Float Allocation ($)        | Current deployed float for this broker              | From accounting API/config                                            |
| **Holdings Balance ($)**    | Current total holdings tracked and allocated        | From holdings manager via encrypted holdings secrets **and surfaced through `ledger_modules/`** |
| **Holdings Deviation (%)**  | % deviation from target allocation or compliance    | Calculated vs. target/reserve float; triggers rebalance               |
| Defense Mode Active         | true / false                                        | Mirrors `DEFENSE_MODE_ACTIVE` in decrypted config                     |
| Kill Switch Armed           | true / false                                        | True at session start                                                 |
| Kill Switch Triggered       | true / false                                        | True if halted by `kill_switch.py`                                    |
| **Daily PnL ($)**           | Realized PnL this session for this broker           | **Authoritative from `tbot_bot/accounting/ledger_modules/ledger_query.py`** (OFX-aligned, reconciled) |
| **Cumulative PnL ($)**      | Realized PnL since bot inception for this broker    | **Computed from ledger via `ledger_query.py` / `ledger_balance.py`**  |
| **Win Rate (%)**            | % profitable trades this session                    | **From ledger (authoritative); session-inflight view may display `trade_logger.py` as non-canonical** |
| **Cumulative Win Rate (%)** | % profitable trades since bot inception             | **Computed from full ledger history (no log-derived shortcuts)**      |
| Daily Loss Threshold ($)    | float * `DAILY_LOSS_LIMIT`                          | Runtime-calculated                                                    |
| Open Positions              | Number of active trades for this bot                | Enforced by `MAX_OPEN_POSITIONS`                                      |
| Max Allowed Trades          | `MAX_TRADES` or Defense Mode scaled                 | Dynamic per `risk_bot.py`                                             |
| API Status                  | healthy / degraded / down                           | From `watchdog_bot.py`                                                |
| Strategy Running            | open / mid / close / idle                           | Live from `strategy_router.py`                                        |
| Last Trade ID               | Most recent executed trade ID                       | From `trade_logger.py`                                                |
| Last Error Event            | Last critical warning or exception                  | From `error_handler.py`                                               |
| Universe Cache Status       | up-to-date / stale / missing                        | From `universe_web.py` and screener utilities                         |
| User Session Status         | active / expired / locked                           | From `session_manager.py`                                             |
| **Holdings Compliance**     | OK / Warning / Out-of-Spec                          | From holdings manager/audit log (compliance/thresholds)               |

**Operational Notes:**  
- **All dashboard timestamps are UTC; no local time rendering.**  
- **Holdings Balance, Holdings Deviation, and Holdings Compliance reflect the real-time, audit-logged status of all holdings, float, and reserve allocations for this bot. These fields are populated by the holdings management module and surfaced via the modular ledger API.**
- **PnL and win-rate metrics shown in the dashboard are computed from the ledger only (`ledger_query.py` / `ledger_balance.py`); log-based figures are display-only and non-authoritative.**
- Cumulative metrics (`Cumulative PnL`, `Cumulative Win Rate`) are computed from the full persistent ledger dataset for this bot instance, since creation/inception.  
- Values update in real time as new trades are posted; recalculated on every dashboard poll.
- Dashboard polls status every 15–30 seconds for live visibility.
- Visual state: Green (OK), Yellow (Warning), Red (Critical) based on API health, Defense Mode, Kill Switch, **holdings compliance**, or stale universe cache.
- Session tags: `DEFENSE_MODE_ACTIVE=true` triggers banner and log tag.
- All UI-visible state changes logged for 7+ days (rotated JSON).
- **All filesystem paths are resolved via `tbot_bot/support/path_resolver.py`; the UI never performs direct SQL. All ledger/COA access goes through `tbot_bot/accounting/ledger_modules/`.**
- **COA structure metadata is loaded via `utils_coa_web.py`; holdings compliance via `utils_holdings_web.py`. COA→Ledger mapping is managed in `coa_mapping_web.py` and not edited from the status panel. Underlying ledger/schema integration uses `tbot_bot/accounting/coa_utils.py`.**
- Universe cache, holdings status, and screener API health are surfaced directly in the dashboard status table.
- User session status column assists with support, troubleshooting, and RBAC enforcement at a glance.

**API/Data Feed Source Modules:**
- `float_bot.py`                               — Provides float allocation and open positions
- **`tbot_bot/accounting/ledger_modules/ledger_query.py`** — Authoritative realized PnL, trade counts, win-rate
- **`tbot_bot/accounting/ledger_modules/ledger_balance.py`** — Balances and cumulative PnL totals
- **`holdings_manager.py` / `holdings_utils.py`** — Real-time holdings, compliance, allocation, deviation status
- `risk_bot.py`                                — Defense Mode and allocation limits
- `kill_switch.py`                             — Kill switch armed/triggered, daily loss threshold
- `watchdog_bot.py`                            — Broker API health status
- `error_handler.py`                           — Last error event, type, timestamp
- `trade_logger.py`                            — Session-inflight echo of events (non-canonical for metrics)
- `universe_web.py`                            — Universe cache status and health
- `session_manager.py`                         — Current user/session status

=======================================================================================
Session Status Summary Panel
=======================================================================================

**Panel Title:** System Session Summary

| Field                        | Description                                               | Notes                                                                                                                     |
|-----------------------------|-----------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|
| Overall System Status       | OK / Warning / Critical                                   | Derived from: API health, Defense Mode, Kill Switch, Universe Cache, **Holdings Compliance**, **PnL/Balance Health**.     |
| Defense Mode Active         | true / false                                              | Mirrors `DEFENSE_MODE_ACTIVE` (decrypted config).                                                                         |
| Total Bots Active           | Count of TradeBot instances currently online              | E.g., 1–N; reflects all deployed bots.                                                                                    |
| Bots in Kill Switch         | Count where Kill Switch Triggered = true                  | E.g., 0/3 bots.                                                                                                           |
| Active Strategy             | open / mid / close / idle                                 | From `strategy_router.py`.                                                                                                |
| Open Trades (Total)         | Total live trades across all bots                         | Sum, enforced by `MAX_OPEN_POSITIONS`.                                                                                    |
| Universe Cache Status       | up-to-date / stale / missing                              | Aggregated from all active bots.                                                                                          |
| **Holdings Compliance**     | OK / Warning / Out-of-Spec                                | Aggregated from holdings manager/audit log (ledger-backed).                                                               |
| **COA Version (Active)**    | Currently loaded Chart of Accounts version                | Read-only; surfaced via `utils_coa_web.py` and `ledger_modules/`; edited only in COA UI.                                  |
| **Mapping Version (Active)**| Currently active COA→Ledger mapping version               | Read-only; surfaced via `coa_mapping_web.py` and backed by `coa_mapping_table.py`; not editable here.                     |
| **PnL Snapshot (Realized)** | Today / MTD / YTD realized PnL                            | Calculated in `ledger_modules/ledger_pnl.py` from immutable ledger entries.                                               |
| **Unrealized PnL (Intraday)**| Unrealized PnL for all open positions                    | Live positions × market value; provided by holdings manager/broker adapter; surfaced via `ledger_modules/`.               |
| **Ledger Balance Summary**  | Cash, Equity, Liabilities, NAV                            | Snapshot balances via `ledger_modules/ledger_balance.py`; reconciled nightly against broker snapshot.                      |
| System Uptime               | Elapsed time since bot instance started                   | From `status_web.py` (`boot_time_utc`); **all timestamps are UTC ISO-8601**.                                              |

**Severity Logic (Overall System Status):**
- OK (Green): Defense Mode=false, APIs healthy, Kill Switch=off, universe cache up-to-date, Holdings Compliance OK, no balance/PnL anomalies.
- Warning (Yellow): Defense Mode=true OR minor broker/API latency OR universe cache stale OR Holdings Compliance Warning OR minor balance drift.
- Critical (Red): Any Kill Switch=true OR broker API down OR universe cache missing OR Holdings Compliance Out-of-Spec OR ledger/balance mismatch.

**Layout:**
- Horizontal bar/widget above Broker Detail Table.
- Color bands/icons: Green (OK), Yellow (Warning), Red (Critical).
- **PnL Snapshot and Ledger Balance Summary** shown as compact, read-only cards under the bar for at-a-glance financials.

**Design Rationale:**
- Extends session triage beyond ops into finance: PnL, balances, compliance.
- Confirms Defense Mode/Kill Switch/universe cache/holdings compliance events in real time.
- Surfaces COA/mapping versions for traceability; display-only here.
- PnL and balance snapshots are ledger-derived, double-entry validated, and audit-backed.
- Audit trail: all state changes, PnL snapshots, and balance deviations logged immutably for 7+ years.

================================================================================
Ledger Interface — Search, Sort, and Interactive Features
================================================================================

**Section: Ledger Interface — Search, Sort, and Interactive Features**

The ledger interface in `ledger.html` is a comprehensive, audit-compliant UI for managing, viewing, reconciling, and analyzing all ledger entries—including broker trades, cash events, system postings, and holdings operations (allocations, float, reserve, top-up, rebalancing). **All data flows exclusively through `tbot_bot/accounting/ledger_modules/` (no direct SQL); all paths are resolved via `tbot_bot/support/path_resolver.py`.** All timestamps displayed/exported are **UTC ISO-8601 (`...Z`)**.

**Core UI Features:**

- **Global Search Window:**  
  - Located at the top of the ledger table.  
  - Free-text search across major ledger fields (date/**DTPOSTED** where available, symbol, **TRNTYPE/FITID** where available, action, trade ID, **group_id**, account, tags, notes, etc.).  
  - Dynamically filters displayed entries as the user types; large datasets may trigger **server-side search** via `GET /ledger/search` (see `ledger_web.py → ledger_search`).

- **Column Sorting:**  
  - All primary columns (Date/**DTPOSTED**, Symbol, **TRNTYPE** where available, Action, Quantity, Price, Fee, Total Value, Status, Running Balance, **FITID** where available) are sortable by clicking the header.  
  - Sorting can be client-side for the current page **or** server-side via AJAX (`sort=<field>&dir=asc|desc`), which is the default for grouped views (`GET /ledger/groups`) and available for search results (`GET /ledger/search`).  
  - Sort indicators (▲▼) show current direction; default sort is Date (descending).

- **Multi-Column and Advanced Filters:**  
  - Secondary filter dropdowns for Action, Status, Account, Strategy, and (optional) TRNTYPE.  
  - Users can combine filters for granular drill-down.  
  - Filters are applied to server requests when using `/ledger/search` or `/ledger/groups`.

- **Holdings Event Visibility and Linking:**  
  - Holdings-related actions (float transfer, reserve allocation, payroll/tax, rebalance, ETF purchase/sale) are displayed inline with trades and cash entries.  
  - Holdings events are tagged and hyperlinked for drill-down; clicking opens a modal with details and cross-links to **COA (`coa.html`)** and **COA→Ledger Mapping (`coa_mapping.html`)** in read-only context.  
  - **Global mapping edits are performed in the COA Mapping UI.** (See inline COA edit behavior below for the optional rule-upsert path.)

- **Pagination and Page Size:**  
  - Configurable page size (default: 50 rows/page) with paginated navigation and fast jump to first/last.  
  - Current page is always visible.

- **Export and Download:**  
  - Export filtered views to CSV/JSON/Markdown, including **DTPOSTED/TRNTYPE/FITID** (when present), **group_id**, and audit/event metadata.  
  - Export respects current search/sort/filter settings and **preserves numeric precision** (no silent rounding).  
  - **Exports are external audit artifacts only and are never re-ingested.** Files are written under `output/{BOT_IDENTITY}/exports/…` via **`path_resolver.py`**, with UTC timestamps in filenames.

- **Audit Trail and History:**  
  - Every edit, reconciliation, or resolution event is versioned and audit-logged (user, UTC timestamp, before/after).  
  - Users can view the edit/resolution history by expanding the row or using the audit icon.  
  - **All edits are append-only in the audit trail; original rows are never silently mutated.**

- **Compliance and RBAC:**  
  - All ledger actions (view, edit, reconcile, export) are RBAC-controlled; only **admin** users may perform edits or reconciliations.  
  - **Inline leg edits in the ledger change the leg’s COA account allocation.** By default this **does not** modify global COA→Ledger mapping rules. If the request includes a truthy **`apply_to_category` / `update_mapping` / `mapping`** flag, the server will **attempt** to upsert a corresponding global mapping rule **best-effort** (failure does not block the leg edit).  
  - All UI actions are logged and visible in the audit trail.

- **Editable COA Account Allocation (Inline):**  
  - Inline `<select>` for a leg’s account updates allocation via **`POST /ledger/edit/<entry_id>`** (admin-only), with a structured audit event (e.g., `COA_LEG_REASSIGNED`).  
  - Expanded groups show constituent debit/credit legs, each with an Account `<select>` bound to active COA codes.  
  - The update touches **only** the leg’s `account` field (double-entry invariants preserved) and writes an immutable audit record (user, UTC timestamp, before/after).  
  - **Optional global rule upsert:** include `apply_to_category` (or `update_mapping`/`mapping`) to request a rule derived from the edited leg; response JSON includes `mapping_ok: true|false`.  
  - AJAX responses include fresh `"groups"` and `"balances"` so the UI can refresh without a full reload. 
  - If a rule upsert is requested, the system snapshots coa_mapping_table.json (creating a new version) on success.
  - The collapsed/top row displays a representative account (implementation detail; for operator context).  
  - **Quick-links:** each leg may expose “View COA” and “View Mapping Rule” links to `coa.html` and `coa_mapping.html` (read-only).

- **Persistent Group Collapse/Expand:**  
  - Groups default to collapsed; operators can expand individually or use a global “Collapse all”.  
  - Summaries appear at the group level (e.g., net trade, fees). Clicking reveals debit/credit legs.  
  - Collapse state is persisted server-side and restored on page load.  
  - Endpoints:
    - **POST** `/ledger/collapse_expand/<group_id>` — toggle or set `{"collapsed_state": 1|0}`  
    - **POST** `/ledger/collapse_all` — set all groups: `{"collapsed_state": 1|0}` (also accepts `{"collapse": bool}` or `{"expanded": bool}`)  
  - Storage: dedicated lightweight table for UI state.  
  - **Balances Panel (Right Drawer):**  
    - Shows **Assets, Liabilities, Equity** totals and selected account/category balances.  
    - Displays “As of” timestamp and may include the latest `sync_run_id`.  
    - Scope selectors: date range, account class, currency (if multi).  
    - Data source: **`GET /ledger/balances`** (computed by `ledger_balance.py`).  
    - Recomputes live on filter/search changes. RBAC: `viewer`.

**Technical/Implementation Notes:**  
- All ledger UI operations—fetch, search, sort, filter, balances, and edits—call **`ledger_query.py`**, **`ledger_grouping.py`**, **`ledger_balance.py`**, **`ledger_edit.py`**; never the legacy `ledger.py` or `ledger_utils.py`.  
- **Do not perform client-side timezone conversions**; display UTC exactly as provided by the API.  
- Support large ledgers (>10k entries) by preferring server-side endpoints (`/ledger/search`, `/ledger/groups`) for sorting and filtering.  
- Search/filter state is reflected in the URL hash or query string for bookmarkable/reportable links; UI state and filter preferences persist for logged-in users.  
- Frontend logic lives in `/static/js/ledger.js`; backend routes are in `tbot_web/py/ledger_web.py`; templates in `templates/ledger.html`.  
- Group collapse/expand state is persisted via modular grouping helpers; client JS must use the REST endpoints rather than local-only state.  
- **Mapping rule data shown in the ledger view is read-only and comes from `coa_mapping_table.py`.** Global mapping edits are managed in `coa_mapping.html`; the inline leg edit may **optionally** request a best-effort rule upsert via the flags described above.

**Future-Proofing and Compliance:**  
- Ledger is the canonical source for persistent events.  
- Search, filter, and export logic must comply with audit/reporting/versioning standards described in core specs.  
- **Column orders and field sets for exports/tables are sourced from `tbot_bot/accounting/ledger_modules/ledger_fields.py`** (imported, not hardcoded) to prevent schema drift.  
- Any new module that posts to the ledger must follow the same grouped-row and balances semantics and APIs.


--------------------------------------------------------------------------------
Ledger API — Endpoint Contracts (UPDATED)
--------------------------------------------------------------------------------

Notes:
- JSON endpoints return **plain JSON** (lists/objects) and, for a few actions, a small `{ok: ...}` envelope. There is **no universal `{ok,error,data}` wrapper**.
- Timestamps are UTC ISO-8601. Numeric amounts are returned as numbers.

1) **GET `/ledger/search`** — Query ledger entries (flat rows)
- **Query params:**
  - `q` (free-text search)
  - Sorting: `sort` (field) and `dir` (`asc|desc`). Aliases supported: `sort_by`, `sort_desc=1|0`
    - Supported sort fields (mapped internally): `datetime_utc`, `symbol`, `account`, `action`, `quantity`, `price`, `fee`, `total_value`, `status`, `running_balance`, `trade_id`, `strategy`, `tags`, `notes`
- **Returns:** a JSON **array** of rows (already filtered to “displayable” entries).
- **RBAC:** `viewer`+

2) **POST `/ledger/sync`** — Trigger broker sync *(admin)*
- **Body:** *(none; optional date window not currently read by the route)*
- **Side effects:** runs `ledger_sync.sync_broker_ledger()`; snapshots ledger; posts double-entry rows; writes reconciliation/audit.
- **Returns:** **302 redirect back to the Ledger UI page (rendered by main_web.py).
- **RBAC:** `admin`

3) **GET `/ledger/groups`** — Grouped rows (server-side sort; collapse state included)
- **Query params:** sorting same as `/ledger/search` (`sort`, `dir`). Filters mirror search logic server-side.
- **Returns:** a JSON **array** of group objects. Each group includes at least:
  - `group_id`, optional `collapsed` flag, summary fields (e.g., `symbol`, `datetime_utc`, totals), and per-group legs (schema varies by normalizer/mapping).
- **RBAC:** `viewer`+

4) **GET `/ledger/balances`** — Balances panel data
- **Query params:** none (server computes as-of; attempts `include_opening=True` when supported).
- **Returns:** a JSON **object** with overall totals and per-account balances. Shape mirrors `calculate_account_balances()` (keys may include `as_of_utc`, `totals`, `by_account`).
- **RBAC:** `viewer`+

5) **POST `/ledger/collapse_expand/<group_id>`**
- **Body (JSON):** `{"collapsed_state": 1|0}` (if omitted, backend toggles)
- **Returns:** `{ "ok": true, "result": true|false, "collapsed_state": 0|1 }`
- **RBAC:** `admin`

6) **POST `/ledger/collapse_all`**
- **Body (JSON):** One of `{"collapsed_state": 1|0}`, `{"collapse": true|false}`, or `{"expanded": true|false}`
- **Returns:** `{ "ok": true, "collapsed_state": 0|1, "count": <updated_groups> }`
- **RBAC:** `admin`

7) **POST `/ledger/edit/<entry_id>`** — Inline COA account update *(admin)*
- **Body (form or JSON):**
  - **Required:** `account_code` (validated against active COA codes)
  - **Optional:** `reason` (string)
  - **Optional (any truthy):** `apply_to_category` **or** `update_mapping` **or** `mapping`
    - When truthy, the server **attempts to upsert a global COA→Ledger mapping rule derived from this leg** (best-effort; failure does not block the leg update).
- **Side effects:** updates only the leg’s `account` field; emits an audit-trail event; may upsert mapping rule when requested.
- **Returns:**
  - **AJAX / JSON Accept:** `{ "ok": true, "groups": [...], "balances": {...}, "result": <updated_leg>, "mapping_ok": true|false }`
  - **Non-AJAX:**302 redirect back to the Ledger UI page (rendered by main_web.py).”
- **RBAC:** `admin`


--------------------------------------------------------------------------------
COA Mapping UI — CRUD, Version History, Import/Export (RBAC) (UPDATED)
--------------------------------------------------------------------------------

**UI (coa_mapping.html):**
- Manages **global COA→Ledger mapping rules** (search/filter; highlights unmapped categories).
- Cross-links to the COA tree (read-only reference).
- Actions (admin): **Create**, **Edit**, **Delete** rules.
- **Version History** panel lists snapshots (timestamp, user, diff summary).
- **Import/Export:** JSON/CSV/Markdown bundle; import validates and creates **a new version** (no in-place overwrite).
- All changes are audit-logged and **immediately versioned**; each ledger import/run records the active mapping version in reconciliation logs.

**API (coa_mapping_web.py):**
- **GET `/coa_mapping`** — render Mapping UI
- **GET `/coa_mapping/api`** — list mapping rules (optionally include unmapped categories)
- **POST `/coa_mapping/api`** *(admin)* — create rule
- **PUT `/coa_mapping/api/<rule_id>`** *(admin)* — update rule
- **DELETE `/coa_mapping/api/<rule_id>`** *(admin)* — delete rule
- **GET `/coa_mapping/versions`** — list snapshots
- **GET `/coa_mapping/versions/<version_id>`** — fetch snapshot (read-only)
- **POST `/coa_mapping/rollback/<version_id>`** *(admin)* — rollback by creating a **new current version** from the snapshot
- **GET `/coa_mapping/export`** — export current mapping bundle
- **POST `/coa_mapping/import`** *(admin)* — validate + import bundle → **new version**
- **RBAC:** `viewer` can read; `admin` required for mutations/rollback/import.

**Rules & Enforcement:**
- Mapping changes are **atomic and versioned**; the effective ruleset is always a snapshot (`…/coa_mapping_table.json` lineage).
- **Unmapped/ambiguous transactions are skip_insert and queued for admin assignment in the Web UI (no partial writes)**.
- **Inline per-leg COA edits (Ledger UI)**:
  - By default, they **only** change that single leg and write an audit event.
  - If the request includes `apply_to_category`/`update_mapping`/`mapping` (truthy), the server will **attempt** to create/update a **global mapping rule** derived from the edited leg. This is **best-effort** and does **not** block the leg update if it fails.
  - The canonical place to review and manage global rules remains the **COA Mapping UI**.

================================================================================
Web Interface — Additional Notes & Non-Functional Requirements
================================================================================

- **Performance:** Server-side pagination/sorting for large ledgers; async fetch for balances panel.
- **Security:** RBAC on every endpoint; CSRF on all mutations; credentials redacted in logs.
- **Audit:** Every mutation writes user, UTC timestamp, before/after, and mapping version (where applicable).
- **UX:** Per-page CSS isolation; keyboard navigation in tables; accessible ARIA roles for expand/collapse controls.

================================================================================

