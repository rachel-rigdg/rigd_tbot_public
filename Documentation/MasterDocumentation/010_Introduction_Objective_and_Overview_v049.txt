================================================================================
Document: 010
010_Introduction_Objective_and_Overview
Version: v049
Date: UTC:2025-09-14 00:00:00
================================================================================


================================================================================
Master_Index_and_Summary
================================================================================

This master index provides a comprehensive reference to all TradeBot system specification documents. Each entry includes document number, filename, title, version, timestamp, summary of contents, and cross-reference notes for quick lookup and navigation.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Filename                                      	| Title/Subject                                  		| Summary & Key Contents                                                 |
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 000_chatKick-off.txt                          		| Initial Chat Kickoff & Setup Overview           	| Project goals, workflow, onboarding, and initial constraints            |
| 010_Introduction_Objective_and_Overview_v048.txt 		| Objective & System Overview                 		| High-level system objective, instructions, deployment, time zone std    |
| 020_Directory_Structure_v048.txt               		| Directory Structure & Module Layout           	| Authoritative directory/file structure, launch/control notes            |
| 030_Trading_Bot_Core_Specs_v048.txt            		| Core Trading Bot Specifications                	| Infrastructure, risk, strategy logic, integration, float/ledger rules   |
| 040_Screener_Symbol_Universe_v048.txt          		| Symbol Screener & Universe Controls            	| Screener modules, universe management, dynamic symbol filtering         |
| 050_Enhancements_and_Safety_v048.txt           		| Safety/Enhancement Modules                    	| Kill switch, risk gating, VIX, filters, session enforcement             |
| 060_Accounting_Integration_v048.txt            		| Accounting & Ledger Integration                 	| OFX schema, double-entry, COA, export, reconciliation                   |
| 070_Runtime_Lifecycle_Logging_Reporting_and_Testing_v049.txt 	| Runtime, Logging, Testing, & Reporting 		| Session lifecycle, state machine, logging/report/test specs, TEST_MODE  |
| 080_Env_Security_Integration_and_Expansion_Modules_v048.txt 	| Env, Security, & Expansion Modules        		| Environment, encrypted config, key management, future enhancements      |
| 090_Web_Interface_and_Dashboard_v048.txt       		| Web UI & Dashboard Specification                	| Flask UI, RBAC, bot control, dashboard logic, live status, COA mgmt     |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usage Notes:
- Reference filenames and versions for currency.
- If in doubt, defer to the most recent versioned spec above.

================================================================================
Objective_and_Overview
================================================================================

This module contains the TradeBot system objective, high-level overview, system instructions, deployment notes, platform compatibility, and time zone standards.

Contents:
- Objective (UPDATED)
- System Instructions
- Deployment Notes (Updated)
- Current Platforms (Single Broker)
- Time Zone Standards

All specifications and requirements are mandatory and governed by the RIGD Trading Bot build process.


==============================
Objective (UPDATED)
==============================

TradeBot (TBot) executes bi-directional trades using long equity for bullish signals and inverse ETFs or long puts for bearish signals, strictly determined by SHORT_TYPE_* values in .env_bot. Brokers must support long equity and at least one approved bearish instrument (long put or inverse ETF) per assignment.

The system operates intraday strategies in real time with fully automated, risk-weighted execution. All risk controls are enforced exclusively via .env_bot parameters (DAILY_LOSS_LIMIT, MAX_RISK_PER_TRADE, TOTAL_ALLOCATION, MAX_OPEN_POSITIONS, etc.). **All trade output is logged immutably to OFX-compliant, entity-scoped SQLite ledgers with double-entry enforcement and UTC timestamps.**

**Bootstrap and orchestration flow:**  
- Bot bootstrap is initiated solely through the Web UI (`configuration.html` → `configuration_web.py`), which invokes provisioning/init scripts.  
- Runtime is orchestrated by **one user-mode systemd unit (`tbot_bot.service`)**, which launches `runtime/main.py`.  
- `main.py` performs build checks, starts the unified Flask UI, and **self-schedules** the daily `tbot_supervisor.py` run at `TBOT_SUPERVISOR_UTC_HHMM` (UTC).  
- `tbot_supervisor.py` executes all daily phases (open → holdings → mid → close → universe), updates `bot_state.txt`, writes logs, then exits. It is **never a systemd unit**.

**COA Management and Editing:**  
- Self-contained, UI-only (via `coa.html` and `utils_coa_web.py`).  
- Stored in both JSON and `coa_metadata` table; versioned, validated, and audit-logged.  
- All ledger/schema integration via `coa_utils.py`.  

**Accounting System Role:**  
- Post-session only: may export ledgers, reconcile, or report.  
- Float/reserve/payroll transfers are external; the bot only logs deviation/rebalance events.  

**Ledger Routing Rules:**  
- All trades/PnL must write to `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db` under `output/{IDENTITY}/ledgers/`.  
- All ledger paths resolved via config/path_resolver.  
- No runtime push/pull from external systems.  

**TEST_MODE:**  
- Triggered by presence of `control/test_mode.flag` (or per-test flags).  
- Flags are written by Web UI (`test_web.py`).  
- `main.py` supervises integration tests (`tbot_bot/test/`), which simulate bot logic with **no production ledger/output impact**.  

**Key/Secret Rotation:**  
- **All Fernet keys and encrypted secrets (credentials, config, COA, holdings) are rotated atomically on any change** (user, credential, config, holdings, or COA/mapping).  
- Old keys/secrets are never reused; all rotations are versioned and backed up automatically.  

==============================
System Instructions 
==============================

1. All environment-specific values MUST be sourced ONLY from `.env`, `.env.enc`, `.env_bot`, `.env_bot.enc`. No hardcoded API keys, thresholds, credentials, toggles, file paths, or mode flags. `DISABLED ≠ OMITTED`: All logic must explicitly evaluate suppressed (disabled) states.

2. Inline comments REQUIRED in all generated code: logic branches, `.env_bot` references, and all condition paths must be clearly explained.

3. All file paths must be relative and platform-agnostic. Code must run unmodified on macOS, Linux, and all prod servers.

4. Ledger routing: All trade activity writes to the OFX-compliant, entity-scoped SQLite ledger. Ledger filename: `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`. **Ledger path, float, and all metadata are resolved at session start from internal config files; the bot NEVER receives runtime injection or push from any external system.** All ledger write sessions must begin with a pre-sync snapshot; test modules under `tbot_bot/test/` may simulate trade placement but **must NEVER alter or bypass production ledger logic**.

5. NO re-ingestion of `.csv` or `.json` logs permitted: external audit artifacts only.

6. Every strategy module must implement `.self_check()`. `main.py` must halt if any `.self_check()` fails. Failures must log strategy, reason, error context, with UTC timestamp.

7. `env_bot.py` must validate all required keys from `.env_bot.enc`, decrypted using `tbot_bot/storage/keys/env_bot.key`. Missing/malformed keys must raise a fatal, human-readable startup error.

8. Logs and ledger outputs must include: `timestamp`, `strategy_name`, `ticker`, `side`, `size`, `entry_price`, `exit_price`, `PnL`, `broker`, `error_code` (if applicable). Logs must use global `LOG_FORMAT` (CSV/JSON) from `.env_bot`.

9. `VERSION.md` is mandatory: must include version tag, structural changes, logic differences, and behavior deltas.

10. All modules must remain executable independently. Core logic (`tbot_bot/`) must NEVER import from Flask or `tbot_web/`. Web UI is independent and must not affect trading logic or risk controls. **Bootstrap scripts (`init_system_users.py`, `init_system_logs.py`, etc.) are executed ONLY via the Web UI upon `configuration.html` form submission, triggered by `configuration_web.py`. CLI-based bootstrap of user/credential/log systems is no longer supported.**

11. Strategy routing and broker enablement must be toggled ONLY via `.env_bot`: `ALPACA_ENABLED`, `IBKR_ENABLED`, `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`.

12. **The Chart of Accounts (COA) for the bot is fully self-contained and managed solely through a dedicated COA Management page in the tbot_web UI. All creation, modification, and export of the COA must occur via the Web UI. No CLI utilities, accounting system pushes, or external edits are permitted. The COA must be versioned, validated at runtime, and stored as both a JSON structure and a SQLite metadata table. All Web UI COA operations must use `tbot_web/support/utils_coa_web.py` and all ledger/schema operations must use `tbot_bot/accounting/coa_utils.py`.**

13. **All Fernet keys and corresponding encrypted secrets (including those for ledger, COA, user credentials, and all config) must be rotated atomically and re-encrypted whenever any config, credential, or sensitive secret is modified, or a user is created/modified. This process is fully automated, with all affected files backed up before any overwrite. Old keys/secrets are never reused, and rotation requires no manual action.**  

14. Improvisation is FORBIDDEN. Clarify ambiguities before code changes. STRICT deterministic, auditable logic only.


================================================================================
Deployment Notes 
================================================================================

- All paths must be relative and cross-platform compatible (macOS, Linux, cloud).
- `tbot_bot/` must run independently of `tbot_web/`; core trading must continue if web UI is disabled.
- Logs, ledger exports, and backup behavior remain active regardless of web interface state.
- Only one broker should be enabled (`BROKER_NAME=ALPACA`, `ALPACA_ENABLED=true`, etc.).
- Broker API keys from `.env`/`.env.enc` must validate at startup—failure causes immediate shutdown.
- Strategy toggles: `STRAT_OPEN_ENABLED`, `STRAT_MID_ENABLED`, `STRAT_CLOSE_ENABLED`.
- Pre-trade validation includes:
  - Market spread ≤ 1.5% of entry price
  - Volume ≥ `MIN_VOLUME_THRESHOLD`
  - No violations of `MAX_RISK_PER_TRADE` or `DAILY_LOSS_LIMIT`
- Auto-shutdown triggers:
  - Broker API failure (`watchdog_bot.py`)
  - Critical runtime error (`error_handler_bot.py`)
  - Loss breach (`kill_switch.py`)
- Ledger location and naming:
  - Path: `tbot_bot/output/{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}/ledgers/`
  - File: `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`
- Ledger protection:
  - Pre-sync snapshot before writes (`tbot_bot/accounting/ledger_modules/ledger_snapshot.py`)
  - EOD archival/rotation (`tbot_bot/reporting/auto_backup.py`)
- OFX-aligned exports and reports are generated by `tbot_bot/reporting/ledger_report.py`; external accounting export is via `tbot_bot/accounting/accounting_api.py`.
- Log files (global): `tbot_bot/output/logs/*.log` (`main_bot.log`, `heartbeat.log`, `router.log`, `screener.log`, `kill_switch.log`, `provisioning.log`, `system_users.log`, `user_activity_monitoring.log`, `status.json`, `start_log`, `stop_log`, `test_mode.log`, password reset logs).
- Session-scoped logs: `tbot_bot/output/{IDENTITY}/logs/{open,mid,close,unresolved_orders,error_tracebacks}.log`
- Post-session logs may be zipped/archived (`auto_backup.py`)
- Optional cloud sync: `support/scripts/upload_backups_to_cloud.sh`
- Backups must not block live ledger writes; all archives are timestamped
- Session timing: `.env_bot` defines `START_TIME_*`, `[STRAT]_ANALYSIS_TIME`, `[STRAT]_MONITORING_TIME`
- Respect `TRADING_DAYS`—block execution on weekends/holidays
- Start/Stop/Kill controls: Web UI writes `tbot_bot/control/control_start.flag`, `control_stop.flag`, optional `control_kill.flag`; `runtime/main.py` orchestrates via `tbot_supervisor.py`
- **Systemd orchestration:** exactly one user-mode unit (`tbot_bot.service`) launches `runtime/main.py`; there are **no** `.timer` or `@instance` units. `main.py` launches the Flask UI and **self-schedules** the daily supervisor run at `TBOT_SUPERVISOR_UTC_HHMM` (UTC).
- **Late-start behavior & flags:** if `main.py` starts after the configured UTC trigger, it launches the supervisor **immediately** for that day; the supervisor reads `control_stop.flag` / `control_kill.flag` **between phases** to halt or abort safely.


--------------------------------------------------------------------------------
COA/Schema Enforcement 
--------------------------------------------------------------------------------

- All bot ledger files **must** match the schema defined in `tbot_bot/accounting/tbot_ledger_schema.sql` and the COA defined in `tbot_bot/accounting/tbot_ledger_coa_template.json`.
- The COA must be present in each bot ledger as a dedicated table (`coa_metadata`) containing: `currency_code`, `entity_code`, `jurisdiction_code`, `coa_version`, `created_at_utc`, `last_updated_utc`.
- Any schema or COA mismatch at runtime (detected by `build_check.py` or ledger init scripts) must block execution and log a fatal error.
- The bot’s COA is self-contained and managed exclusively via the tbot_web UI (`coa_web.py`, `coa.html`). All edits and exports are performed here; no external push/pull from accounting.
- Human-readable COA exports are generated by the web UI and stored in `tbot_bot/output/{IDENTITY}/ledgers/` for reference/audit.
- On new ledger creation, the COA table is initialized from the internal COA (default or UI-edited version) and locked for double-entry enforcement.
- All account transactions are validated against the COA at time of entry.
- **COA operations in the UI must use `tbot_web/support/utils_coa_web.py`; ledger and schema checks must use `tbot_bot/accounting/coa_utils.py`.**


================================================================================
Current Platforms (Single Broker)
================================================================================

Development:
- Local dev on macOS 15.2, Python 3.11+
- macOS/Linux compatible only (no platform-specific code)
- Use VS Code, Black/Ruff for linting/formatting
- Scripts run via terminal or cron, not GUI
- Test logs/export saved to `logs/bot/sessions/`, `backups/`

Production:
- Runs on Ubuntu 22.04 LTS (DigitalOcean)
- Deployed via SCP/SFTP or `git pull` to prod branch
- Run mode:
  - `tbot_bot/runtime/main.py` is the **single systemd entrypoint** for all bot operations (launched by `systemd_units/tbot_bot.service`)
  - No other script or CLI tool launches bot workers, watchers, or strategies
  - Manual or cron launches of `start_bot.py` or `service_bot.py` are **deprecated and unsupported**; control is via Web UI flags and systemd only
- Logs:
  - `tbot_bot/output/{IDENTITY}/logs/*.log` – strategy logs, unresolved orders, errors
  - `tbot_bot/output/{IDENTITY}/summaries/` – session summaries
  - `tbot_bot/output/{IDENTITY}/trades/` – CSV/JSON trade histories

Brokers:
- One active broker per bot
- Broker, float, and related metadata assigned by internal config loaded at bootstrap (`.env_bot.enc`, `bot_identity.json.enc`)
- Modular integrations:
  - Alpaca (default equities)
  - IBKR (ETFs, puts)
  - Tradier/Webull (test only)
- Each must pass `.self_check()`

Market Data:
- Finnhub API via `screeners/finnhub_screener.py`
- Pre/intraday/afterhours scan modes
- Filters: volume, float, price, gap via `.env_bot`

Accounting:
- All trades and ledgers are available for post-session ingestion/export by the accounting system for audit, reporting, and reconciliation.
- Ledger format: `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`
- Structure defined in `tbot_bot/accounting/tbot_ledger_schema.sql`, OFX-aligned
- **COA required:** Each ledger is initialized and validated against `tbot_ledger_schema.sql` and `tbot_ledger_coa_template.json`, with a `coa_metadata` table and account hierarchy included at creation.
- Exports/reports via `tbot_bot/reporting/ledger_report.py`; external postings via `tbot_bot/accounting/accounting_api.py`
- TradeBot does not emit CSV for ledgers; all CSV/JSON outputs are for human audit only

Web Interface:
- `tbot_web/` Flask dashboard (modular, phase-driven)
- Features:
  - Encrypted login (bcrypt + Fernet keys; `.env`/`.env.enc` only for Flask secret key)
  - Multi-phase config/registration/startup: UI phases for bootstrap, registration, and main dashboard, orchestrated by bot state and systemd units
  - Secure config UI: All configuration and credentials entered via Web UI, never CLI
  - Logs/status: Live dashboard, logs, and bot status read from `status.json` and log files per bot
  - Start/Stop/Kill: UI triggers write `control_start.flag`, `control_stop.flag`, optional `control_kill.flag` for systemd/bot lifecycle
  - **COA management:** COA can be viewed and edited exclusively through a dedicated tbot_web UI page, with RBAC enforcement. Human-readable COA export in Markdown/CSV. All edits versioned and audit-logged.

Alerts:
- Optional SMTP email via `.env`/`.env.enc`:
  - `NOTIFY_ON_FILL=true`, `NOTIFY_ON_EXIT=true`
- SMTP creds stored encrypted in `tbot_bot/storage/secrets/smtp_credentials.json.enc`

Security:
- All provisioning, encryption, and secret management performed via the Web UI (`configuration_web.py`, `config/config_encryption.py`)
- `.env_bot` → `.env_bot.enc` and `.env` → `.env.enc` (where used) via Fernet
- Fernet keys stored under `tbot_bot/storage/keys/` (`env_bot.key`, `env.key`, and category-specific keys)
- **All core configuration, COA management, and secrets (including those for accounting and credentials) are subject to atomic Fernet key and secret rotation. Whenever any sensitive config or credential is changed, or any user is created/modified, all relevant keys and encrypted secrets are automatically regenerated and re-encrypted, with robust backup and no manual action required.**

Backup:
- Logs + ledgers archived via `tbot_bot/reporting/auto_backup.py`
- Stored under `tbot_bot/storage/backups/` (timestamped); optional upload via `support/scripts/upload_backups_to_cloud.sh`
- Secondary replication recommended (FTP/S3/ProtonVault)

Deployment Verification:
- Dry-run test required pre-live
- Must confirm:
  - Broker API up
  - Trade logs written
  - Ledger writes (COA present and schema validated)
  - Strategy triggers
  - Alerts (if configured)

Recovery:
- Backups must be timestamped + encrypted
- Mirror logs/ledgers to vault at EOD
- Regular integrity checks on `backups/` for audit/failure recovery

================================================================================
Time Zone Standards
================================================================================

- All persistent time variables, logs, ledger entries, alerts, and OFX timestamps use **UTC (Coordinated Universal Time)**—this is enforced system-wide.
- **Strategy start times** in `.env_bot` (e.g., `START_TIME_OPEN`, `START_TIME_MID`, `START_TIME_CLOSE`) are now specified in **local time** according to the configured `TIMEZONE` (e.g., `"US/Eastern"`, `"Europe/London"`).  
  The system automatically converts local times to UTC for all scheduling and execution.
- **Supervisor trigger:** `TBOT_SUPERVISOR_UTC_HHMM` is specified **in UTC** and is **not** converted from local time (e.g., `0600` UTC ≈ 01:00 EST / 02:00 EDT).
- Ledger writes (e.g., `tbot_bot/output/{IDENTITY}/ledgers/{..._BOT_ledger.db}`) **must set `DTPOSTED` and all OFX timestamps in UTC**.
- All COA/ledger metadata tables (`coa_metadata`) include `created_at_utc` and `last_updated_utc` fields, set in UTC at creation/update.
- Internal logic and comparisons in `strategy_router.py`, `status_bot.py`, and all time utilities **must always standardize to UTC** before storing or logging.  
  Local times may be displayed in the UI, but never stored as authoritative timestamps.
- **Rationale:** UTC eliminates ambiguity from DST, local zones, or server environments; ensures OFX compliance, reliable cross-entity reconciliation, and robust scheduling for distributed deployments.
- **Example mapping (US/Eastern):**
  - 09:30 (local) + `"US/Eastern"` → 14:30 UTC (Market Open)
  - 10:30 (local) + `"US/Eastern"` → 15:30 UTC (Midday)
  - 14:30 (local) + `"US/Eastern"` → 19:30 UTC (Close)
- **Local debugging:** Convert between UTC and the configured `TIMEZONE` before interpreting logs or DB entries. Use `utils_time.py` helpers for safe conversion.
- **Best practice:** Always use the centralized helpers in `utils_time.py` for all time parsing, conversion, and comparison.

Example Code:

from datetime import datetime, timezone
import pytz

def utc_now():
    return datetime.utcnow().replace(tzinfo=timezone.utc)

def now_local():
    # Returns local time according to config['TIMEZONE']
    from tbot_bot.config.env_bot import get_bot_config
    config = get_bot_config()
    tz = pytz.timezone(config.get("TIMEZONE", "UTC"))
    return utc_now().astimezone(tz)



================================================================================
Long-Term Holdings Management Module Specification
================================================================================

------------------------------------------
Objective:
------------------------------------------
Automate the management of long-term holdings (ETFs, stocks, or other allowed securities) alongside the trading bot's cash float. The module ensures:

- Sufficient cash float for trading bot operations.
- Ongoing tax reserve funding for realized gains.
- Automated payroll extraction for operator income.
- Periodic portfolio rebalancing into target allocations.
- Comprehensive, persistent, and audit-compliant tracking of all allocations and flows.

------------------------------------------
Functional Requirements:
------------------------------------------

1. **Security/ETF Management**
   - User specifies any number of securities (up to 20).
   - For each symbol, user may set an explicit allocation %. Any symbols with blank % will divide the remainder of the “long-term” allocation equally.
   - All trades support fractional share orders.
   - Each security's data record includes:
     - Symbol
     - Allocation % (blank allowed)
     - Cost basis (avg. purchase price)
     - Current market price
     - Units held (shares)
     - Market value
     - Realized P/L
     - Unrealized P/L
     - Total $ gain/loss
     - All transaction audit logs
   - **Realtime compliance warning:** System must validate allocations and settings live, blocking save or rebalance if total allocations, float, or reserve settings are out of spec.
   - **All holdings actions, trades, allocations, and configuration changes must be logged to both the audit trail and the ledger/COA, including user, timestamp (UTC), action, amount, and before/after values.**

2. **Cash Float Management**
   - User sets **Float Target %** (e.g. 10% of total account value).
   - Bot monitors cash balance daily (10 minutes post-open strategy) or after each strategy session.
   - If cash < Float Target %, system sells securities (by value order) to restore float.
   - If float is restored by selling securities and those sales result in realized gains, the system will **allocate a tax reserve from those gains** according to the configured tax reserve % (see section 3).
   - No payroll allocation is ever made from float-top-up security sales.
   - If cash > Float Target %, system may (optionally) sweep excess into securities.
   - All float actions logged and posted to ledger/COA.
   - **Float, tax, and payroll reserve allocations are immutable—once funds are reserved, they are never reduced, clawed back, or reused for other purposes except by explicit manual override with mandatory audit entry.**

3. **Tax Reserve Management**
   - User sets **Tax Reserve %** (e.g. 20%).
   - Tax reserve applies to all **realized gains**, including:
     - Trading bot activities.
     - Security sales (including those performed to top up cash float).
   - No tax reserve is allocated on realized losses.
   - Daily, the specified % of realized gains is moved into the Tax Reserve account.
   - Tax reserve may be held in cash or a user-specified low-risk vehicle.
   - All tax reserve allocations logged to the ledger/COA and audit trail.
   - **Once allocated, tax reserves are never reduced or reallocated in case of drawdowns or losses.**

4. **Payroll Allocation**
   - User sets **Payroll %** (e.g. 10–20%).
   - Payroll allocation is applied only to *post-tax* realized gains from trading bot activities (not float-top-up sales).
   - No payroll allocation is ever made from float-top-up security sales or realized losses.
   - Daily process moves this amount to the Payroll account.
   - All payroll allocations logged to the ledger/COA and audit trail.
   - **Once allocated, payroll reserves are never reduced or reallocated in case of drawdowns or losses.**

5. **Reinvestment of Remaining Gains**
   - After Tax and Payroll splits, remaining profit is automatically reinvested in selected securities per allocation %.
   - Any blank allocation % symbols split the remainder equally.
   - Fractional buys supported.
   - All actions logged and posted to ledger/COA and audit trail.
   - **System must block any save, rebalance, or allocation action if it would violate float, reserve, or allocation compliance. User is notified and no action is performed.**

6. **Persistent Configuration and Secrets**
   - All security list, allocation %, and holdings settings are stored in a dedicated encrypted holdings secrets file (not in .env_bot.enc).
   - Module must read, create, and update its own secrets file, handling missing files gracefully (creates file when first settings are saved).
   - All access is via atomic, encrypted read/write routines with audit/rollback support.
   - **All config changes must trigger a backup of the previous secrets and generate a persistent audit entry including the user and timestamp. Environment variables may be used only as a runtime cache, not the source of truth.**

7. **Automated and Manual Portfolio Rebalancing**
   - User sets **Rebalance Interval** (3, 6, or 12 months).
   - Rebalance runs automatically on schedule or via manual UI trigger.
   - System:
     - Reads current portfolio weights.
     - Calculates deviations from targets.
     - Executes fractional buy/sell orders to correct.
     - Logs all rebalance transactions with full audit trail and updates the ledger/COA.
   - Rebalance logic respects any blank allocation % fields, dividing residual % across remaining symbols.
   - **Simulation/preview of rebalance:** UI must allow user to preview/“simulate” the rebalance showing exact orders and outcomes before confirming.
   - **Automated tests and simulations must fully cover: normal operation, edge cases (0/negative gains, missing/invalid config), failure modes, and audit/compliance logging for all critical actions.**


------------------------------------------
Web UI Management Page Requirements:
------------------------------------------

- **Security/ETF Management Grid**
  - Add or delete up to 20 securities.
  - For each, set allocation % (optional).
  - Show computed actual %, auto-adjusting for blanks.
  - Show cost basis, current price, shares, current value, realized/unrealized P/L.
  - UI shows flag if allocations don't sum to 100% (after blank fill).
  - All changes auto-save to encrypted secrets.
  - **Live compliance warnings:** UI must provide realtime feedback if any allocation, float, or reserve parameter is invalid or out of compliance.

- **Global Allocation Settings**
  - Float Target % (default: 10%)
  - Tax Reserve % (default: 20%)
  - Payroll % (default: 10–20%)
  - Rebalance Interval (choices: 3, 6, 12 months)
  - Enable/disable Auto-Rebalance toggle

- **Status Panel**
  - Show:
    - Total Account Value
    - Cash/Float Balance
    - Tax Reserve Balance
    - Payroll Reserve Balance
    - Security holdings and % allocations (current vs. target)
    - Deviations from targets flagged
    - Next scheduled rebalance
  - Display computed values for each category live (or read from ledger, as configured).
  - Export holdings/allocation report.

- **Manual Controls**
  - Trigger Immediate Rebalance
  - Preview/simulate next rebalance before commit
  - Trigger Immediate Cash Top-Up
  - Export all logs/transactions for review

------------------------------------------
Automated Daily Workflow (Post-Open):
------------------------------------------

- **Triggered daily, 10 minutes after the 'open' strategy completes (approx. 10:45am EST / 14:45 UTC, during market hours).**
- Workflow:
    1. Compute total account value.
    2. Verify cash balance against Float Target %:
       - If below target, sell securities to restore.
    3. Calculate **Realized Gains** for the day.
    4. Allocate **Tax Reserve** to designated ledger/COA field.
    5. Allocate **Payroll** to designated ledger/COA field.
    6. Allocate remaining profit to securities per allocation % logic.
    7. Log all actions with timestamp, context, and resulting balances (append-only, immutable).
    8. All transactions update ledger/COA per correct category.
- **ETF/long-term holdings rebalancing is performed only on scheduled intervals (3, 6, or 12 months) or manual trigger, not daily.**


------------------------------------------
Rebalancing Workflow:
------------------------------------------

- Runs automatically or by manual trigger.
- Fetches holdings, recalculates % per user/auto logic, realigns via fractional orders.
- Records all activity in logs and ledger.

------------------------------------------
Audit, Ledger & Compliance:
------------------------------------------

- All top-up, tax reserve, payroll, and security trades immutably logged in structured JSON.
- Ledger updated for every allocation (float, tax, payroll, investment).
- COA categories include:
  - Float
  - Tax Reserve
  - Payroll
  - Each security as asset/holding
  - All transactions tagged by action/context (rebalancing, top-up, payroll, etc)
- All config and logs encrypted at rest, append-only.

------------------------------------------
Broker Integration Requirements:
------------------------------------------

- Fractional order support mandatory.
- Broker API credentials via encrypted secrets.
- Logs/timestamps on all API actions.
- Modular multi-broker support (Alpaca, IBKR, Tradier, Robinhood, future expansion).

------------------------------------------
Configuration Storage:
------------------------------------------

- All allocation settings, security lists, and relevant config in dedicated encrypted secrets file, not in .env_bot.enc.
- .env_bot.enc stores only pointer/flag to holdings system, not holdings data.
- All config updates trigger encrypted backup/rollback.

------------------------------------------
Security & Compliance:
------------------------------------------

- All configuration and credentials encrypted at rest.
- Audit logs and ledgers are immutable and append-only.
- All actions must comply with double-entry, OFX alignment, and entity/jurisdiction scoping.

------------------------------------------
Default Example:
------------------------------------------

- Float Target %: 10%
- Tax Reserve %: 20%
- Payroll %: 10%
- Rebalance Interval: 6 months
- Securities:
  - SCHD: (user defined or auto-allocation)
  - SCHY: (user defined or auto-allocation)

------------------------------------------
Locked Design Mandates:
------------------------------------------

- All functions as described above are MANDATORY (no "future" or "optional").
- UI and backend must handle full lifecycle (create/read/update/delete/allocation/audit/ledger).
- All calculations are to be based on live portfolio values and transactions; no shortcuts.
- Full international support, multi-broker expansion, and ledger auditability is required.

================================================================================
