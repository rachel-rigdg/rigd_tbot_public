================================================================================
Document: 020
Directory_Structure
Version: v049
Date: UTC:2025-09-14 00:00:00
================================================================================

This document defines the authoritative directory and file structure for the RIGD TradeBot project.

Contents:
- Full Directory Structure Diagram (reflects required runtime and automation organization)

All file locations and naming conventions must be strictly followed for compliance, operational integrity, and system automation.

All provisioning, encryption, and secret management must be performed via the Web UI configuration step. No CLI/manual/legacy provisioning is ever allowed after bootstrap.


================================================================================
Overall Directory Structure Diagram 
================================================================================

rigd_tbot/
│
├── VERSION.md                          # Human/gpt-readable version history for project reference
├── CHANGELOG.md                        # Optional: Commit-style technical history of all code and spec changes
├── README.md                           # Project-wide usage, setup, and architecture summary
├── requirements.txt                    # Python package requirements for all components
├── pytest.ini                          # Pytest configuration for test discovery, markers, and options
├── restart_systemd.sh                  # Dev helper to restart user-level systemd units/services for the bot
├── run_tbot_old.sh                     # (LEGACY) Unified launcher
├── run_tbot.sh				            # Unified launcher: boots TradeBot web UI, performs full bootstrap/config provisioning, then launches the bot on success
├── write_secrets.py                    # Migration helper: write plaintext → encrypted secrets per schema (use Web UI in production)
├── .env                                # Global runtime config for Flask port, encryption, and login (plaintext)
├── .env.enc                            # Global runtime config for Flask port, encryption, and login (Encrypted)
├── .env_bot                            # Decrypted bot runtime settings (overwritten if using encrypted version)
├── .env_bot.template-test              # Sample config for testing/cloning bots
├── .rsyncignore_dev                    # Dev rsync excludes for run-on-save workflows and local syncs
├── .scpignore_env                      # File exclusion rules: env/config only
├── .scpignore_dev                      # File exclusion rules: dev/test artifacts
├── .scpignore_enc                      # File exclusion rules: deploys only encrypted config
├── .scpignore_code                     # File exclusion rules: code-only deploys (omit env/ledgers/secrets/backups)
├── .scpignore_prod_archive             # File exclusion rules: production archive packaging (excludes env, ledgers, etc.)
│   
├── tools/				                # One-time encryption/auth tools (DEPRECATED for runtime; provisioning now via config Web UI scripts) - NOTE: All secret and Fernet key creation/provisioning must occur via the Web UI configuration/provisioning step. Legacy tools in /tools/ are for initial import/migration ONLY and are not used by production system after first bootstrap.
│   ├── _init_all_core_databases.sh     # [Legacy] CLI for initial database schema setup; NOT for production use
│   ├── build_check.py			        # Full project self-check: keys, schemas, config, directory structure, file integrity
│   ├── encrypt_env.py			        # [Legacy] CLI: Encrypts .env for initial migration only; never generates Fernet keys for runtime.
│   ├── encrypt_env_bot.py           	# [Legacy] CLI: Encrypts .env_bot as support/.env_bot.enc with Fernet key in tbot_bot/storage/keys/env_bot.key
│   ├── encrypt_json.py			        # [Legacy] CLI: Encrypts JSON secrets in tbot_bot/storage/secrets/ using category Fernet keys
│   ├── hash_password.py		        # [Legacy] CLI: Creates bcrypt-hashed user, Fernet key, and DB entry; superceded by Web UI
│   ├── init_encrypted_secrets.py	    # [Legacy] CLI: Generates encrypted secrets from plaintext templates for one-time bot setup
│   ├── log_test.py			            # Sanity-check: Verifies log output in active runtime environment
│   ├── secrets_template.json           # Sample JSON shape for encrypted secret payloads (reference/migration)
│   ├── secrets_template.txt		    # Sample bot configuration values (plaintext reference only)
│   ├── server_template.txt		        # Sample server setup values (plaintext reference only)
│   ├── setup_server.sh                 # [Legacy] CLI/server bootstrapping script
│   └── sync_project.sh                 # Deployment sync utility: manages live/dev folder and file syncs
│   
├── backups/                            # Archived audit logs, encrypted session reports, and credential backups (auto-rotated)
│   └──  logs_*.zip                     # Zipped daily logs (all modes)
│       └── summary_*.json              # Encrypted JSON session summaries (PnL, metrics)
│    
├── logs/                               # Live log files (rotated by auto_backup)
│   ├── bot/
│   │   └── sessions/                   # Strategy/session-specific runtime logs
│   └── web/			                # Web UI authentication logs (multi-user, full audit)
│       ├── access.log                  # Web: IP/timestamp log of all login events
│       └── auth_failures.log           # Web: Failed login, lockout, and RBAC audit events
│    
├── support/				            # Internal project documentation and automation scripts
│   ├── architecture.md                 # Full system/module architecture breakdown (reference)
│   ├── API_reference.md                # CLI/internal API function reference (optional)
│   ├── security_notes.md               # Data handling, key roles, and encryption policies (reference)
│   │
│   └── scripts/				            # Internal automation and codebase tools (non-runtime)
│       ├── audit_log_parser.py          	# CLI: Parse, summarize, and export audit log analytics
│       ├── Fix_Paths.py			        # Codebase repair: Recursively fixes legacy import paths in tbot_bot/
│       ├── sync_to_accounting.py        	# CLI: Push trade data to accounting ingestion endpoint (offline/manual sync)
│       ├── tradebot.service              	# Systemd or process manager service definition for bot daemon
│       └── upload_backups_to_cloud.sh   	# CLI: Uploads backup archives to S3/cloud/offsite vault
│
├── systemd_units/	
│   └── tbot_bot.service              		    # tbot Core Bot Runtime	- launches:tbot_bot.runtime.main	→ symlink: ~/.config/systemd/user/
│
├── tbot_bot/                                	# Core engine: execution, strategy, reporting, and config
│   ├── __init__.py
│   │
│   ├── accounting/                              # Accounting integration: COA/ledger creation, validation, export; OFX-aligned, UTC-only, double-entry, immutable audit
│   │   ├── README_COA.md                        # Documentation: COA/ledger schema usage, UI editing instructions, compliance notes
│   │   ├── README_LEDGER.md                     # Documentation: ledger architecture, posting rules, and reconciliation workflow
│   │   ├── account_transaction.py               # Builds accounting-compliant journal entries for export (post-trade only; no secrets/keys management)
│   │   ├── accounting_api.py                    # Exports finalized trade/report data to external accounting endpoints (no live config writes)
│   │   ├── accounting_config.py                 # Validates/creates output folders; enforces ledger/COA existence and schema compliance via path_resolver
│   │   ├── coa_mapping_table.py                 # COA mapping rules: lazy-create/load/save coa_mapping_table.json; lookup; versioned snapshots; atomic writes; learns from manual fixes
│   │   ├── coa_utils.py                         # COA DB utilities: create/import/export/validate COA DB (metadata + hierarchy), supports Web UI editing
│   │   ├── init_coa_db.py                       # Bootstrap: initializes COA DB from tbot_ledger_coa_template.json (invoked only at provisioning/reset)
│   │   ├── init_ledger_db.py                    # Bootstrap: initializes bot ledger DB from tbot_ledger_schema.sql (invoked only at provisioning/reset)
│   │   ├── reconciliation_log.py                # Append-only reconciliation log: trade_id, status, compare_fields, sync_run_id, api_hash, versioning/metainfo
│   │   ├── tbot_ledger_coa_template.json        # Editable COA hierarchy/template (codes/names/structure: holdings, float, tax, payroll reserves, audit fields)
│   │   ├── tbot_ledger_schema.sql               # SQL schema for bot ledger DB (double-entry tables, audit_trail, grouping, indices/UNIQUE guards; UTC defaults)
│   │   ├── lots_engine.py                       # Tax-lot selection engine (FIFO/LIFO/Specific ID) for gain/loss computation
│   │   ├── ledger_utils.py                      # (LEGACY) Deprecated helpers — retained for backward-compat only; DO NOT use in new code
│   │   ├── ledger.py                            # (LEGACY NAME) Unified ledger API façade delegating to ledger_modules; no direct SQL; kept for compat imports
│   │   │ 
│   │   ├── defaults/
│   │   │   └── coa_mapping_seed.json            # Seed mapping rules to bootstrap coa_mapping_table on first run
│   │   │ 
│   │   ├── sql/
│   │   │   └──  001_lots_schema.sql            # Schema for tax-lot tracking tables used by lots_engine
│   │   │ 
│   │   └── ledger_modules/                      # Production ledger logic (modular, testable): mapping → compliance → dedupe → double-entry → query → audit/snapshot
│   │       ├── ledger_account_map.py            # Thin wrapper over COA mapping: resolves account paths; flags unmapped with skip_insert=True
│   │       ├── ledger_audit.py                  # Immutable audit logging: sync start/end, inserts/edits; includes sync_run_id/broker_code/mapping_version (UTC)
│   │       ├── ledger_balance.py                # Per-account/running balances with Decimal; calculate_account_balances(as_of/window)
│   │       ├── ledger_bootstrap.py              # Ensures ledger DB/schema/indices exist; opens/validates ledger state
│   │       ├── ledger_compliance_filter.py 	 # Validates required fields, allowed actions, no-future-dates, numeric ranges; drops/flags invalid before write
│   │       ├── ledger_core.py                   # Low-level shared/core helpers: tx_context/get_conn/identity/UTC; no business logic
│   │       ├── ledger_db.py                     # Connection/PRAGMA/row_factory; schema presence/indices/UNIQUE(FITID) checks; path_resolver integration
│   │       ├── ledger_deduplication.py		 # Idempotency: FITID+content hash; DB UNIQUE conflict-safe path; dedupe metrics
│   │       ├── ledger_double_entry.py           # Posting: balanced debit/credit splits (sum==0), sign rules, group_id propagation; atomic batch insert + verify
│   │       ├── ledger_edit.py                   # Edit/update/resolve with audit; soft-delete via status; preserves double-entry invariants
│   │       ├── ledger_entry.py                  # Builds normalized ledger rows (FITID, DTPOSTED UTC, identity, response_hash, sync_run_id); no direct writes
│   │       ├── ledger_fields.py                 # Canonical field lists for all tables; exact DB column order; single source of schema truth
│   │       ├── ledger_grouping.py               # Grouping/rollup for UI/reporting; collapse/expand state; orphan-safe grouping by group_id
│   │       ├── ledger_hooks.py                  # Tax/payroll/float/rebalance/reserve hooks; produce compliant double-entry via mapping pipeline only
│   │       ├── ledger_misc.py                   # Shared utilities: Decimal money, rounding, memo/name formatting; zero DB I/O
│   │       ├── ledger_opening_balance.py        # Opening balance entries and initial position seeding for a new ledger
│   │       ├── ledger_posting.py                # Posting router for buy/sell/cash actions → double-entry splits
│   │       ├── ledger_query.py                  # Read API: fetch_grouped_trades, search, paging; ISO UTC timestamps; Decimal amounts for UI/reporting
│   │       ├── ledger_snapshot.py               # Pre-sync snapshots to output/.../ledgers/snapshots/ (UTC+sync_run_id); retention/rollback aids
│   │       ├── ledger_sync.py                   # Orchestrates broker sync: positions(tracked opening) + trades/cash → normalize → map → comply → dedupe → post → audit → reconcile
│   │       ├── mapping_auto_update.py           # Learns from manual mappings; proposes safe upserts to mapping table with audit
│   │       └── schema.sql                       # Canonical SQLite DDL for ledger tables/indices used by modules
│   │ 
│   ├── backtest/                                # Backtesting, simulation, and research
│   │   ├── results/
│   │   ├── backtest_engine.py                   # Strategy replay and simulation engine
│   │   ├── load_historical_data.py              # Loads CSV/OHLCV/tick data for backtesting
│   │   ├── performance_metrics.py               # Computes Sharpe, win rate, drawdown, and related stats
│   │   └── plot_results.py                      # Graphs equity curves, trades, and heatmaps
│   │
│   ├── broker/                                             # Core broker and strategy execution system
│   │   ├── broker_api.py                                   # Central broker façade; exposes get_trades(), get_activities(), get_positions(); selects active adapter from env; returns raw canonical records to normalizer (no DB/SQL here)
│   │   │ 
│   │   ├── adapters/                                       # Per-broker adapter implementations; fully encapsulate API/order/trade/cash and eligibility logic (no ledger writes)
│   │   │   ├── __init__.py                                 # Dynamic import/registration of broker adapters by name
│   │   │   ├── alpaca.py                                   # Alpaca adapter: REST calls with pagination/retries; strict UTC; stable IDs for FITID seeds; order execution; trades/cash/positions fetch
│   │   │   ├── ibkr.py                                     # Interactive Brokers adapter: REST/gateway wrappers; order execution; eligibility; trades/cash/positions fetch
│   │   │   └── tradier.py                                  # Tradier adapter: REST; order execution; eligibility; trades/cash/positions fetch
│   │   │ 
│   │   ├── core/                                           # Core broker base classes and interfaces
│   │   │   ├── base_broker.py                              # Abstract base broker with shared logic; no normalization or accounting concerns
│   │   │   └── broker_interface.py                         # Adapter interface enforcing method signatures for adapters
│   │   │ 
│   │   └── utils/                                          # Shared utilities for brokers (no accounting imports)
│   │       ├── __init__.py                                 # Package init
│   │       ├── broker_request.py                           # HTTP helpers with retry/backoff, 429 handling; attach request UUID + response hash; UTC-safe parsing
│   │       └── ledger_normalizer.py                        # Sole public normalization API → OFX-aligned, UTC DTPOSTED, TRNTYPE, FITID, group_id; delegates to private normalizers/*
│   │           └── normalizers/                            # Private normalization modules (do not import outside ledger_normalizer.py)
│   │               ├── __init__.py                         # Re-exports for ledger_normalizer only; blocks external imports
│   │               ├── _common.py                          # Shared enums, OFX/TRNTYPE maps, Decimal money/qty sanitizers, UTC helpers, FITID hashing; zero I/O
│   │               ├── _trades.py                          # Trade normalization (side/action mapping, price/qty/fees, identifiers)
│   │               ├── _cash.py                            # Cash/dividend/fee/transfer normalization
│   │               └── _positions.py                       # Opening positions snapshot normalization (symbol, qty, basis, market value)
│   │ 
│   ├── config/                                 # Local bot config loaders, encryption, and secure settings editors
│   │   ├── bootstrapping_helper.py		        # Runs core DB initialization scripts (calls tbot_bot/core/scripts/*); checks and sets .bootstrapped flag (called by provisioning_runner.py)
│   │   ├── config_encryption.py                # Fernet encrypt/decrypt for config/secrets; secure file backup (called by provisioning_helper.py and configuration_web.py)
│   │   ├── db_bootstrap.py                     # Calls tbot_bot/core/scripts/* for DB init (delegates schema logic); invoked by provisioning_runner.py
│   │   ├── env_bot.py                          # Loads/validates/parses .env_bot for runtime; used by UI and shell launchers (never touches keys)
│   │   ├── error_handler_bot.py                # Global error logging, exception tracing, system error output (imported in all runtime modules)
│   │   ├── key_manager.py                      # Generates/checks/rotates Fernet keys (category-specific); called by provisioning_helper.py and provisioning_runner.py
│   │   ├── network_config.py                   # Loads/decrypts encrypted network config (network_config.json.enc) using Fernet; called by bot, web, and shell
│   │   ├── provisioning_helper.py		        # Generates and writes all required Fernet keys and minimal secrets (idempotent); calls key_manager.py, security_users.py; invoked by provisioning_runner.py
│   │   ├── provisioning_runner.py		        # Central orchestrator: watches for provisioning flag; calls key_manager.py, provisioning_helper.py, bootstrapping_helper.py, db_bootstrap.py; handles all setup steps and privilege/escalation
│   │   ├── PROVISION_FLAG                      # File flag (created post-provisioning) to skip re-provisioning at startup
│   │   ├── security_bot.py                     # Loads/decrypts .env_bot using Fernet keys from tbot_bot/storage/keys/; used by config UI and runtime scripts
│   │   └── settings_bot.py                     # Editor/validator for .env_bot (strategy/runtime vars); used by Web UI/scripts; never manages key files
│   │
│   ├── control/                                # Control signals for runtime (web/CLI triggers)
│   │   ├── bot_state.txt                        # Written by main.py and tbot_supervisor.py. Holds current bot state for UI/status.
│   │   ├── test_mode.flag                       # Written by test_web.py (UI action); presence triggers TEST_MODE in main.py. Cleared by integration_test_runner.py or main.py.
│   │   ├── control_kill.flag                    # Emergency kill switch flag: detected between phases; forces immediate shutdown.
│   │   ├── control_start.flag                   # Written by start_stop_web.py (UI action); main.py reads/handles start trigger.
│   │   ├── control_stop.flag                    # Written by start_stop_web.py (UI action); main.py reads/handles stop trigger.
│   │   └── web.ready                           #
│   │
│   ├── core/                                       # Persistent state, user authentication, and schema files
│   │   ├── databases/					            # created during the provisioning process
│   │   │   ├── LEDGER_STATUS.db                    # Ledger open/closed/version status, referenced by bot/accounting sync logic
│   │   │   ├── PASSWORD_RESET_TOKENS.db            # Stores password reset tokens (used by Web UI password reset only)
│   │   │   ├── SYSTEM.db                           # Stores global bot settings (never overwritten by accounting)
│   │   │   ├── SYSTEM_LOGS.db                      # Append-only event and error log for all system actions (audited by Web UI and CLI)
│   │   │   ├── SYSTEM_USERS.db                     # Auth DB: source of truth for local login/role/session; never shared
│   │   │   └── USER_ACTIVITY_MONITORING.db         # Logs user logins, RBAC changes, browser/IP, and session events (Web UI audit panel)
│   │   │
│   │   ├── schemas/
│   │   │   ├── ledger_status_schema.sql             # DB schema for LEDGER_STATUS.db (never altered by runtime)
│   │   │   ├── password_reset_schema.sql            # Schema for PASSWORD_RESET_TOKENS.db (Web UI reset logic)
│   │   │   ├── screener_credentials_schema.json     # Schema for Screener Credential system
│   │   │   ├── system_logs_schema.sql               # Schema for SYSTEM_LOGS.db (UI/CLI logs panel)
│   │   │   ├── system_schema.sql                    # Schema for SYSTEM.db (system settings, enforced at startup)
│   │   │   ├── system_users_schema.sql              # Schema for SYSTEM_USERS.db (bcrypt, roles, enforced at user add/change)
│   │   │   └── user_activity_monitoring_schema.sql  # Schema for USER_ACTIVITY_MONITORING.db (audit log structure)
│   │   │
│   │   └── scripts/
│   │       ├── init_ledger_status.py                # (Re)initialize LEDGER_STATUS.db from current COA/schema
│   │       ├── init_password_reset_tokens.py        # Initialize PASSWORD_RESET_TOKENS.db (triggered by bootstrap only)
│   │       ├── init_system_logs.py                  # Initialize SYSTEM_LOGS.db (first boot or wipe)
│   │       ├── init_system_users.py                 # Initialize SYSTEM_USERS.db, insert initial admin from Web UI POST only
│   │       ├── init_system.py                       # Create SYSTEM.db (global settings), never run outside bootstrap
│   │       ├── init_user_activity_monitoring.py     # Create USER_ACTIVITY_MONITORING.db (audit tracking), never run by hand
│   │       └── verify_all_core_databases.py         # Script: checks integrity of all DBs, outputs state/COA, used by admin self-check
│   │
│   ├── data/
│   │   └── cache/
│   │       └── fundamentals_{date}.json           	# Ephemeral daily cache: stores API/screener data and runtime metadata for strategy logic and post-trade analysis
│   │ 
│   ├── enhancements/				                # Core safety/risk modules and real-time trading guards; enforced per .env_bot and strategy logic
│   │   ├── adx_filter.py                	        # Enforces risk: blocks new trades during strong ADX/trending conditions (used by risk control in strategy logic)
│   │   ├── black_scholes_filter.py     	        # Enforces option trade validation: checks pricing against Black-Scholes model; blocks invalid trades
│   │   ├── bollinger_confluence.py               	# Enforces entry: requires Bollinger Band confluence for strategy trade signals
│   │   ├── build_check.py               	    	# System requirement: pre-launch validator for keys, schemas, COA, and directory structure
│   │   ├── finnhub_fundamental_guard.py	        # Enforces entry filter: blocks trade if company fails fundamental thresholds from screener
│   │   ├── imbalance_scanner_ibkr.py    		    # Session gatekeeper: uses IBKR imbalance feed to validate end-of-day trading in close strategy
│   │   ├── ticker_blocklist.py                   	# Risk enforcement: blocks duplicate ticker use within the same trading session
│   │   ├── tuning_tracker.py		                # Tracks session and strategy performance for self-tuning and audit; provides live stats to Web UI
│   │   └── vix_gatekeeper.py                     	# Risk enforcement: blocks or disables trading when VIX exceeds threshold (checked before any entry)
│   │
│   ├── output/
│   │   ├── bootstrap/                                       # Bootstrap artifacts produced only during provisioning/reset
│   │   │   └── logs/                                        # Provisioning/bootstrapping run logs (immutable once complete)
│   │   │       └── security_users.log                       # Bootstrap-only: user/role initialization audit log
│   │   │
│   │   ├── logs/                                            # System/global logs (not per-bot; rendered in logs.html where specified)
│   │   │   ├── auth_web.log                                 # Web login/auth activity (shown in logs.html)
│   │   │   ├── db_bootstrap.log                             # DB schema initialization and migration bootstrap log
│   │   │   ├── key_manager.log                              # Key creation/rotation/verification activity log
│   │   │   ├── main_bot.log (alias: system_logs.log)        # Main system-level log: lifecycle + errors (shown in logs.html)
│   │   │   ├── heartbeat.log                                # API/connection heartbeat events (shown in logs.html)
│   │   │   ├── strategy_router.log                          # strategy_router events (optional; shown in logs.html if present)
│   │   │   ├── screener.log                                 # Screener/universe events (optional; shown in logs.html if present)
│   │   │   ├── kill_switch.log                              # Kill switch/shutdown triggers (optional; shown in logs.html if present)
│   │   │   ├── provisioning.log                             # Provisioning run log (shown in logs.html)
│   │   │   ├── provisioning_status.json                     # Provisioning status (shown in logs.html)
│   │   │   ├── supervisor.log                               # Daily supervisor orchestration log (shown in logs.html)
│   │   │   ├── schedule.json                                # Snapshot of computed daily schedule (shown in logs.html)
│   │   │   ├── system_users.log                             # User create/delete/audit log (shown in logs.html)
│   │   │   ├── user_activity_monitoring.log                 # User login/session/RBAC activity (shown in logs.html)
│   │   │   ├── screener_credentials_audit.log              # Audit trail for screener credentials updates and edits
│   │   │   ├── status.json                                  # Current bot/system status cache for UI consumption
│   │   │   ├── start_log                                    # Bot/session start events (shown in logs.html)
│   │   │   ├── stop_log                                     # Bot/session stop events (shown in logs.html)
│   │   │   ├── test_mode.log                                # Test-mode orchestration and results log
│   │   │   ├── init_system_logs.log                         # Bootstrap-only: initial system log DB setup (not shown in logs.html)
│   │   │   ├── init_system_users.log                        # Bootstrap-only: initial user DB setup (not shown in logs.html)
│   │   │   ├── init_user_activity_monitoring.log            # Bootstrap-only: initial user activity DB setup (not shown in logs.html)
│   │   │   ├── init_password_reset_tokens.log               # Bootstrap-only: initial password reset DB setup (not shown in logs.html)
│   │   │   └── password_reset_tokens.log                    # Runtime password reset events (optional; shown in logs.html if present)
│   │   │ 
│   │   ├── screeners/
│   │   │   ├── screener_blocklist.txt		                 # Blocklisted symbols (SYMBOL|reason|timestamp), updated atomically on enrichment/fetch failure
│   │   │   ├── symbol_universe.json		                 # FINAL atomic universe; filtered/ready; produced by atomic replace of .partial.json on completion
│   │   │   ├── symbol_universe.partial.json		         # In-progress/filtered universe; resumable; never treated as final
│   │   │   ├── symbol_universe.symbols_raw.json             # Raw provider symbol list (metadata only); persistent input for enrichment
│   │   │   ├── symbol_universe.unfiltered.json	             # All enriched symbols (one JSON dict per line), including rejects
│   │   │   └── universe_ops.log	                         # UTC log of enrichment/build progress, errors, and symbol ops; single source for audit
│   │   │
│   │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}/    # ← Scoped per bot ID; mirrored to Accounting system
│   │       ├── logs/                                		               # Unified strategy logs (per phase/failure mode)
│   │       │   ├── open.log			                		       # Trade/decision log during open strategy window
│   │       │   ├── holdings.log                                   # Post-open holdings workflow log (float/tax/payroll checks)
│   │       │   ├── mid.log			                		           # Midday session (position management/adjustments)
│   │       │   ├── close.log			            		       # Closeout phase decisions and executions
│   │       │   ├── universe.log                                   # Post-close universe maintenance/rebuild log
│   │       │   ├── provisioning_status.json                        # Per-bot provisioning status snapshot (for UI)
│   │       │   ├── security_users.log                              # User/role management activity (shown in logs.html)
│   │       │   ├── unresolved_orders.log	        		       # Failed/rejected/stale orders unresolved during session
│   │       │   ├── ledger_sync.log                                 # Structured JSONL from runtime sync worker (Admin-triggered)
│   │       │   ├── daily_summary.json                              # End-of-day/session metrics (PnL, stats); optional logs.html
│   │       │   ├── status.json                                     # Live per-bot status for dashboard (not shown in logs.html)
│   │       │   └── error_tracebacks.log		        		       # Full Python tracebacks for uncaught exceptions (UTC timestamps)
│   │       │
│   │       ├── ledgers/  								               # Created at provisioning; sub-artifacts may be lazy-created on first use
│   │       │   ├── snapshots/                                # Pre-sync DB snapshots (UTC+sync_run_id), created by ledger_snapshot; rollback safety
│   │       │   ├── coa_mapping_versions/                     # Versioned copies of coa_mapping_table.json (append-only, atomic writes)
│   │       │   ├── coa.json                                  # Current COA JSON export (UI/API friendly)
│   │       │   ├── coa_audit_log.json                        # Append-only COA change log with UTC timestamps and user metadata
│   │       │   ├── coa_metadata.json                         # COA metadata (versions, provenance, timestamps)
│   │       │   ├── coa_mapping_table.json                    # COA mapping rules (lazy-created on first access; edited via Web UI; versioned on save)
│   │       │   ├── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_COA.db         # COA DB; provisioned from template; Web UI-editable hierarchy/metadata
│   │       │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db      # OFX-aligned double-entry ledger; append-only inserts; UTC timestamps
│   │       │
│   │       ├── summaries/
│   │       │   └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_daily_summary.json  # Session/day JSON summary (PnL, stats, risk triggers); UTC, immutable once archived
│   │       │
│   │       └── trades/
│   │           ├── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_trade_history.csv   # Human-readable trade log (session scope); export-friendly
│   │           └── {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_trade_history.json  # Structured trade records for ingestion/reconciliation/audit (non-ledger source)

│   │
│   ├── reporting/
│   │   ├── audit_logger.py 			        # WORKER. Support structured logs for holdings management actions		(new or extend existing utils_log.py)
│   │   ├── auto_backup.py                      # WORKER. Compresses and archives output/ after session ends. Only launched by main.py.
│   │   ├── daily_summary.py                    # WORKER. Builds daily trade summary stats and outcomes. Only launched by main.py.
│   │   ├── ledger_report.py			        # WORKER. Generates ledger-based compliance and COA/holdings reports. Only launched by main.py.
│   │   ├── log_rotation.py                     # WORKER. Cleans output folder after N days (log file retention). Only launched by main.py.
│   │   ├── notify_rebalance_requirements.py    # WORKER. Watches for low float; notifies accounting to rebalance. Only launched by main.py.
│   │   ├── report_router.py                    # WORKER. Routes finalized trade output to logs/accounting system. Only launched by main.py.
│   │   ├── session_report.py                   # WORKER. Session wrap-up summary (for UI, compliance). Only launched by main.py.
│   │   ├── status_logger.py                    # WORKER. Syncs live bot state to UI/status.json (optional). Only launched by main.py.
│   │   ├── trade_logger.py                     # WORKER. Records trade data to output/trades. Only launched by main.py.
│   │   └── universe_logger.py			        # WORKER. Dedicated UTC, audit-level logger for all universe/blocklist events, failures, file ops, user actions - Logs symbol universe snapshots/cache state. Only launched by main.py.
│   │
│   ├── runtime/
│   │   ├── __init__.py
│   │   ├── holdings_maintenance.py                 # Schedules and invokes holdings_manager workflow post-open (daily, 10 min after open strategy finishes)
│   │   ├── main.py                                 # SINGLE ENTRYPOINT. Always launched by systemd (tbot_bot.service) or CLI.
│   │   │                                           #  - Performs build checks, starts portal_web_main.py (Flask UI).
│   │   │                                           #  - Self-schedules the daily supervisor run at TBOT_SUPERVISOR_UTC_HHMM (UTC).
│   │   │                                           #  - If started after the trigger, runs supervisor immediately for “today,” then schedules next day.
│   │   │                                           #  - main.py itself does not trade; it only orchestrates UI + supervisor scheduling.
│   │   ├── ledger_snapshot.py                      # Utility to create on-demand ledger DB snapshots (used by sync/audit)
│   │   ├── schedule_dispatcher.py                  # Single source of truth for executing the daily schedule produced by tbot_supervisor.
│   │   ├── start_bot.py                            # CLI helper only. Writes control_start.flag; does NOT launch processes directly.
│   │   ├── status_bot.py                           # WATCHER. Tracks bot health/state, writes status.json, session logs. Only launched by supervisor.
│   │   ├── stop_bot.py                             # CLI helper only. Writes control_stop.flag; does NOT launch processes directly.
│   │   ├── sync_broker_ledger.py                   # WORKER. On-demand or scheduled broker→ledger sync task. Triggered via Web UI or supervisor; never runs persistently.
│   │   ├── tbot_supervisor.py                      # Thin supervisor: computes today's UTC schedule from env_bot (already UTC),
│   │   └── watchdog_bot.py                         # WATCHER. Connection/process monitor. Launched by supervisor when needed.
│   │
│   ├── screeners/			            	# Screener & Symbol Selection: direct provider-API universe build (no txt), atomic per-symbol writes, blocklist-first, quota-efficient, modular providers, resumable
│   │   ├── providers/                              	# Pure data fetch/enrichment adapters, stateless, config-injected only, fetch from provider API universe
│   │   │   ├── finnhub_provider.py                 	# Finnhub provider adapter: fetches full universe and quotes via API keys/config, skips/blocklists symbols on error or missing fields
│   │   │   ├── ibkr_provider.py                    	# IBKR provider adapter: fetches full universe and quotes via API keys/config, skips/blocklists symbols on error or missing fields
│   │   │   ├── nasdaq_provider.py                   # NASDAQ provider adapter: fetches full universe and quotes via API keys/config, skips/blocklists symbols on error or missing fields
│   │   │   ├── nyse_provider.py                     # NYSE provider adapter: fetches full universe and quotes via API keys/config, skips/blocklists symbols on error or missing fields
│   │   │   └── yahoo_provider.py                    # Yahoo (yfinance) provider adapter: fetches full universe and quotes, skips/blocklists symbols on error or missing fields
│   │   │
│   │   ├── screeners/                             	# Runtime filter modules using providers' data (for screening, not universe build)
│   │   │   ├── alpaca_screener.py                  # Alpaca screener: runtime quote filtering; delegates symbol/quote fetch to provider adapters
│   │   │   ├── finnhub_screener.py                 # Finnhub screener: runtime quote filtering; uses provider adapter for fetches
│   │   │   └── ibkr_screener.py                    # IBKR screener: runtime quote filtering; uses provider adapter for fetches
│   │   │
│   │   ├── blocklist_manager.py                    # Blocklist manager: add/remove/update symbols, reasons, timestamps; atomic writes; used in universe filter pipeline and daily ops
│   │   ├── provider_base.py                        # Abstract base class/interface for all provider adapters: requires fetch_symbols and fetch_quotes interface
│   │   ├── provider_registry.py                    # Maps provider strings to adapter classes; single source for dynamic provider loading
│   │   ├── screener_base.py                        # Abstract screener base: core interface, loads universe, wires modules, calls providers, credential loader
│   │   ├── screener_core.py			    # Central runtime screener engine: wires screener_base + provider adapters + filters; executes live filtering pipeline, returns passing symbols
│   │   ├── screener_filter.py                      # Centralized filter/normalization logic: contains ALL filter helpers, normalization, dedupe, NO I/O, NO main, never duplicated
│   │   ├── screener_utils.py                       # Universe/blocklist load/save, atomic writes, helpers, dedupe, validation, drift/audit utilities
│   │   ├── symbol_enrichment.py                    # Universe enrichment/build: for each non-blocklisted symbol from symbols_raw.json, fetch/enrich from provider API; write all results to unfiltered.json, apply filter (from screener_filter.py), write passing to partial.json, failures/invalids to blocklist.txt; NO direct writes to final.json, atomic per-symbol, fully resumable
│   │   ├── symbol_source_loader.py                 # Loads all symbol sources (API-only now), normalizes for universe build
│   │   ├── universe_orchestrator.py                # Main entrypoint: orchestrates nightly build; triggers symbol_enrichment.py, handles status/logging, NO filtering logic, atomic per-symbol process
│   │   ├── symbol_universe_raw_builder.py	    # Builds initial raw universe file (symbols_raw.json) by calling provider adapters; no filtering, no enrichment; atomic write, resumable
│   │   ├── universe_archiver.py                    # Automated archival, retention, restore/rollback utilities for all universes/blocklists (policy-driven)
│   │   ├── universe_diff.py                        # Diff/compare any two universe/blocklist files (drift, audit, rollback, UI/API integration)
│   │   ├── universe_rebuild_cli.py                 # CLI to trigger universe/blocklist rebuild, validation, archival, manual recovery/force rebuild
│   │   ├── universe_refilter.py                    # Re-filter step: reads only unfiltered.json, applies screener_filter.py logic, writes partial.json and final.json, NO blocklist, NO API calls
│   │   └── universe_validation.py                  # Full validation/QA/drift/field/spec checks for universes/blocklists, dedupe, schema, credential/field presence
│   │
│   ├── storage/				                    # Persistent runtime data: encrypted secrets, keys, backups, and exports
│   │   ├── backups/                                # Daily encrypted ledger/config backups (UTC timestamped)
│   │   ├── holdings_secrets/                       # Versioned encrypted backups of holdings_secrets.json.enc
│   │   │   └── {date}/                             # Subfolder for each backup snapshot date
│   │   │
│   │   ├── exports/                                # Daily export artifacts (for audit/recovery)
│   │   │   └── {date}/                             # Subfolder for each export snapshot date
│   │   │
│   │   ├── keys/                                   # All Fernet encryption keys, one per secret/config category (NEVER committed) - created during the provisioning process
│   │   │   ├── .keep                               # Ensures empty keys folder is tracked in git
│   │   │   ├── acct_api_credentials.key	    # Fernet key for encrypting/decrypting acct_api_credentials.json.enc
│   │   │   ├── acct_api.key                        # Fernet key for encrypting/decrypting acct_api_credentials.json.enc
│   │   │   ├── alert_channels.key                  # Fernet key for encrypting/decrypting alert_channels.json.enc
│   │   │   ├── alert.key                           # (alias/legacy) Fernet key for alert_channels.json.enc
│   │   │   ├── bot_identity.key                    # Fernet key for encrypting/decrypting bot_identity.json.enc
│   │   │   ├── broker_credentials.key              # Fernet key for encrypting/decrypting broker_credentials.json.enc
│   │   │   ├── broker.key                          # Fernet key for encrypting/decrypting broker_credentials.json.enc
│   │   │   ├── env_bot.key                         # Fernet key for decrypting .env_bot.enc (runtime bot settings)
│   │   │   ├── env.key                             # Fernet key for decrypting env.json.enc (general bot config)
│   │   │   ├── holdings_secrets.key                # Fernet key for holdings_secrets.json.enc
│   │   │   ├── login.key                           # Fernet key for encrypting SYSTEM_USERS.db (login/auth)
│   │   │   ├── network_config.key                  # Fernet key for encrypting/decrypting network_config.json.enc
│   │   │   ├── runtime_config.key		            # Fernet key for encrypting/decrypting runtime_config.json.enc (persistent bot runtime config)
│   │   │   ├── screener_api.key                    # Fernet key for decrypting screener_api.json.enc
│   │   │   ├── smtp_credentials.key                # Fernet key for encrypting/decrypting smtp_credentials.json.enc
│   │   │   └── smtp.key                            # Fernet key for decrypting smtp_credentials.json.enc
│   │   │
│   │   ├── secrets/				                # All encrypted JSON config files—each unlocked with corresponding Fernet key - created during the provisioning process
│   │   │   ├── acct_api_credentials.json.enc       # Encrypted API token/creds for accounting endpoint (if used)
│   │   │   ├── alert_channels.json.enc             # Encrypted alert channel configuration (email, Slack, etc.)
│   │   │   ├── bot_identity.json.enc		        # Encrypted bot identity and entity/jurisdiction metadata
│   │   │   ├── broker_credentials.json.enc         # Encrypted broker API credentials (ALPACA/IBKR, etc.)
│   │   │   ├── holdings_secrets.json.enc           # Encrypted holdings config and allocation data (managed by holdings_secrets.py)
│   │   │   ├── network_config.json.enc   		    # Encrypted network config (hostname, IP, port)
│   │   │   ├── runtime_config.json.enc		        # Encrypted persistent runtime bot configuration settings
│   │   │   ├── screener_api.json.enc               # Encrypted screener API credentials
│   │   │   └── smtp_credentials.json.enc           # Encrypted SMTP credentials for notifications
│   │   │
│   │   └── migration_archives/                     # Historical config/ledger/backup artifacts (for manual recovery/migration)
│   │
│   ├── strategy/                                       # Trading strategy orchestration and logic
│   │   ├── strategy_close.py                               # End-of-day strategy: momentum and fade signals, session exit logic, fallback enforcement
│   │   ├── strategy_meta.py                                # Shared strategy parameters, global constants, and session config helpers
│   │   ├── strategy_mid.py                                 # Mid-session strategy: VWAP/mean-reversion, candidate ranking and fallback
│   │   ├── strategy_open.py                                # Market open strategy: opening range breakout, candidate ranking and fallback
│   │   └── strategy_router.py                              # Loads/executes strategies per STRATEGY_SEQUENCE; manages session routing, fallback, and reporting
│   │
│   │ 
│   ├── support/                                # Core support modules: runtime, encryption, path, config validation, COA utilities
│   │   ├── .env_bot.enc                        # Encrypted runtime bot config (Fernet-encrypted; generated by Web UI/settings_web.py)
│   │   ├── bootstrap_utils.py                  # UI-only first-run logic: detects bootstrap status, determines page to show (config or login); calls db_bootstrap.py
│   │   ├── bot_state_manager.py                # Centralized, robust read/write manager for bot_state.txt - Single source of truth for the bot's lifecycle state across the entire system.
│   │   ├── build_check.py                      # Validates COA/schema/key alignment and file integrity at build/startup; blocks on error (calls path_resolver.py)
│   │   ├── config_fetch.py                     # Loads, validates, and returns the latest live config for key/secret rotation; provides config dicts to provisioning and key_manager logic
│   │   ├── decrypt_secrets.py                  # Loads/decrypts *.json.enc secrets using Fernet keys from tbot_bot/storage/keys/; called by config/runtime modules
│   │   ├── encrypt_secrets.py                  # Encrypts/rotates all secret/config JSONs in tbot_bot/storage/secrets/ using Fernet keys from tbot_bot/storage/keys/
│   │   ├── holdings_secrets.py                 # Module for encrypted holdings config/secrets CRUD, atomic writes, rollback support, and audit integration - triggers key, secrets rotation/backup
│   │   ├── launch_registry.py
│   │   ├── path_resolver.py                    # Resolves tbot_bot/storage/output/config paths for all modules, based on BOT_IDENTITY and file category; called by all runtime modules for dynamic file routing
│   │   ├── rotate_keys.py                      # Rotates all Fernet keys in tbot_bot/storage/keys/, re-encrypts matching secrets in tbot_bot/storage/secrets/, and triggers versioned backup
│   │   ├── secrets_manager.py                  # Central secrets CRUD/rotation manager; abstracts encrypt/decrypt, validates key–secret pairing, provides high-level API to web/provisioning
│   │   ├── service_bot.py                      # (Optional) Systemd-compatible daemon: manages TradeBot process as a background service (not required for bootstrap)
│   │   ├── utils_config.py                     # Loads/validates all bot and environment configuration files (.env, .env_bot, runtime envs) 
│   │   ├── utils_identity.py                   # Computes/parses BOT_IDENTITY_STRING; manages all identity metadata for file/output routing
│   │   ├── utils_log.py                        # Provides structured logging for system/trade/web/app events
│   │   └── utils_time.py                       # Time and scheduling utilities (UTC conversion, timestamps, session windows)
│   │ 
│   ├── test/				           # Complete automated and manual test suite for all bot modules. All test scripts only read from secrets/keys created by Web UI; never modify config or secrets.
│   │   ├── integration_test_runner.py              # TEST RUNNER. Launched by main.py in TEST_MODE, or manually/CI. Simulates full bot bootstrap, strategy, and shutdown. Writes only to test logs/artifacts. Never launches or supervises any watcher/worker.
│   │   ├── test_backtest_engine.py                 # DEV/CI TEST. Validates backtest engine vs. reference metrics and equity curves. Never launched in production.
│   │   ├── test_broker_sync.py                     # DEV/CI TEST. End-to-end Alpaca sync → normalize → mapping → compliance → dedupe → double-entry; asserts idempotency, grouping, and posted counts.
│   │   ├── test_broker_trade_stub.py               # DEV/CI TEST. Sends randomized test trades to broker adapters; checks order flow and logging. Never launched in production.
│   │   ├── test_coa_consistency.py                 # DEV/CI TEST. Confirms COA JSON/DB consistency; validates COA integration with coa_utils.py. Never launched in production.
│   │   ├── test_coa_mapping.py                     # DEV/CI TEST. Mapping assignment, fallback/default rules, rollback/versioning snapshots, ambiguous/edge-case handling.
│   │   ├── test_coa_web_endpoints.py               # DEV/CI TEST. End-to-end API/UI tests for COA web endpoints (/coa, /coa/api, /coa/export). Never launched in production.
│   │   ├── test_env_bot.py                         # DEV/CI TEST. Verifies .env_bot config, required variables, and structure. Never launched in production.
│   │   ├── test_fallback_logic.py                  # DEV/CI TEST. Tests fallback logic for strategy and trading modules.
│   │   ├── test_holdings_manager.py       		# DEV/CI TEST. Holdings logic, rebalance, float/reserve, and order placement; ledger posting invariants preserved.
│   │   ├── test_holdings_web_endpoints.py 		# DEV/CI TEST. End-to-end API/UI tests for holdings management web endpoints.
│   │   ├── test_ledger_concurrency.py              # DEV/CI TEST. Concurrent ledger writes, thread/process safety, UNIQUE/FITID guards.
│   │   ├── test_ledger_corruption.py               # DEV/CI TEST. Ledger DB handling under corrupted/unreadable state (read-only safe failure).
│   │   ├── test_ledger_double_entry.py             # DEV/CI TEST. Balanced debit/credit posting (sum==0), sign rules, group_id propagation.
│   │   ├── test_ledger_migration.py                # DEV/CI TEST. Schema version checks and forward-compat readiness; no in-place migrations executed in production.
│   │   ├── test_ledger_reconciliation.py           # DEV/CI TEST. Reconciliation log entries for matched/skipped; sync_run_id/api_hash consistency.
│   │   ├── test_ledger_schema.py                   # DEV/CI TEST. Ensures tables/indices/UNIQUE(FITID) match canonical schema; OFX/UTC fields present. Never launched in production.
│   │   ├── test_ledger_web.py                      # DEV/CI TEST. Web ledger endpoints (/ledger, /ledger/sync, /ledger/groups, /ledger/balances); RBAC and JSON shapes.
│   │   ├── test_ledger_write_failure.py            # DEV/CI TEST. Write-error propagation; transactional rollback; audit-trail integrity.
│   │   ├── test_logging_format.py                  # DEV/CI TEST. Validates structure, content, and completeness of all bot log files. Never launched in production.
│   │   ├── test_ledger_coa_edit.py                 # DEV/CI TEST. COA edit flows and persistence checks.
│   │   ├── test_lots_engine.py                     # DEV/CI TEST. Validates lots_engine behavior across tax-lot methods.
│   │   ├── test_mapping_upsert.py                  # DEV/CI TEST. Safe mapping table upserts and audit behavior.
│   │   ├── test_opening_balance.py                 # DEV/CI TEST. Opening balance posting and snapshot creation.
│   │   ├── test_posting_sell_cover.py              # DEV/CI TEST. Posting logic for sell-to-cover and similar actions.
│   │   ├── test_main_bot.py                        # DEV/CI TEST. Session lifecycle: start/stop, CLI/web triggers, and state changes. Never launched in production.
│   │   ├── test_normalizer_alpaca.py               # DEV/CI TEST. Canonical outputs for normalize_trade/cash/position (TRNTYPE, DTPOSTED UTC, FITID, quantities/prices).
│   │   ├── test_screener_credentials.py            # DEV/CI TEST. Screener credential management encryption/persistence and UI integration.
│   │   ├── test_screener_integration.py            # DEV/CI TEST. Full integration for screener modules, API secrets, and symbol eligibility. Never launched in production.
│   │   ├── test_screener_random.py                 # DEV/CI TEST. Screener randomized symbols for eligibility/filtering logic. Never launched in production.
│   │   ├── test_strategy_selfcheck.py              # DEV/CI TEST. Runs .self_check() on all strategy modules; validates config/signal paths. Never launched in production.
│   │   ├── test_strategy_tuner.py                  # DEV/CI TEST. Strategy tuning behavior, parameter adjustments, and performance impact. Never launched in production.
│   │   ├── test_symbol_universe_refresh.py         # DEV/CI TEST. Universe orchestrator build, credential gating, and output JSONs.
│   │   └── test_universe_cache.py                  # DEV/CI TEST. Verifies universe cache schema, age, and content. Never launched in production.
│   │
│   └── trading/			                    # Trade Execution
│       ├── holdings_manager.py          	        # Core logic for ETF purchases, sales, rebalancing, cash top-up, tax and payroll allocations.
│       ├── holdings_utils.py            	        # Helper functions for allocation calculations, broker integration, audit logging.
│       ├── instruments.py                        # Canonical instrument definitions (ETF, equity, put, etc.); includes formatting and validation.
│       ├── kill_switch.py                         # Triggers shutdown on DAILY_LOSS_LIMIT or catastrophic loss violation.
│       ├── logs_bot.py                            # Runtime logging of trade operations to output/logs.
│       ├── notifier_bot.py                        # Sends alerts to configured channels (email/Slack/SMS/PagerDuty).
│       ├── orders_bot.py                          # Handles order submission, modifies/fills, and broker feedback.
│       ├── reporting_bot.py                       # Pushes trades to accounting system; manages ledger output and COA compliance.
│       ├── risk_module.py                        # Enforces all risk constraints (caps, allocations, Defense Mode, open trades).
│       ├── trailing_stop.py                    # Single source of truth for bot-enforced trailing stop math & state.
│       ├── utils_etf.py                           # Resolves ETF and inverse ETF tickers for supported symbols (top 20+ ETFs, as per project specifications).
│       ├── utils_puts.py                          # Returns put option contract specs for any supported broker.
│       └──utils_shorts.py                         # Provides broker-agnostic helpers for executing short trades, including real shorts, synthetic shorts, and alternatives.
│   
└── tbot_web/                                   # Web dashboard: bot monitoring, logs, user auth, control, and COA management
    ├── static/                                 # Static frontend resources
    │   ├── fnt/                                # Embedded fonts used in the interface
    │   │   ├── Vonique/                        # Vonique Font Collection
    │   │   └── fnt/
    │   │
    │   ├── js/
    │   │   ├── configuration.js                # Handles configuration form logic, validation, and AJAX submits on configuration.html
    │   │   ├── coa_mapping.js                  # Frontend logic for COA mapping UI (table ops, upserts, audit view)
    │   │   ├── holdings.js                     # JS for holdings.html: handles management UI, grid logic, AJAX to holdings_web.py, live compliance validation, preview/simulation, and status updates.
    │   │   ├── ledger.js                       # Frontend JS for ledger page: table rendering, sorting, expand/collapse, UI actions
    │   │   ├── main_ui.js         		     # Handles live dashboard behavior, state polling, and controls config overlay in main.html
    │   │   ├── wait.js            		     # Waits for bot to finish initialization/provisioning; auto-redirects to main.html when ready
    │   │   ├── universe.js                     # JS for universe.html: updates status fields, fetches/refreshes universe tables, triggers log/status updates; NO filtering logic or direct file writes
    │   │   ├── screener_credentials.js         # JS: Screener credential management UI logic, API calls, masking, field validation
    │   │   ├── test_ui.js                      # JS for test.html: - triggers tests, and displays test results to window on test.html page
    │   │   ├── status_live.js                  # Polls /status API, updates live status panel (PnL, win rate, defense/kill switch state, holdings compliance) in status.html
    │   │   └── shared_utils.js    		     # Provides shared API helpers and utility functions for frontend JavaScript modules           
    │   │
    │   └── css/
    │       ├── base
    │       │   ├── layout.css                      # Global layout, structure, and centering for all pages
    │       │   ├── normalize.css                   # CSS reset for cross-browser consistency
    │       │   └── variables.css                   # Custom CSS variables for colors, fonts, spacing
    │       │
    │       ├── components
    │       │   ├── buttons.css                     # Button styling and layout rules
    │       │   ├── hamburger.css                   # Hamburger menu animation and mobile nav styles
    │       │   ├── spinner.css                     # Spinner and progress indicator animation
    │       │   └── tabs.css                        # Tab navigation styles
    │       │
    │       ├── pages
    │       │   ├── account.css                 # Account page styles: profile and settings forms
    │       │   ├── coa_mapping.css             # Stylesheet for COA mapping page.
    │       │   ├── configuration.css           # Configuration page (forms, blocks, horizontal wrapping)
    │       │   ├── edit_user.css               # Edit user page: user edit form layout and alignment
    │       │   ├── holdings.css                # Stylesheet for holdings management page.
    │       │   ├── ledger.css                  # Ledger page: table formatting and alignment
    │       │   ├── login.css                    # placeholder for login.html styling
    │       │   ├── logs.css                    # Logs page: log view container, filter bar, color
    │       │   ├── main.css                    # Main container, alignment, and page structure styles
    │       │   ├── password_reset.css          # Password reset forms: input and feedback styling
    │       │   ├── register.css                # Register page: admin account creation form
    │       │   ├── screener_credentials.css    # CSS: Stylesheet for screener credential config page (layout, masking, validation)
    │       │   ├── settings.css                # Settings page: settings form blocks and layout
    │       │   ├── status.css                  # Status page: status grid, error color, responsive tweaks
    │       │   ├── test.css                    # Test mode/system test sequence page
    │       │   ├── users.css                   # Users page: user list, RBAC, user management forms
    │       │   ├── wait.css                    # placeholder for wait.html styling
    │       │   └── universe.css                # Symbol universe UI page - monitor rebuild and re-filter Symbol Universe
    │       │
    │       └── shared
    │           ├── forms.css                       # Form input and UI style rules
    │           └── responsive.css                  # Responsive/adaptive layout rules
    │
    ├── favicon.ico / favicon.gif               # Site icon for browser tab
    │
    ├── py/                                      # Flask backend endpoints, blueprints, business logic
    │   ├── __init__.py                         # Registers all Flask blueprints (main entry)
    │   ├── account_web.py                      # User account/profile endpoints (view/update account details)
    │   ├── coa_web.py                          # COA endpoints: view, edit, export; calls utils_coa_web.py, config_encryption.py. Never launches any worker/watcher.
    │   ├── coa_mapping_web.py                  # Flask web endpoints for mapping table UI: manage, assign, export/import, audit, rollback.
    │   ├── configuration_web.py                # Handles configuration route: displays, saves, and provisions config; calls config_encryption, key_manager, security_users. Never launches any worker/watcher.
    │   ├── holdings_web.py                     # Flask blueprint: UI endpoints for holdings management, config, and status. -  All core audit, allocation, compliance logic, and ledger cross-linking is enforced here.
    │   ├── ledger_web.py		                # Ledger management API providing endpoints for viewing, uploading broker CSVs, reconciling, editing, and resolving ledger entries; all changes are tracked with versioning and audit logs. Only admin users can perform edits or reconciliations. Never launches any worker/watcher.
    │   ├── login_web.py                        # User login/logout/session; calls auth_web.py, security_users.py, session_manager.py. Never launches any worker/watcher.
    │   ├── logout_web.py                       # Handles session termination and logout logic; updates session and user state. Never launches any worker/watcher.
    │   ├── logs_web.py                         # Displays log output (read-only); calls utils_log.py. Never writes logs; never launches any worker/watcher.
    │   ├── main_web.py                         # Orchestrates main UI shell; registers routes, manages state; triggers bot start if required; links wait.html and ledger.html. Never launches any worker/watcher.
    │   ├── password_reset_web.py               # Handles password reset requests and token validation for users.
    │   ├── portal_web_main.py                  # Flask app for provisioning bootstrapping, and all static files and all operational blueprints (phases in this order: configuration → provisioning → bootstrapping → registration → login → main_web.py that shows: status, Settings, logs, ledger, COA, test, configuration, account). Never launches any worker/watcher.
    │   ├── register_web.py			            # Handles user registration logic and SYSTEM_USERS.db creation/updating. Never launches any worker/watcher.
    │   ├── run_web.py                          # Main entry point into web UI (CLI). Never launches any worker/watcher.
    │   ├── screener_credentials_web.py         # Flask blueprint: routes and API endpoints for screener credential config and audit
    │   ├── settings_web.py                     # Bot strategy/runtime settings routes; calls utils_config.py (never handles credentials). Never launches any worker/watcher.
    │   ├── start_stop_web.py                   # API/UI for bot control lifecycle (start/stop); writes control files (flags) for main.py. Never launches any worker/watcher.
    │   ├── status_web.py                       # Serves live bot/system status; reports active session/metrics from status sources. Never launches any worker/watcher.
    │   ├── test_web.py				            # Dedicated backend blueprint handling TEST_MODE control flag creation, test start sequencing, real-time log streaming, and test completion flag reset. Never launches any worker/watcher; writes test_mode.flag only. Reads test_mode.log for UI.
    │   ├── universe_web.py                     # Web endpoints for viewing, rebuilding, exporting symbol universes/blocklist; triggers enrichment/refilter scripts via subprocess; NO filtering or blocklist logic in web code, only reflects file state.
    │   └── users_web.py                        # User list, create, edit, delete, and RBAC assignment endpoints (admin only).
    │
    ├── robots.txt                              # Blocks bots and search engine indexing (security)
    │
    ├── support/                                # Web UI supporting modules: auth, crypto, session, CSRF, helpers. Never launches any worker/watcher; only imported.
    │   ├── auth_web.py                         # Auth helpers; bcrypt password validation/hashing. Only imported.
    │   ├── configuration_loader.py		        # Loads and decrypts config for UI (never handles keys). Only imported.
    │   ├── configuration_saver.py		        # Saves/encrypts config from UI (never creates keys). Only imported.
    │   ├── csrf_protection.py                  # CSRF protection for web forms and blueprints. Only imported.
    │   ├── default_config_loader.py            # Loads config defaults/templates for UI (never touches secrets/keys). Only imported.
    │   ├── secrets_manager.py                  # Backend utilities: encryption/decryption, atomic writes, credential loader
    │   ├── security_users.py                   # RBAC/user CRUD; Fernet key helpers for user/auth secrets. Only imported.
    │   ├── session_manager.py                  # Web session management, token handling, timeouts. Only imported.
    │   ├── utils_coa_web.py			        # Loads, validates, and manages the bot’s Chart of Accounts (COA); interfaces with tbot_ledger_coa_template.json and provides COA to other modules. Only imported.
    │   └── utils_web.py                        # Minor UI/web helpers, non-secret logic. Only imported.
    │
    └── templates/                              # Jinja2 HTML UI templates (rendered for user)
        ├── account.html                        # User account/profile page
        ├── coa.html                            # Human-readable web form/table for COA viewing and editing (editable if RBAC allows)
        ├── coa_mapping.html                    # Web UI for mapping table management and transaction assignment (flagged, history, audit log).
        ├── configuration.html                  # Web form for updating email, API, and broker credential configuration via web UI 
        ├── edit_user.html                      # Edit individual user details (admin only)
        ├── holdings.html                       # Jinja2 page for managing ETFs, float %, tax %, payroll %, rebalance interval, current status, manual controls. - This is a required core page for compliance; never optional if holdings module is present.
        ├── index.html                          # Login page
        ├── ledger.html			                # Human-readable web form and table for viewing, adding, editing, and reconciling ledger entries, with admin-only access to edit or resolve discrepancies
        ├── logs.html                           # Log viewer (view bot/system logs)
        ├── main.html                           # Dashboard shell (all UI widgets)
        ├── password_reset_form.html            # Password reset entry form (token/entry point)
        ├── password_reset_request.html         # Password reset request form (initiate reset via email)
        ├── register.html			            # Flask template for user registration form
        ├── screener_credentials.html           # Jinja2: Screener credentials config page UI (add/edit/rotate/remove, masked fields)
        ├── settings.html                       # Web form for updating bot trading strategy and runtime config variables
        ├── status.html                         # Displays live bot health, strategies, PnL, session state, and key metrics (live data from status.json)
        ├── test.html				            # Web UI page providing controls to trigger TEST_MODE and view live test logs and results.
        ├── universe.html			            # Web UI page providing controls to inspect and modify the symbol universe
        ├── users.html                          # List and manage all users (admin only)
        └── wait.html                   	    # Spinner/progress bar shown while bot is initializing; triggers transition to main.html when ready
