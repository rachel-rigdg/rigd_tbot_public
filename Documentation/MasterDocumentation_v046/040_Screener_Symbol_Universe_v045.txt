================================================================================
Document: 040
Screener_Symbol_Universe
Version: v046
Date: UTC:2025-06-30 00:00:00
================================================================================

Title: Screener Symbol Universe — Universe Caching, Filtering, and Runtime Use

Overview:
--------------------------------------------------------------------------------
This specification defines the unified approach for building, caching, filtering, and consuming the symbol universe for all trading screeners in the RIGD TradeBot system. It now incorporates *crash resilience*, real-time auditability, and a robust disk-first design using unfiltered and filtered JSON universes. Manual and automated re-filtering are fully supported.

All screener modules must source their eligible symbol list exclusively from the pre-filtered, pre-built universe file (`symbol_universe.json`). No screener may fetch global lists or build real-time universes.

--------------------------------------------------------------------------------
Section 1: Core Principles
--------------------------------------------------------------------------------

1. **Single canonical symbol universe file** (`symbol_universe.json`) is generated per trading day and must be the *only* source for all screeners.
2. **Universe is built overnight** (after market close, before market open) using NYSE/NASDAQ, with filters applied.
3. **API quota minimization:** Only minimal API calls for live pricing of already-approved symbols are permitted during runtime.
4. **All strategies and brokers share the same universe** per trading day.
5. **Standardized file paths:**
   - `tbot_bot/output/screeners/symbol_universe.unfiltered.json` — Raw, unfiltered, deduplicated symbols.
   - `tbot_bot/output/screeners/symbol_universe.partial.json` — Inline-filtered, partial progress file.
   - `tbot_bot/output/screeners/symbol_universe.json` — Final, validated, production universe.
6. **Universe build is disk-first, crash-resilient:** All symbols are written as fetched; build can resume after crash from the unfiltered file.
7. **Manual 'Force Rebuild' and 'Re-filter' always available in the Web UI.**
8. **UI displays build status, table counts, and supports live searching/comparison of all universes.**
9. **No runtime fetching of global symbol lists; universe is fixed for each session and only updated by automated/manual triggers.**
10. **First boot accepts a placeholder, but full rebuild is required before trading.**

--------------------------------------------------------------------------------
Section 2: Universe Construction Workflow
--------------------------------------------------------------------------------

1. **Fetch all NYSE/NASDAQ symbols** (excluding OTC, pink sheets, non-equities).
   - Gather: symbol, exchange, company name, last close, market cap, sector/industry.

2. **Write every symbol (as fetched) to `symbol_universe.unfiltered.json`**.
   - Deduplicate as you go (based on symbol key).
   - This file is always up-to-date and acts as the crash-recovery checkpoint.

3. **Filter every symbol as it is fetched:**
   - Exchange must be "NYSE" or "NASDAQ"
   - Price: `MIN_PRICE` ≤ lastClose ≤ `MAX_PRICE`
   - Market Cap: `MIN_MARKET_CAP` ≤ marketCap ≤ `MAX_MARKET_CAP`
   - Must have valid, nonzero, non-null fields.
   - *Do not filter by volume or after-hours-only variables during the build.*

4. **If a symbol passes filter, write immediately to both `symbol_universe.partial.json` and `symbol_universe.json`.**

5. **At end-of-build:**
   - Compare/merge `partial.json` and `json` to remove duplicates/missing entries, ensuring integrity.
   - Write build audit/log entry.

6. **Manual re-filter (Web UI):**
   - Re-filter all symbols in `symbol_universe.unfiltered.json` with current filters.
   - Update both `partial.json` and `json` and merge at end.
   - No new fetches—instant feedback for filter tuning.

7. **Progress, heartbeat, and event logs** are written to `universe_ops.log`.

--------------------------------------------------------------------------------
Section 3: File/Script Layout & Responsibilities
--------------------------------------------------------------------------------

- `symbol_universe.unfiltered.json`: All raw, deduped, fetched symbols.
- `symbol_universe.partial.json`: Inline-filtered, progress-tracking, filtered symbols.
- `symbol_universe.json`: Final, validated, production-ready universe.
- `universe_ops.log`: Progress log for universe build/rebuild.

- `tbot_bot/screeners/symbol_universe_refresh.py`: Orchestrates fetch, filter, and all file writes. Supports crash recovery and manual/automated triggers.
- `tbot_bot/screeners/screener_utils.py`: Loads/validates all three universes, provides filtering/merge, and utility functions.
- `tbot_web/py/universe_web.py`: Web UI and API endpoints for display, rebuild, refilter, export, and status.

--------------------------------------------------------------------------------
Section 4: Web UI and User Actions
--------------------------------------------------------------------------------

1. **Web UI `/universe` displays:**
   - Counts and status for all three universes.
   - Three side-by-side, infinitely scrollable tables (unfiltered, partial, final).
   - Search/filter box applies across all tables.
   - At-a-glance counts for each file for checksum.
   - “Force Rebuild” and “Re-filter” buttons.
   - Progress/heartbeat log in real time.

2. **Manual 'Re-filter' triggers re-filtering from unfiltered, writing partial/final and merging.**

3. **Export (CSV/JSON) is available for current universe.**

--------------------------------------------------------------------------------
Section 5: Validation & Maintenance
--------------------------------------------------------------------------------

1. **Validation for every file:**
   - Every entry must have symbol, exchange, lastClose, marketCap.
   - Deduplication required.
   - All files must be valid UTF-8 JSON.
   - Log all errors with UTC timestamps.

2. **Test/QA utility script** validates all files and filter logic.

3. **No universe file is deleted or overwritten on failure—atomic save only on successful build.**

4. **Universe is only updated after market close or on-demand; runtime never changes universe.**


--------------------------------------------------------------------------------
Section 6: API, Quota, and Performance Considerations
--------------------------------------------------------------------------------

1. **API keys sourced securely (never hardcoded).**
2. **Only fetch minimal, required fields.**
3. **Universe build must only use the following Finnhub endpoints: `/stock/symbol`, `/stock/profile2`, `/quote`. No other endpoints are permitted.**
4. **Throttle/batch as needed for API quotas. Enforce provider rate limits (e.g., Finnhub 300 requests/minute) via UNIVERSE_SLEEP_TIME between requests.**
5. **Resume/continue supported via `unfiltered.json`.**


--------------------------------------------------------------------------------
Section 7: Error Handling, Logging, and Recovery
--------------------------------------------------------------------------------

1. **All failures, API errors, and build anomalies logged to `universe_ops.log` (UTC).**
2. **Failed/unexpected build never overwrites previous universe.**
3. **On failure, alerting/notification may be triggered (future enhancement).**

--------------------------------------------------------------------------------
Section 8: Extensibility and Future-Proofing
--------------------------------------------------------------------------------

1. **Architecture supports multiple brokers, multiple universes, and future expansion to new metadata fields.**
2. **All code and spec are versioned.**

================================================================================
