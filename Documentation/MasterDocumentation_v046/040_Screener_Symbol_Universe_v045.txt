================================================================================
Document: 040
Screener_Symbol_Universe
Version: v047
Date: UTC:2025-06-30 00:00:00
================================================================================

Title: Screener Symbol Universe — Universe Caching, Filtering, Staged Blocklist, and Runtime Use

Overview:
--------------------------------------------------------------------------------
This specification defines the unified, staged approach for building, caching, filtering, and consuming the symbol universe for all trading screeners in the RIGD TradeBot system. The process now incorporates *crash resilience*, real-time auditability, a robust disk-first design using unfiltered and filtered JSON universes, a staged API workflow for blocklist/pricing, and a recovery-driven blocklist maintenance system. The design minimizes API spend while maximizing universe quality and reliability.

All screener modules must source their eligible symbol list exclusively from the pre-filtered, pre-built universe file (`symbol_universe.json`). No screener may fetch global lists or build real-time universes.

--------------------------------------------------------------------------------
Section 1: Core Principles
--------------------------------------------------------------------------------

1. **Single canonical symbol universe file** (`symbol_universe.json`) is generated per trading day and must be the *only* source for all screeners.
2. **Universe is built overnight** (after market close, before market open) using NYSE/NASDAQ (excluding OTC/pink sheets), with filters applied.
3. **API quota minimization and staged calls:** Only minimal API calls are made, using free/cheap sources for initial symbol/pricing checks and expensive APIs only for eligible symbols.
4. **Staged blocklist and eligibility workflow**:
   - Blocklist is actively built and maintained, using price-only queries to exclude/track ineligible tickers.
   - Symbols are re-polled periodically (weekends) for price recovery/un-blocklisting.
5. **All strategies and brokers share the same universe per trading day.**
6. **Standardized file paths:**
   - `tbot_bot/output/screeners/symbol_universe.unfiltered.json` — Raw, unfiltered, deduplicated symbols.
   - `tbot_bot/output/screeners/symbol_universe.partial.json` — Inline-filtered, partial progress file.
   - `tbot_bot/output/screeners/symbol_universe.json` — Final, validated, production universe.
   - `tbot_bot/output/screeners/screener_blocklist.txt` — Master blocklist (auto-managed).
7. **Universe build is disk-first, crash-resilient:** All symbols are written as fetched; build can resume after crash from the unfiltered file.
8. **Manual 'Force Rebuild', 'Re-filter', and 'Update Blocklist' always available in the Web UI.**
9. **UI displays build status, blocklist status, table counts, and supports live searching/comparison of all universes.**
10. **No runtime fetching of global symbol lists; universe is fixed for each session and only updated by automated/manual triggers.**
11. **First boot accepts a placeholder, but full rebuild is required before trading.**

--------------------------------------------------------------------------------
Section 2: Universe Construction & Blocklist Workflow
--------------------------------------------------------------------------------

**Nightly Build — Staged, Efficient:**

1. **Pull all possible symbols from public/free sources** (e.g., nasdaqlisted.txt, otherexchanges.txt, Tradier, Polygon, etc.). 
2. **For each symbol:**
   - **If on blocklist:** Skip.
   - **If not blocklisted:** Query *only* price using free/low-cost API (e.g., Polygon, Yahoo, Tradier, etc.).
   - **If price < $1:** Add symbol to blocklist (with UTC timestamp).
   - **If price >= $1:** Keep eligible for further querying.
3. **Blocklist is saved/updated after each batch.**

4. **For eligible, non-blocklisted, price >= $1 symbols:**
   - Query all required metadata using *paid* API (Finnhub/IBKR): lastClose, marketCap, sector, exchange, fractional eligibility, etc.
   - Immediately write to `symbol_universe.unfiltered.json`.
   - Deduplicate by symbol as you go.

5. **Apply core filters to each symbol as fetched:**
   - Exchange must be "NYSE" or "NASDAQ".
   - Price: `MIN_PRICE` ≤ lastClose ≤ `MAX_PRICE`, with broker fractional eligibility enforced for high-priced symbols.
   - Market Cap: `MIN_MARKET_CAP` ≤ marketCap ≤ `MAX_MARKET_CAP`.
   - Must have valid, nonzero, non-null fields.

6. **If a symbol passes filter, write immediately to both `symbol_universe.partial.json` and `symbol_universe.json`.**

7. **At end-of-build:**
   - Compare/merge `partial.json` and `json` to remove duplicates/missing entries, ensuring integrity.
   - Write build audit/log entry.

**Blocklist Maintenance:**
- Blocklist is automatically rebuilt/refreshed nightly as part of the universe build.
- Over the weekend (or as scheduled), re-poll blocklisted tickers to see if any have recovered above the min price threshold; un-blocklist if so.

--------------------------------------------------------------------------------
Section 3: File/Script Layout & Responsibilities
--------------------------------------------------------------------------------

- `symbol_universe.unfiltered.json`: All raw, deduped, fetched symbols with full metadata.
- `symbol_universe.partial.json`: Inline-filtered, progress-tracking, filtered symbols.
- `symbol_universe.json`: Final, validated, production-ready universe.
- `screener_blocklist.txt`: Blocklisted tickers with timestamp and reason (auto-managed).
- `universe_ops.log`: Progress log for universe build/rebuild.
- `tbot_bot/screeners/symbol_universe_refresh.py`: Orchestrates staged fetch, blocklist management, filtering, and all file writes. Supports crash recovery and manual/automated triggers.
- `tbot_bot/screeners/screener_utils.py`: Loads/validates all universes and blocklist, provides filtering/merge, and utility functions.
- `tbot_web/py/universe_web.py`: Web UI and API endpoints for display, rebuild, blocklist management, export, and status.

--------------------------------------------------------------------------------
Section 4: Web UI and User Actions
--------------------------------------------------------------------------------

1. **Web UI `/universe` displays:**
   - Counts and status for all universes and blocklist.
   - Four side-by-side, infinitely scrollable tables (unfiltered, partial, final, blocklist).
   - Search/filter box applies across all tables.
   - At-a-glance counts for each file for checksum.
   - “Force Rebuild”, “Re-filter”, and “Update Blocklist” buttons.
   - Progress/heartbeat log in real time.

2. **Manual 'Re-filter' triggers re-filtering from unfiltered, writing partial/final and merging.**

3. **Manual 'Update Blocklist' triggers re-polling and updating of the blocklist and refilters the universe as needed.**

4. **Export (CSV/JSON) is available for current universe or blocklist.**

--------------------------------------------------------------------------------
Section 5: Validation & Maintenance
--------------------------------------------------------------------------------

1. **Validation for every file:**
   - Every entry must have symbol, exchange, lastClose, marketCap.
   - Deduplication required.
   - All files must be valid UTF-8 JSON.
   - Blocklist must be consistent and auto-updated.
   - Log all errors with UTC timestamps.

2. **Test/QA utility script** validates all files and filter logic.

3. **No universe file or blocklist is deleted or overwritten on failure—atomic save only on successful build.**

4. **Universe and blocklist are only updated after market close or on-demand; runtime never changes them.**

--------------------------------------------------------------------------------
Section 6: API, Quota, and Performance Considerations
--------------------------------------------------------------------------------

1. **API keys sourced securely (never hardcoded).**
2. **Only fetch minimal, required fields for blocklist candidates; use full/paid APIs only on eligible symbols.**
3. **Universe build must only use the following Finnhub endpoints: `/stock/symbol`, `/stock/profile2`, `/quote`.**
4. **Throttle/batch as needed for API quotas. Enforce provider rate limits (e.g., Finnhub 300 requests/minute) via UNIVERSE_SLEEP_TIME between requests.**
5. **Resume/continue supported via `unfiltered.json` and blocklist.**
6. **Blocklist polling and maintenance uses only free/low-cost sources whenever possible.**

--------------------------------------------------------------------------------
Section 7: Error Handling, Logging, and Recovery
--------------------------------------------------------------------------------

1. **All failures, API errors, and build anomalies logged to `universe_ops.log` (UTC).**
2. **Failed/unexpected build never overwrites previous universe or blocklist.**
3. **On failure, alerting/notification may be triggered (future enhancement).**

--------------------------------------------------------------------------------
Section 8: Extensibility and Future-Proofing
--------------------------------------------------------------------------------

1. **Architecture supports multiple brokers, multiple universes, flexible blocklist, and future expansion to new metadata fields.**
2. **All code and spec are versioned.**
3. **Additional exchange support and user-supplied symbol sources are plug-and-play.**
4. **Dynamic integration with broker APIs for tradability/fractional eligibility and with alternate data sources.**

================================================================================
