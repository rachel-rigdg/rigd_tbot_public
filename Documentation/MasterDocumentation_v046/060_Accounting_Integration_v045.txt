================================================================================
Document: 060
Accounting_Integration
Version: v045
Date: UTC:2025-06-24 00:00:00
================================================================================

This module mandates alignment of TradeBot with the internal, OFX-compliant accounting and ledger structure. *No external or shared ledger/accounting system may alter, inject, or provision data into the bot’s runtime, ledger, or COA files. All accounting integration is local, explicit, and compliance-locked.*

Contents:
- TBOT LEDGER INTEGRATION: ARCHITECTURE & COMPLIANCE
- Chart of Accounts — Single-Broker TBot Architecture

Ledger integrity, OFX compliance, and audit traceability are enforced at every stage.

{BOT_IDENTITY} = {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}

=============================================================================================================================================
TBOT LEDGER INTEGRATION: ARCHITECTURE & COMPLIANCE
=============================================================================================================================================

**Purpose:**  
Defines all rules for TradeBot accounting integration, ledger outputs, and compliance traceability. All logic is strictly local, never driven by an external accounting system or tool.

**Scope:**  
These rules apply to:
- All live or test-mode tbot trading
- All float/cash movement, profit/loss logging, reconciliation, and reporting

----------------------------------------------------------------------  
CORE INTEGRATION RULES  
----------------------------------------------------------------------

1. **LEDGER ISOLATION & FILENAME STRUCTURE**
   - All bot trading/actions write *only* to that bot's assigned ledger:  
     - `output/{BOT_IDENTITY}/ledgers/{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`
   - No cross-bot/entity writes; no shared ledgers.

2. **MULTI-CURRENCY AND ENTITY METADATA**
   - Each ledger entry includes explicit `currency_code`, `entity_code`, `jurisdiction_code`, `broker_code`, and `BOT_ID` fields.
   - Multi-currency and multi-entity compliance is always enabled, regardless of single-broker use.

3. **OFX-ALIGNED ENTRY & EXPORT**
   - All ledger/trade entries are OFX-aligned for export (`TRNTYPE`, `DTPOSTED`, `FITID`, etc.).
   - *No direct DB writes to final reporting tables*—all output goes through bot's local ingestion and reconciliation logic.

4. **DOUBLE-ENTRY ENFORCEMENT**
   - All tbot-generated ledger entries are double-entry, balancing debits/credits for trade, PnL, float, and fees.
   - Bot *never* bypasses or weakens double-entry; integrity check enforced before export.

5. **AUDIT LOGGING**
   - All actions triggering ledger changes are audit-logged (`logs/` table).
   - Manual edits or corrections are flagged, referenced, and subject to review.

6. **STRICT SYSTEM INDEPENDENCE**
   - No runtime or test logic may query, ingest, or update external accounting systems or ledgers.
   - All trade/test actions are local to the bot’s ledgers and logs.

----------------------------------------------------------------------  
MANDATORY FIELDS FOR EACH TRADE/ACTION  
----------------------------------------------------------------------

Each bot ledger entry **must include**:

- `TRNTYPE` (e.g., BUY, SELL, SHORT, COVER)
- `DTPOSTED` (UTC, ISO-8601)
- `FITID` (unique transaction ID)
- `currency_code` (e.g., USD)
- `entity_code`, `jurisdiction_code`, `broker_code`, `BOT_ID`
- `strategy` (open, mid, close)
- `ticker`/`symbol`
- `side` (long/short)
- `size`
- `entry_price`, `exit_price`
- `PnL`
- `audit_reference` (link to log/audit table)
- `TAG` (e.g., InverseETF, if applicable)
- `LEVERAGE_MULTIPLIER` (if leveraged ETF)

**All above fields are required for validation, audit, and export.**

----------------------------------------------------------------------  
ENFORCEMENT & SYSTEM CONSTRAINTS  
----------------------------------------------------------------------

- *All CSV/JSON exports are external artifacts, never re-ingested by the bot.*
- Only validated, double-entry-compliant data is written to ledgers after each strategy session.
- If ledger fails schema or double-entry validation, export is blocked.
- All compliance, schema, and field requirements are enforced by:
  - `tbot_bot/accounting/accounting_config.py`
  - `tbot_bot/accounting/ledger_utils.py`
  - `tbot_bot/accounting/coa_utils.py`
  - Export/report modules

**Note:** Inverse ETF, leveraged, or synthetic short trades are recorded with standard accounts; type and leverage tracked via `TAG` and `LEVERAGE_MULTIPLIER` fields.

----------------------------------------------------------------------  
RISKS IF IGNORED  
----------------------------------------------------------------------

- Ledger corruption or unbalanced entries
- Cross-entity or cross-bot capital misallocation
- Audit and regulatory noncompliance (OFX, IRS, SEC)
- Broken reconciliation or tax/filing output
- Inability to distinguish live/test activity

=============================================================================================================================================
Chart of Accounts – Single-Broker TBot Architecture
=============================================================================================================================================

*Every bot instance writes to a local, OFX-compliant ledger file:*
`output/{BOT_IDENTITY}/ledgers/{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_ledger.db`

----------------------------------------------------------------------------------------------------------------------------------------------
CHART OF ACCOUNTS: {ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_COA.db 
----------------------------------------------------------------------------------------------------------------------------------------------

# -- COA Metadata (Required in all ledgers and COA files) --
COA_METADATA:
    currency_code: "USD"
    entity_code: "{ENTITY_CODE}"
    jurisdiction_code: "{JURISDICTION_CODE}"
    coa_version: "v1.0.0"
    created_at_utc: "<UTC_TIMESTAMP>"
    last_updated_utc: "<UTC_TIMESTAMP>"

# -- Account Structure (core nodes only) --

1000 Bank and Cash Accounts [Cash & Equivalents]
├── 1010 Float Injection – From RIGD Group
├── 1020 Float Returned – To RIGD Group
├── 1030 Alpaca – Cash
├── 1040 IBKR – Cash
├── 1050 Tradier – Cash
├── 1060 Robinhood – Cash

1100 Assets [Investing Activities]
├── 1110 Brokerage Accounts – Equities
│   ├── 1111 Alpaca – Equities
│   ├── 1112 IBKR – Equities
│   ├── 1113 Tradier – Equities
│   └── 1114 Robinhood – Equities

2000 Liabilities [Operating Activities]
├── 2010 Broker Payables (Accrued Fees)
├── 2020 Market Data Payables (Accrued Subscriptions)

3000 Equity [Financing Activities]
├── 3010 Capital Float Ledger
├── 3020 Daily Float Allocation History
├── 3030 Opening Balance
├── 3040 Accumulated Profit

4000 Income [Operating Activities]
├── 4010 Realized Gains – Alpaca
├── 4020 Realized Gains – IBKR
├── 4030 Realized Gains – Tradier
├── 4040 Realized Gains – Robinhood
├── 4050 Qualified Dividends
├── 4060 Short-Term Capital Gains
├── 4070 Long-Term Capital Gains

5000 Expenses [Operating Activities]
├── 5010 Broker Fees – Alpaca
├── 5020 Broker Fees – IBKR
├── 5030 Broker Fees – Tradier
├── 5040 Broker Fees – Robinhood
├── 5050 Slippage / Execution Losses
├── 5060 API Timeout Penalties
├── 5070 Bot Infrastructure Costs

9100 Exports [Control & Reporting]
├── 9110 Daily P&L Export – Manager.io Format
├── 9120 CSV/JSON Trade Log Export
├── 9130 SQLite Ledger Backup
├── 9140 Broker Confirm Archive (PDFs)
├── 9150 End-of-Day Snapshot (Holdings + Cash)

9200 Logging / Execution References [Control]
├── 9210 Trade UUID
├── 9220 Broker Confirm #
├── 9230 Strategy Tag
├── 9240 Source Method Tag
├── 9250 EOD Synced Flag
├── 9260 Reconciliation Passed Flag

9300 System Integrity [Control]
├── 9310 Failures & Rejected Orders
├── 9320 Manual Overrides
├── 9330 Ledger Lock Flag (YES/NO)
├── 9340 Ledger Status: ACTIVE / DECOMMISSIONED
├── 9350 Final Entry Timestamp
└── 9360 Debug / Strategy Tags

------------------------------------------------------------------------------------------
COA Metadata & Versioning Notes
------------------------------------------------------------------------------------------

- All COA files must include at minimum:  
  - `currency_code`, `entity_code`, `jurisdiction_code`, `coa_version`, `created_at_utc`, `last_updated_utc`
- Schema migration = versioned filename:  
  `{ENTITY_CODE}_{JURISDICTION_CODE}_{BROKER_CODE}_{BOT_ID}_BOT_COA_v1.0.0.db`
- COA metadata is stored in `coa_metadata` table (same fields as above).
- All ledgers and COA files must be ready for multi-entity/currency expansion.

------------------------------------------------------------------------------------------
Export Constraints and Enforcement
------------------------------------------------------------------------------------------

- Only validated, reconciled trades are written to ledgers after session.
- If ledger fails schema or double-entry check, export is blocked.
- `.csv`/`.json` are for external audit only, never parsed for ingestion.
- All structure, compliance, and export logic is enforced by local accounting modules.

**Note:** Inverse ETF, leveraged, or synthetic trades are recorded as normal, with tags. No special COA accounts are required.




