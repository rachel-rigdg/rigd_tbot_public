================================================================================  
Document: 040  
Screener_Symbol_Universe  
Version: v046
Date: UTC:2025-06-30 00:00:00  
================================================================================

Title: Screener Symbol Universe — Comprehensive Universe Caching, Filtering, Staged Blocklist, and Runtime Use (Merged/Exhaustive Spec)

--------------------------------------------------------------------------------
Overview
--------------------------------------------------------------------------------
This specification governs the **entire symbol universe management lifecycle** for the RIGD TradeBot system. It merges all requirements from both Symbol Universe (040) and Long-Term Free Universe Build (041) specifications, supporting robust, staged, crash-resilient, multi-source, and zero-maintenance universe and blocklist management.

**Key goals:**
- Minimize API usage and costs.
- Ensure reliability, recoverability, and auditability for years with zero intervention.
- Support “set-and-forget” operation, multi-broker, and multi-source symbol integrity.
- Provide full transparency, disk-first recovery, and blocklist healing.
- Guarantee filter consistency, versioning, and audit logging.

--------------------------------------------------------------------------------
Section 1: Core Principles
--------------------------------------------------------------------------------
1. **Single canonical universe:** Only `symbol_universe.json` is used for all runtime screening.
2. **Universe built overnight:** Pulls only after market close, before market open, using official exchange lists and/or multiple public sources.
3. **Staged, quota-minimizing API calls:**
   - **First pass:** Use only free/cheap APIs (or official exchange symbol lists) for symbol and price eligibility.
   - **Second pass:** Only eligible (non-blocklisted, price≥$1) symbols get full paid-API metadata calls.
4. **Blocklist first:**
   - All excluded/ineligible/low-priced tickers go to the blocklist with reason and timestamp.
   - Blocklist is automatically maintained, scheduled for weekly “healing” checks.
5. **Multi-source, multi-exchange:**
   - Fallback across nasdaqlisted.txt, otherexchanges.txt, IEX, Yahoo, Tradier, etc.
   - Symbol universe/diff is validated by comparing at least two sources each build.
6. **Redundant archiving:**
   - All universe and blocklist files are versioned and archived for a minimum retention window (default: 90 days).
7. **Audit-first and disk-first:**
   - Every step is logged, all failures and API events are written to `universe_ops.log`.
   - Crash recovery is supported via disk checkpoints at every stage.
8. **No runtime fetching:**
   - Only the nightly (or on-demand) process updates universe/blocklist. All screeners use the on-disk file.
9. **Zero-maintenance, set-and-forget:**
   - Architecture is self-healing, supports source fallbacks, can survive API/service deprecations, and auto-archives for years.
10. **Fully versioned:**
    - All schema and file versions are tracked and validated at each load.

--------------------------------------------------------------------------------
Section 2: Universe Construction & Blocklist Workflow
--------------------------------------------------------------------------------

**Nightly Multi-Stage Build Process:**

1. **Download full symbol lists from all supported sources:**
   - e.g. nasdaqlisted.txt, otherexchanges.txt, NYSE/AMEX/ARCA, IEX, Yahoo, Tradier, Polygon, etc.
   - Archive source files nightly with timestamp.
   - Compare row counts and symbol sets between at least two sources. Log and halt on major drift/mismatch.

2. **For each candidate symbol:**
   - **If symbol on blocklist:** Skip full processing, unless blocklist update mode is running.
   - **If not blocklisted:** Query *only* price using free/cheap API (priority: Yahoo, Polygon, Tradier, etc.).
   - **If price < $1:**
     - Add symbol to blocklist with UTC timestamp, price, and source.
     - Write immediately to `screener_blocklist.txt`.
   - **If price ≥ $1:**
     - Mark eligible for further processing.

3. **Eligible, price-qualified symbols:**
   - Fetch all required metadata (paid API, e.g. Finnhub/IBKR):
     - lastClose, marketCap, sector, exchange, fractional eligibility, etc.
   - Immediately append to `symbol_universe.unfiltered.json`.
   - Deduplicate in-memory and/or on disk by symbol.

4. **Inline filtering:**
   - Apply all core filters (exchange, price, marketCap, non-null).
   - For price > max, enforce broker fractional eligibility (`isFractional` from broker API or symbol metadata).
   - Symbols passing all filters go to both `symbol_universe.partial.json` and `symbol_universe.json` as soon as available.

5. **Atomic, crash-resilient writes:**
   - All files are written atomically; no partial/corrupt files on crash.
   - Recovery continues from unfiltered file and blocklist.

6. **Audit and diff:**
   - Log symbol additions, deletions, and universe drifts between builds.
   - Archive daily universes and diffs for backtesting and audit.

7. **End-of-build merge and validation:**
   - Compare/merge partial and final filtered universes, check for duplicates/missing.
   - Write completion audit/log entry.

**Blocklist Maintenance & Healing:**
- Blocklist is rebuilt/refreshed nightly; delisted/ineligible/low-price symbols are added automatically.
- **Weekend/periodic full recheck:**
   - Re-query all blocklisted symbols with current free/cheap price source.
   - Remove from blocklist and re-queue if price recovers above minimum threshold.
   - Write blocklist change events to log.
- All blocklist actions are logged, with source, reason, and timestamp.
- Blocklist is archived nightly (with timestamped filename).

--------------------------------------------------------------------------------
Section 3: File/Script Layout & Responsibilities
--------------------------------------------------------------------------------

- **symbol_universe.unfiltered.json:** Raw, deduped, fully fetched symbols with all metadata fields.
- **symbol_universe.partial.json:** Inline-filtered, progress-tracking file of filter-eligible symbols.
- **symbol_universe.json:** Final, production-ready, fully validated symbol universe.
- **screener_blocklist.txt:**
  - One ticker per line, with UTC timestamp, reason (e.g. “price < $1”, “delisted”), and optionally price/source.
  - Example: `XYZ,2025-07-01T01:23:45Z,price<1,Yahoo`
- **universe_ops.log:** Structured, UTC-timestamped event log for every build, error, or manual action.
- **archived/source-symbol-lists:** All nightly raw exchange symbol lists with timestamp.
- **tbot_bot/screeners/symbol_universe_refresh.py:**
   - Orchestrates staged downloads, blocklist build, filtering, and all file writes.
   - Implements crash-resilience, audit, and restart/recovery logic.
- **tbot_bot/screeners/blocklist_manager.py:**
   - Blocklist loading, writing, healing, deduplication, and event/audit logic.
- **tbot_bot/screeners/screener_utils.py:**
   - Loads and validates universes, blocklist, source files.
   - Handles deduplication, merging, and schema/version validation.
- **tbot_bot/screeners/screener_filter.py:**
   - Field normalization, exchange/cap/price filtering, broker tradability/fractional checks.
- **tbot_web/py/universe_web.py:**
   - Web UI endpoints for status, export, rebuild, blocklist maintenance, and search.

--------------------------------------------------------------------------------
Section 4: Web UI and User Actions
--------------------------------------------------------------------------------

1. **Web UI `/universe` main page:**
   - Real-time counts/status for all universe files and blocklist.
   - Four side-by-side, infinitely scrollable tables (unfiltered, partial, final, blocklist).
   - “Force Rebuild”, “Re-filter”, “Update Blocklist”, “Archive Export” buttons.
   - Progress/heartbeat log stream.
   - Search/filter box (regex, multi-column).
   - All table file download/export (CSV/JSON) options.

2. **Manual/automated triggers:**
   - Re-filter from unfiltered (no new fetch).
   - Blocklist maintenance and recheck (with before/after diff shown).
   - Audit trail and universe/blocklist diff visualizer.

3. **Archive/recovery access:**
   - Download or restore any previous universe/blocklist file from retention.

--------------------------------------------------------------------------------
Section 5: Validation, Drift Detection, Maintenance
--------------------------------------------------------------------------------

1. **Validation for every file:**
   - All entries: `symbol`, `exchange`, `lastClose`, `marketCap`, `sector`, `isFractional` as available.
   - Deduplication required in all outputs.
   - JSON UTF-8 integrity check, atomic write only.
   - Blocklist consistency and auto-update logic enforced.
   - All errors, drift, and mismatches logged.

2. **Symbol set drift detection:**
   - Each build compares symbol sets vs. previous day, logs additions/removals/diffs.
   - Alerts if symbol count drops/increases dramatically (>2% threshold).

3. **Audit/QA tools:**
   - Validation script for all outputs (field checks, cross-file consistency).
   - Blocklist audit tools for recheck, drift, and healing.

4. **No file is deleted or overwritten on error—atomic saves only.**
   - All previous universes/blocklists are preserved/archived.

5. **Long-term archival and retention:**
   - Nightly snapshot of every universe and blocklist for minimum 90 days.
   - Retention policy can be extended for regulatory/audit requirements.

--------------------------------------------------------------------------------
Section 6: API, Quota, and Performance
--------------------------------------------------------------------------------

1. **API keys always loaded from encrypted secrets.**
2. **Free/cheap APIs for price screening (e.g., Yahoo, Tradier, Polygon).**
3. **Paid APIs (e.g., Finnhub, IBKR) used only for symbols passing all free-stage filters.**
4. **Only the following Finnhub endpoints are allowed: `/stock/symbol`, `/stock/profile2`, `/quote`.**
5. **Strict API quota and rate-limiting:**
   - UNIVERSE_SLEEP_TIME enforced per call.
   - If daily quota is exceeded, builder halts and logs error.
6. **Blocklist maintenance uses only free/low-cost APIs for polling/recovery.**
7. **Crash recovery at every disk checkpoint; never refetches more than necessary.**
8. **Redundant download and verification:**
   - All symbol source lists downloaded from two or more sources, compared nightly.
   - Halt and alert on mismatch/drift.

--------------------------------------------------------------------------------
Section 7: Error Handling, Logging, and Recovery
--------------------------------------------------------------------------------

1. **Every build step, API call, error, and blocklist event is logged to `universe_ops.log` with UTC timestamp.**
2. **Atomic, write-safe file ops.**
3. **On critical failure, system halts, sends alert (future), and preserves last good universe/blocklist.**
4. **Audit log supports full stepwise recovery and post-mortem for every event.**
5. **All blocklist changes (add, remove, heal) are event-logged with source, price, timestamp, reason.**

--------------------------------------------------------------------------------
Section 8: Extensibility and Future-Proofing
--------------------------------------------------------------------------------

1. **Supports any number of symbol sources and fallback APIs.**
2. **Plug-and-play: New sources/exchanges added with config only, not code changes.**
3. **Future support for international universes, broker-level custom filtering, extended metadata fields.**
4. **Flexible retention and audit requirements.**
5. **Fully versioned and schema-validated.**
6. **All logic tested for multi-year, zero-maintenance, “set and forget” operation.**

================================================================================
