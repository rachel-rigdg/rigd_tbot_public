================================================================================
Document: 040
Screener_Symbol_Universe
Version: v045
Date: UTC:2025-06-24 00:00:00
================================================================================

Title: Screener Symbol Universe — Universe Caching, Filtering, and Runtime Use

Overview:
--------------------------------------------------------------------------------
This specification defines the unified approach for building, caching, filtering, and consuming the symbol universe for all trading screeners in the RIGD TradeBot system. The aim is to guarantee efficiency, scalability, and compliance with API quotas while enforcing a consistent symbol selection logic across brokers (Alpaca, IBKR, Tradier, etc.).

All screener modules must source their eligible symbol list exclusively from the nightly-generated, pre-filtered symbol universe file (`symbol_universe.json`). No screener is permitted to fetch the global exchange symbol list or screen the full market in real time.

--------------------------------------------------------------------------------
Section 1: Core Principles
--------------------------------------------------------------------------------

1. **One canonical symbol universe file** is generated per trading day and must be the *only* source of symbols for all screeners.
2. **Universe is created overnight** (after market close, before market open) using only NYSE/NASDAQ, with price and market cap filters applied.
3. **API quota minimization:** Only minimal, targeted API calls are made at screener runtime (quotes only for pre-approved symbols).
4. **Universe is consistent** for all strategies, brokers, and filter modules.
5. **Universe is stored at a standard path**: `tbot_bot/output/screeners/symbol_universe.json`
6. **No screener can run** unless the universe cache exists and passes validation.
7. **Universe refresh is scheduled or automatically triggered by the bot runtime on startup and before trading, and always uses after-hours market data.**
8. **Manual force rebuild is always available via the Web UI.**
9. **On first boot, a stripped-down placeholder universe is accepted but will be rebuilt before the first trading session.**

--------------------------------------------------------------------------------
Section 2: Universe Construction Workflow
--------------------------------------------------------------------------------

1. **Fetch complete symbol list for NYSE and NASDAQ** from the upstream provider (Alpaca, IBKR, or other).
   - Must include: ticker, exchange, company name, latest close price, market cap, and optionally sector/industry.
   - Do NOT include OTC, pink sheets, or non-equities.

2. **Filter for minimum requirements:**
   - Exchange: Must be "NYSE" or "NASDAQ"
   - Price: Last close price >= `$MIN_PRICE` (e.g., $5), <= `$MAX_PRICE` (e.g., $100)
   - Market Cap: >= `$MIN_MARKET_CAP` (e.g., $2B), <= `$MAX_MARKET_CAP` (e.g., $10B)
   - Must have valid, nonzero values for all fields

3. **Store all qualifying symbols and metadata in `symbol_universe.json`**.
   - Each entry is an object with at least:
     ```
     {
         "symbol": "AAPL",
         "exchange": "NASDAQ",
         "companyName": "Apple Inc.",
         "lastClose": 189.30,
         "marketCap": 3000000000000,
         "sector": "Technology",
         "industry": "Consumer Electronics"
     }
     ```
   - The file is a JSON array of such objects or, in latest spec, a JSON object with schema version, build timestamp, and a "symbols" array.
   - On first boot, a stripped-down placeholder (small array or incomplete file) is acceptable for bootstrap only; the bot will force a complete rebuild before trading.

4. **Universe file is overwritten nightly or on bot startup if missing or stale.** No incremental updates.

5. **Universe fetch and cache script is idempotent** — rerunning it always results in a fresh, fully-filtered universe file for next-day use.

--------------------------------------------------------------------------------
Section 3: File/Script Layout & Responsibilities
--------------------------------------------------------------------------------

- `tbot_bot/screeners/symbol_universe_refresh.py` — Fetches and writes new universe (triggered automatically by bot at startup and before trading; can also be called manually from CLI or Web UI).
- `tbot_bot/output/screeners/symbol_universe.json` — Output data file, consumed by all screeners.
- `tbot_bot/screeners/screener_utils.py` — Loader/validator for runtime modules (ensures file exists, schema valid, not stale, and not a placeholder).
- `tbot_bot/screeners/alpaca_screener.py`, `ibkr_screener.py`, etc. — All must call screener_utils or symbol_universe loader for their symbol list.
- **No external cron or systemd trigger is required. The bot runtime manages symbol universe freshness automatically.**

--------------------------------------------------------------------------------
Section 4: Runtime Screener Behavior
--------------------------------------------------------------------------------

1. **No runtime fetches of global symbol lists.**
   - Screeners may *only* read from the pre-built symbol universe.
   - Only quote/pricing endpoints may be called live, and only for pre-filtered symbols.

2. **Screeners may filter further** by additional strategy criteria (VWAP, volume, etc.), but these filters are always applied after the universe load.

3. **If `symbol_universe.json` is missing, invalid, stale, or a placeholder,** the bot runtime will automatically trigger a rebuild before trading. If the rebuild fails, all trading is halted.

4. **Manual force-rebuild is always available from the Web UI `/universe` POST.**

5. **New symbol metadata is not added during market hours.**
   - Universe is fixed for the trading session and only updated by the automatic or manual rebuild triggers.

--------------------------------------------------------------------------------
Section 5: Validation & Maintenance
--------------------------------------------------------------------------------

1. **Validation on universe cache creation:**
   - All entries must have: symbol, exchange, lastClose, marketCap (at minimum).
   - Duplicates must be eliminated.
   - File must be valid UTF-8 JSON.
   - Any fetch failures, API errors, or truncations must be logged with UTC timestamps.

2. **Test/QA script:**  
   - A utility script must be included (`test_universe_cache.py`) that validates cache contents and checks schema.

3. **Universe refresh must run after the market closes** (e.g., 6pm ET), never during live hours. If the bot was offline, the first startup after close will rebuild the universe.

4. **Universe file permissions:**  
   - File must be readable by the trading bot.
   - Refresh must overwrite with correct permissions and not break atomicity.

--------------------------------------------------------------------------------
Section 6: API, Quota, and Performance Considerations
--------------------------------------------------------------------------------

1. **All API keys used must be sourced securely** (decrypted at runtime, never hardcoded).
2. **Only fetch the minimum required data for universe creation.**
   - Avoid fields requiring premium entitlements.
   - For market cap/price, use official close data (no after-hours or premarket).

3. **If provider imposes API quota,** fetch in batches and throttle as needed.

4. **Universe refresh script should be retry-safe and resume on partial failure** (if required by provider limits).

--------------------------------------------------------------------------------
Section 7: Error Handling, Logging, and Recovery
--------------------------------------------------------------------------------

1. **All errors and API failures during universe fetch must be logged** to `output/bootstrap/logs/` with UTC timestamp.
2. **On failure:** old universe file is NOT deleted or replaced. Only overwrite on complete success.
3. **A failed universe refresh should trigger alerting** (future enhancement: notify admin).

--------------------------------------------------------------------------------
Section 8: Extension and Future-Proofing
--------------------------------------------------------------------------------

1. **Support multi-broker symbol universes** (if different brokers require different filters/formats, support multiple caches with clearly named files).
2. **Support for additional metadata:** (e.g., beta, volatility, short interest, etc.) via modular expansion.
3. **For international expansion,** architecture must allow universe filters to adapt to other exchanges/markets as required.

--------------------------------------------------------------------------------
Section 9: Maintenance, Change Management, and Documentation
--------------------------------------------------------------------------------

1. **Universe cache spec must be documented and versioned.**
2. **Any change to the cache logic, schema, or runtime contract must trigger a spec/version update.**
3. **All screener and strategy modules must be validated against new cache logic before deployment.**

================================================================================

================================================================================
